// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sensors_grpc/sensors.proto

#include "sensors_grpc/sensors.pb.h"
#include "sensors_grpc/sensors.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sensors {

static const char* Sensors_method_names[] = {
  "/sensors.Sensors/TurnOnLed",
  "/sensors.Sensors/TurnOffLed",
  "/sensors.Sensors/ActivateHmiState",
  "/sensors.Sensors/DeactivateHmiState",
  "/sensors.Sensors/SetNavigationScaling",
  "/sensors.Sensors/TurnOnUltrasonic",
  "/sensors.Sensors/TurnOffUltrasonic",
  "/sensors.Sensors/TurnOnRadar",
  "/sensors.Sensors/TurnOffRadar",
  "/sensors.Sensors/CollectImuCalibration",
  "/sensors.Sensors/DFGetCurrentParameters",
  "/sensors.Sensors/DFGetBufferedEvents",
  "/sensors.Sensors/DisableLuci",
  "/sensors.Sensors/JsOverride",
  "/sensors.Sensors/SetDriveMode",
  "/sensors.Sensors/SetRampMode",
  "/sensors.Sensors/SetLuciOverride",
  "/sensors.Sensors/ExtPressCount",
  "/sensors.Sensors/HmiStream",
  "/sensors.Sensors/PressCountStream",
  "/sensors.Sensors/UltrasonicStream",
  "/sensors.Sensors/RawUltrasonicStream",
  "/sensors.Sensors/RadarStream",
  "/sensors.Sensors/RawRadarStream",
  "/sensors.Sensors/ChairSpeedStream",
  "/sensors.Sensors/ImuStream",
  "/sensors.Sensors/ChairModeStream",
  "/sensors.Sensors/ChairProfileStream",
  "/sensors.Sensors/SpeedSettingStream",
  "/sensors.Sensors/JoystickStream",
  "/sensors.Sensors/VirtualJoystickStream",
  "/sensors.Sensors/PhysicalJoystickStream",
  "/sensors.Sensors/ScaledJoystickStream",
  "/sensors.Sensors/LuciJoystickStream",
  "/sensors.Sensors/AhrsStream",
  "/sensors.Sensors/RadarClosestObstaclesStream",
  "/sensors.Sensors/UltrasonicClosestObstaclesStream",
  "/sensors.Sensors/CameraCollisionClosestObstaclesStream",
  "/sensors.Sensors/StepClosestObstaclesStream",
  "/sensors.Sensors/DropoffClosestObstaclesStream",
  "/sensors.Sensors/ScalingStream",
  "/sensors.Sensors/BatteryVoltageStream",
  "/sensors.Sensors/BatteryPercentStream",
  "/sensors.Sensors/CameraStream",
  "/sensors.Sensors/FlatCameraStream",
  "/sensors.Sensors/DropoffCameraStream",
  "/sensors.Sensors/CaneCameraStream",
  "/sensors.Sensors/GPSStream",
  "/sensors.Sensors/SeatPressureStream",
  "/sensors.Sensors/DFParametersChangedStream",
  "/sensors.Sensors/DFEventStream",
  "/sensors.Sensors/SendLogging",
  "/sensors.Sensors/LoggingStream",
  "/sensors.Sensors/StepCameraStream",
  "/sensors.Sensors/IrStream",
  "/sensors.Sensors/RampAssistStream",
  "/sensors.Sensors/DistStream",
  "/sensors.Sensors/StartModeStream",
  "/sensors.Sensors/AudioPlaybackRequestStream",
  "/sensors.Sensors/GetZoneBoundaries",
  "/sensors.Sensors/GetBlockedZones",
  "/sensors.Sensors/GetJoystickRanges",
  "/sensors.Sensors/EnableRadarFilter",
  "/sensors.Sensors/DisableRadarFilter",
  "/sensors.Sensors/EncoderStream",
  "/sensors.Sensors/GetCalMatrix",
  "/sensors.Sensors/TestReaction",
  "/sensors.Sensors/LuciOverrideStream",
  "/sensors.Sensors/LuciLandmarkStreamPassThrough",
  "/sensors.Sensors/RampInfoStreamPassThrough",
  "/sensors.Sensors/LuciLandmarkStream",
  "/sensors.Sensors/RampInfoStream",
  "/sensors.Sensors/DriveModeStream",
};

std::unique_ptr< Sensors::Stub> Sensors::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Sensors::Stub> stub(new Sensors::Stub(channel, options));
  return stub;
}

Sensors::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_TurnOnLed_(Sensors_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TurnOffLed_(Sensors_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ActivateHmiState_(Sensors_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeactivateHmiState_(Sensors_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNavigationScaling_(Sensors_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TurnOnUltrasonic_(Sensors_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TurnOffUltrasonic_(Sensors_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TurnOnRadar_(Sensors_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TurnOffRadar_(Sensors_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CollectImuCalibration_(Sensors_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DFGetCurrentParameters_(Sensors_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DFGetBufferedEvents_(Sensors_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisableLuci_(Sensors_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JsOverride_(Sensors_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDriveMode_(Sensors_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRampMode_(Sensors_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLuciOverride_(Sensors_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExtPressCount_(Sensors_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HmiStream_(Sensors_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PressCountStream_(Sensors_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_UltrasonicStream_(Sensors_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RawUltrasonicStream_(Sensors_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RadarStream_(Sensors_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RawRadarStream_(Sensors_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ChairSpeedStream_(Sensors_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ImuStream_(Sensors_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ChairModeStream_(Sensors_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ChairProfileStream_(Sensors_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SpeedSettingStream_(Sensors_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_JoystickStream_(Sensors_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_VirtualJoystickStream_(Sensors_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PhysicalJoystickStream_(Sensors_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ScaledJoystickStream_(Sensors_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_LuciJoystickStream_(Sensors_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_AhrsStream_(Sensors_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RadarClosestObstaclesStream_(Sensors_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_UltrasonicClosestObstaclesStream_(Sensors_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CameraCollisionClosestObstaclesStream_(Sensors_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StepClosestObstaclesStream_(Sensors_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DropoffClosestObstaclesStream_(Sensors_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ScalingStream_(Sensors_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_BatteryVoltageStream_(Sensors_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_BatteryPercentStream_(Sensors_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CameraStream_(Sensors_method_names[43], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_FlatCameraStream_(Sensors_method_names[44], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DropoffCameraStream_(Sensors_method_names[45], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CaneCameraStream_(Sensors_method_names[46], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GPSStream_(Sensors_method_names[47], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SeatPressureStream_(Sensors_method_names[48], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DFParametersChangedStream_(Sensors_method_names[49], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DFEventStream_(Sensors_method_names[50], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendLogging_(Sensors_method_names[51], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoggingStream_(Sensors_method_names[52], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StepCameraStream_(Sensors_method_names[53], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_IrStream_(Sensors_method_names[54], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RampAssistStream_(Sensors_method_names[55], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DistStream_(Sensors_method_names[56], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StartModeStream_(Sensors_method_names[57], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_AudioPlaybackRequestStream_(Sensors_method_names[58], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetZoneBoundaries_(Sensors_method_names[59], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockedZones_(Sensors_method_names[60], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJoystickRanges_(Sensors_method_names[61], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EnableRadarFilter_(Sensors_method_names[62], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisableRadarFilter_(Sensors_method_names[63], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EncoderStream_(Sensors_method_names[64], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetCalMatrix_(Sensors_method_names[65], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestReaction_(Sensors_method_names[66], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LuciOverrideStream_(Sensors_method_names[67], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_LuciLandmarkStreamPassThrough_(Sensors_method_names[68], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_RampInfoStreamPassThrough_(Sensors_method_names[69], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_LuciLandmarkStream_(Sensors_method_names[70], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RampInfoStream_(Sensors_method_names[71], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DriveModeStream_(Sensors_method_names[72], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Sensors::Stub::TurnOnLed(::grpc::ClientContext* context, const ::sensors::Led& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensors::Led, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TurnOnLed_, context, request, response);
}

void Sensors::Stub::experimental_async::TurnOnLed(::grpc::ClientContext* context, const ::sensors::Led* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensors::Led, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TurnOnLed_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::TurnOnLed(::grpc::ClientContext* context, const ::sensors::Led* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TurnOnLed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncTurnOnLedRaw(::grpc::ClientContext* context, const ::sensors::Led& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::sensors::Led, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TurnOnLed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncTurnOnLedRaw(::grpc::ClientContext* context, const ::sensors::Led& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTurnOnLedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::TurnOffLed(::grpc::ClientContext* context, const ::sensors::Led& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensors::Led, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TurnOffLed_, context, request, response);
}

void Sensors::Stub::experimental_async::TurnOffLed(::grpc::ClientContext* context, const ::sensors::Led* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensors::Led, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TurnOffLed_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::TurnOffLed(::grpc::ClientContext* context, const ::sensors::Led* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TurnOffLed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncTurnOffLedRaw(::grpc::ClientContext* context, const ::sensors::Led& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::sensors::Led, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TurnOffLed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncTurnOffLedRaw(::grpc::ClientContext* context, const ::sensors::Led& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTurnOffLedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::ActivateHmiState(::grpc::ClientContext* context, const ::sensors::HmiState& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensors::HmiState, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ActivateHmiState_, context, request, response);
}

void Sensors::Stub::experimental_async::ActivateHmiState(::grpc::ClientContext* context, const ::sensors::HmiState* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensors::HmiState, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ActivateHmiState_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::ActivateHmiState(::grpc::ClientContext* context, const ::sensors::HmiState* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ActivateHmiState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncActivateHmiStateRaw(::grpc::ClientContext* context, const ::sensors::HmiState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::sensors::HmiState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ActivateHmiState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncActivateHmiStateRaw(::grpc::ClientContext* context, const ::sensors::HmiState& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncActivateHmiStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::DeactivateHmiState(::grpc::ClientContext* context, const ::sensors::HmiState& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensors::HmiState, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeactivateHmiState_, context, request, response);
}

void Sensors::Stub::experimental_async::DeactivateHmiState(::grpc::ClientContext* context, const ::sensors::HmiState* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensors::HmiState, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeactivateHmiState_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::DeactivateHmiState(::grpc::ClientContext* context, const ::sensors::HmiState* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeactivateHmiState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncDeactivateHmiStateRaw(::grpc::ClientContext* context, const ::sensors::HmiState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::sensors::HmiState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeactivateHmiState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncDeactivateHmiStateRaw(::grpc::ClientContext* context, const ::sensors::HmiState& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeactivateHmiStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::SetNavigationScaling(::grpc::ClientContext* context, const ::sensors::NavigationScaling& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensors::NavigationScaling, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetNavigationScaling_, context, request, response);
}

void Sensors::Stub::experimental_async::SetNavigationScaling(::grpc::ClientContext* context, const ::sensors::NavigationScaling* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensors::NavigationScaling, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNavigationScaling_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::SetNavigationScaling(::grpc::ClientContext* context, const ::sensors::NavigationScaling* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNavigationScaling_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncSetNavigationScalingRaw(::grpc::ClientContext* context, const ::sensors::NavigationScaling& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::sensors::NavigationScaling, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetNavigationScaling_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncSetNavigationScalingRaw(::grpc::ClientContext* context, const ::sensors::NavigationScaling& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetNavigationScalingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::TurnOnUltrasonic(::grpc::ClientContext* context, const ::sensors::UltrasonicCtrl& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensors::UltrasonicCtrl, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TurnOnUltrasonic_, context, request, response);
}

void Sensors::Stub::experimental_async::TurnOnUltrasonic(::grpc::ClientContext* context, const ::sensors::UltrasonicCtrl* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensors::UltrasonicCtrl, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TurnOnUltrasonic_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::TurnOnUltrasonic(::grpc::ClientContext* context, const ::sensors::UltrasonicCtrl* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TurnOnUltrasonic_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncTurnOnUltrasonicRaw(::grpc::ClientContext* context, const ::sensors::UltrasonicCtrl& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::sensors::UltrasonicCtrl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TurnOnUltrasonic_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncTurnOnUltrasonicRaw(::grpc::ClientContext* context, const ::sensors::UltrasonicCtrl& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTurnOnUltrasonicRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::TurnOffUltrasonic(::grpc::ClientContext* context, const ::sensors::UltrasonicCtrl& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensors::UltrasonicCtrl, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TurnOffUltrasonic_, context, request, response);
}

void Sensors::Stub::experimental_async::TurnOffUltrasonic(::grpc::ClientContext* context, const ::sensors::UltrasonicCtrl* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensors::UltrasonicCtrl, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TurnOffUltrasonic_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::TurnOffUltrasonic(::grpc::ClientContext* context, const ::sensors::UltrasonicCtrl* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TurnOffUltrasonic_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncTurnOffUltrasonicRaw(::grpc::ClientContext* context, const ::sensors::UltrasonicCtrl& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::sensors::UltrasonicCtrl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TurnOffUltrasonic_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncTurnOffUltrasonicRaw(::grpc::ClientContext* context, const ::sensors::UltrasonicCtrl& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTurnOffUltrasonicRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::TurnOnRadar(::grpc::ClientContext* context, const ::sensors::RadarCtrl& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensors::RadarCtrl, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TurnOnRadar_, context, request, response);
}

void Sensors::Stub::experimental_async::TurnOnRadar(::grpc::ClientContext* context, const ::sensors::RadarCtrl* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensors::RadarCtrl, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TurnOnRadar_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::TurnOnRadar(::grpc::ClientContext* context, const ::sensors::RadarCtrl* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TurnOnRadar_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncTurnOnRadarRaw(::grpc::ClientContext* context, const ::sensors::RadarCtrl& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::sensors::RadarCtrl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TurnOnRadar_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncTurnOnRadarRaw(::grpc::ClientContext* context, const ::sensors::RadarCtrl& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTurnOnRadarRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::TurnOffRadar(::grpc::ClientContext* context, const ::sensors::RadarCtrl& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensors::RadarCtrl, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TurnOffRadar_, context, request, response);
}

void Sensors::Stub::experimental_async::TurnOffRadar(::grpc::ClientContext* context, const ::sensors::RadarCtrl* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensors::RadarCtrl, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TurnOffRadar_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::TurnOffRadar(::grpc::ClientContext* context, const ::sensors::RadarCtrl* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TurnOffRadar_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncTurnOffRadarRaw(::grpc::ClientContext* context, const ::sensors::RadarCtrl& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::sensors::RadarCtrl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TurnOffRadar_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncTurnOffRadarRaw(::grpc::ClientContext* context, const ::sensors::RadarCtrl& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTurnOffRadarRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::CollectImuCalibration(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CollectImuCalibration_, context, request, response);
}

void Sensors::Stub::experimental_async::CollectImuCalibration(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CollectImuCalibration_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::CollectImuCalibration(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CollectImuCalibration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncCollectImuCalibrationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CollectImuCalibration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncCollectImuCalibrationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCollectImuCalibrationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::DFGetCurrentParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DFGetCurrentParameters_, context, request, response);
}

void Sensors::Stub::experimental_async::DFGetCurrentParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DFGetCurrentParameters_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::DFGetCurrentParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DFGetCurrentParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncDFGetCurrentParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DFGetCurrentParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncDFGetCurrentParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDFGetCurrentParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::DFGetBufferedEvents(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DFGetBufferedEvents_, context, request, response);
}

void Sensors::Stub::experimental_async::DFGetBufferedEvents(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DFGetBufferedEvents_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::DFGetBufferedEvents(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DFGetBufferedEvents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncDFGetBufferedEventsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DFGetBufferedEvents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncDFGetBufferedEventsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDFGetBufferedEventsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::DisableLuci(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DisableLuci_, context, request, response);
}

void Sensors::Stub::experimental_async::DisableLuci(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableLuci_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::DisableLuci(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableLuci_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncDisableLuciRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DisableLuci_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncDisableLuciRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableLuciRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::JsOverride(::grpc::ClientContext* context, const ::sensors::RemoteJsValues& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensors::RemoteJsValues, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_JsOverride_, context, request, response);
}

void Sensors::Stub::experimental_async::JsOverride(::grpc::ClientContext* context, const ::sensors::RemoteJsValues* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensors::RemoteJsValues, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JsOverride_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::JsOverride(::grpc::ClientContext* context, const ::sensors::RemoteJsValues* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JsOverride_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncJsOverrideRaw(::grpc::ClientContext* context, const ::sensors::RemoteJsValues& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::sensors::RemoteJsValues, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_JsOverride_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncJsOverrideRaw(::grpc::ClientContext* context, const ::sensors::RemoteJsValues& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJsOverrideRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::SetDriveMode(::grpc::ClientContext* context, const ::sensors::ModeCtrl& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensors::ModeCtrl, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDriveMode_, context, request, response);
}

void Sensors::Stub::experimental_async::SetDriveMode(::grpc::ClientContext* context, const ::sensors::ModeCtrl* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensors::ModeCtrl, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDriveMode_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::SetDriveMode(::grpc::ClientContext* context, const ::sensors::ModeCtrl* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDriveMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncSetDriveModeRaw(::grpc::ClientContext* context, const ::sensors::ModeCtrl& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::sensors::ModeCtrl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDriveMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncSetDriveModeRaw(::grpc::ClientContext* context, const ::sensors::ModeCtrl& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDriveModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::SetRampMode(::grpc::ClientContext* context, const ::sensors::RampMode& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensors::RampMode, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetRampMode_, context, request, response);
}

void Sensors::Stub::experimental_async::SetRampMode(::grpc::ClientContext* context, const ::sensors::RampMode* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensors::RampMode, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRampMode_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::SetRampMode(::grpc::ClientContext* context, const ::sensors::RampMode* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRampMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncSetRampModeRaw(::grpc::ClientContext* context, const ::sensors::RampMode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::sensors::RampMode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetRampMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncSetRampModeRaw(::grpc::ClientContext* context, const ::sensors::RampMode& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRampModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::SetLuciOverride(::grpc::ClientContext* context, const ::sensors::LuciOverride& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensors::LuciOverride, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetLuciOverride_, context, request, response);
}

void Sensors::Stub::experimental_async::SetLuciOverride(::grpc::ClientContext* context, const ::sensors::LuciOverride* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensors::LuciOverride, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLuciOverride_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::SetLuciOverride(::grpc::ClientContext* context, const ::sensors::LuciOverride* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLuciOverride_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncSetLuciOverrideRaw(::grpc::ClientContext* context, const ::sensors::LuciOverride& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::sensors::LuciOverride, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetLuciOverride_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncSetLuciOverrideRaw(::grpc::ClientContext* context, const ::sensors::LuciOverride& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetLuciOverrideRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::ExtPressCount(::grpc::ClientContext* context, const ::sensors::PressCountStreamData& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensors::PressCountStreamData, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExtPressCount_, context, request, response);
}

void Sensors::Stub::experimental_async::ExtPressCount(::grpc::ClientContext* context, const ::sensors::PressCountStreamData* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensors::PressCountStreamData, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExtPressCount_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::ExtPressCount(::grpc::ClientContext* context, const ::sensors::PressCountStreamData* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExtPressCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncExtPressCountRaw(::grpc::ClientContext* context, const ::sensors::PressCountStreamData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::sensors::PressCountStreamData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExtPressCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncExtPressCountRaw(::grpc::ClientContext* context, const ::sensors::PressCountStreamData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExtPressCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::sensors::HmiStreamData>* Sensors::Stub::HmiStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::HmiStreamData>::Create(channel_.get(), rpcmethod_HmiStream_, context, request);
}

void Sensors::Stub::experimental_async::HmiStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::HmiStreamData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::HmiStreamData>::Create(stub_->channel_.get(), stub_->rpcmethod_HmiStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::HmiStreamData>* Sensors::Stub::AsyncHmiStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::HmiStreamData>::Create(channel_.get(), cq, rpcmethod_HmiStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::HmiStreamData>* Sensors::Stub::PrepareAsyncHmiStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::HmiStreamData>::Create(channel_.get(), cq, rpcmethod_HmiStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::PressCountStreamData>* Sensors::Stub::PressCountStreamRaw(::grpc::ClientContext* context, const ::sensors::PressRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::PressCountStreamData>::Create(channel_.get(), rpcmethod_PressCountStream_, context, request);
}

void Sensors::Stub::experimental_async::PressCountStream(::grpc::ClientContext* context, const ::sensors::PressRequest* request, ::grpc::experimental::ClientReadReactor< ::sensors::PressCountStreamData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::PressCountStreamData>::Create(stub_->channel_.get(), stub_->rpcmethod_PressCountStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::PressCountStreamData>* Sensors::Stub::AsyncPressCountStreamRaw(::grpc::ClientContext* context, const ::sensors::PressRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::PressCountStreamData>::Create(channel_.get(), cq, rpcmethod_PressCountStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::PressCountStreamData>* Sensors::Stub::PrepareAsyncPressCountStreamRaw(::grpc::ClientContext* context, const ::sensors::PressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::PressCountStreamData>::Create(channel_.get(), cq, rpcmethod_PressCountStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::UltrasonicDistances>* Sensors::Stub::UltrasonicStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::UltrasonicDistances>::Create(channel_.get(), rpcmethod_UltrasonicStream_, context, request);
}

void Sensors::Stub::experimental_async::UltrasonicStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::UltrasonicDistances>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::UltrasonicDistances>::Create(stub_->channel_.get(), stub_->rpcmethod_UltrasonicStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::UltrasonicDistances>* Sensors::Stub::AsyncUltrasonicStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::UltrasonicDistances>::Create(channel_.get(), cq, rpcmethod_UltrasonicStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::UltrasonicDistances>* Sensors::Stub::PrepareAsyncUltrasonicStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::UltrasonicDistances>::Create(channel_.get(), cq, rpcmethod_UltrasonicStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::UltrasonicCurve>* Sensors::Stub::RawUltrasonicStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::UltrasonicCurve>::Create(channel_.get(), rpcmethod_RawUltrasonicStream_, context, request);
}

void Sensors::Stub::experimental_async::RawUltrasonicStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::UltrasonicCurve>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::UltrasonicCurve>::Create(stub_->channel_.get(), stub_->rpcmethod_RawUltrasonicStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::UltrasonicCurve>* Sensors::Stub::AsyncRawUltrasonicStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::UltrasonicCurve>::Create(channel_.get(), cq, rpcmethod_RawUltrasonicStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::UltrasonicCurve>* Sensors::Stub::PrepareAsyncRawUltrasonicStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::UltrasonicCurve>::Create(channel_.get(), cq, rpcmethod_RawUltrasonicStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::RadarPoints>* Sensors::Stub::RadarStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::RadarPoints>::Create(channel_.get(), rpcmethod_RadarStream_, context, request);
}

void Sensors::Stub::experimental_async::RadarStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::RadarPoints>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::RadarPoints>::Create(stub_->channel_.get(), stub_->rpcmethod_RadarStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::RadarPoints>* Sensors::Stub::AsyncRadarStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::RadarPoints>::Create(channel_.get(), cq, rpcmethod_RadarStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::RadarPoints>* Sensors::Stub::PrepareAsyncRadarStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::RadarPoints>::Create(channel_.get(), cq, rpcmethod_RadarStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::RadarPoints>* Sensors::Stub::RawRadarStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::RadarPoints>::Create(channel_.get(), rpcmethod_RawRadarStream_, context, request);
}

void Sensors::Stub::experimental_async::RawRadarStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::RadarPoints>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::RadarPoints>::Create(stub_->channel_.get(), stub_->rpcmethod_RawRadarStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::RadarPoints>* Sensors::Stub::AsyncRawRadarStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::RadarPoints>::Create(channel_.get(), cq, rpcmethod_RawRadarStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::RadarPoints>* Sensors::Stub::PrepareAsyncRawRadarStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::RadarPoints>::Create(channel_.get(), cq, rpcmethod_RawRadarStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::ChairSpeed>* Sensors::Stub::ChairSpeedStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::ChairSpeed>::Create(channel_.get(), rpcmethod_ChairSpeedStream_, context, request);
}

void Sensors::Stub::experimental_async::ChairSpeedStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::ChairSpeed>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::ChairSpeed>::Create(stub_->channel_.get(), stub_->rpcmethod_ChairSpeedStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::ChairSpeed>* Sensors::Stub::AsyncChairSpeedStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ChairSpeed>::Create(channel_.get(), cq, rpcmethod_ChairSpeedStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::ChairSpeed>* Sensors::Stub::PrepareAsyncChairSpeedStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ChairSpeed>::Create(channel_.get(), cq, rpcmethod_ChairSpeedStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::ImuData>* Sensors::Stub::ImuStreamRaw(::grpc::ClientContext* context, const ::sensors::ImuCtrl& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::ImuData>::Create(channel_.get(), rpcmethod_ImuStream_, context, request);
}

void Sensors::Stub::experimental_async::ImuStream(::grpc::ClientContext* context, const ::sensors::ImuCtrl* request, ::grpc::experimental::ClientReadReactor< ::sensors::ImuData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::ImuData>::Create(stub_->channel_.get(), stub_->rpcmethod_ImuStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::ImuData>* Sensors::Stub::AsyncImuStreamRaw(::grpc::ClientContext* context, const ::sensors::ImuCtrl& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ImuData>::Create(channel_.get(), cq, rpcmethod_ImuStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::ImuData>* Sensors::Stub::PrepareAsyncImuStreamRaw(::grpc::ClientContext* context, const ::sensors::ImuCtrl& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ImuData>::Create(channel_.get(), cq, rpcmethod_ImuStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::ChairMode>* Sensors::Stub::ChairModeStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::ChairMode>::Create(channel_.get(), rpcmethod_ChairModeStream_, context, request);
}

void Sensors::Stub::experimental_async::ChairModeStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::ChairMode>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::ChairMode>::Create(stub_->channel_.get(), stub_->rpcmethod_ChairModeStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::ChairMode>* Sensors::Stub::AsyncChairModeStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ChairMode>::Create(channel_.get(), cq, rpcmethod_ChairModeStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::ChairMode>* Sensors::Stub::PrepareAsyncChairModeStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ChairMode>::Create(channel_.get(), cq, rpcmethod_ChairModeStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::ChairProfile>* Sensors::Stub::ChairProfileStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::ChairProfile>::Create(channel_.get(), rpcmethod_ChairProfileStream_, context, request);
}

void Sensors::Stub::experimental_async::ChairProfileStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::ChairProfile>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::ChairProfile>::Create(stub_->channel_.get(), stub_->rpcmethod_ChairProfileStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::ChairProfile>* Sensors::Stub::AsyncChairProfileStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ChairProfile>::Create(channel_.get(), cq, rpcmethod_ChairProfileStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::ChairProfile>* Sensors::Stub::PrepareAsyncChairProfileStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ChairProfile>::Create(channel_.get(), cq, rpcmethod_ChairProfileStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::SpeedSetting>* Sensors::Stub::SpeedSettingStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::SpeedSetting>::Create(channel_.get(), rpcmethod_SpeedSettingStream_, context, request);
}

void Sensors::Stub::experimental_async::SpeedSettingStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::SpeedSetting>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::SpeedSetting>::Create(stub_->channel_.get(), stub_->rpcmethod_SpeedSettingStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::SpeedSetting>* Sensors::Stub::AsyncSpeedSettingStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::SpeedSetting>::Create(channel_.get(), cq, rpcmethod_SpeedSettingStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::SpeedSetting>* Sensors::Stub::PrepareAsyncSpeedSettingStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::SpeedSetting>::Create(channel_.get(), cq, rpcmethod_SpeedSettingStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::Joystick>* Sensors::Stub::JoystickStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::Joystick>::Create(channel_.get(), rpcmethod_JoystickStream_, context, request);
}

void Sensors::Stub::experimental_async::JoystickStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::Joystick>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::Joystick>::Create(stub_->channel_.get(), stub_->rpcmethod_JoystickStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::Joystick>* Sensors::Stub::AsyncJoystickStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::Joystick>::Create(channel_.get(), cq, rpcmethod_JoystickStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::Joystick>* Sensors::Stub::PrepareAsyncJoystickStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::Joystick>::Create(channel_.get(), cq, rpcmethod_JoystickStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::JoystickData>* Sensors::Stub::VirtualJoystickStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::JoystickData>::Create(channel_.get(), rpcmethod_VirtualJoystickStream_, context, request);
}

void Sensors::Stub::experimental_async::VirtualJoystickStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::JoystickData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::JoystickData>::Create(stub_->channel_.get(), stub_->rpcmethod_VirtualJoystickStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::JoystickData>* Sensors::Stub::AsyncVirtualJoystickStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::JoystickData>::Create(channel_.get(), cq, rpcmethod_VirtualJoystickStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::JoystickData>* Sensors::Stub::PrepareAsyncVirtualJoystickStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::JoystickData>::Create(channel_.get(), cq, rpcmethod_VirtualJoystickStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::JoystickData>* Sensors::Stub::PhysicalJoystickStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::JoystickData>::Create(channel_.get(), rpcmethod_PhysicalJoystickStream_, context, request);
}

void Sensors::Stub::experimental_async::PhysicalJoystickStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::JoystickData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::JoystickData>::Create(stub_->channel_.get(), stub_->rpcmethod_PhysicalJoystickStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::JoystickData>* Sensors::Stub::AsyncPhysicalJoystickStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::JoystickData>::Create(channel_.get(), cq, rpcmethod_PhysicalJoystickStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::JoystickData>* Sensors::Stub::PrepareAsyncPhysicalJoystickStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::JoystickData>::Create(channel_.get(), cq, rpcmethod_PhysicalJoystickStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::JoystickData>* Sensors::Stub::ScaledJoystickStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::JoystickData>::Create(channel_.get(), rpcmethod_ScaledJoystickStream_, context, request);
}

void Sensors::Stub::experimental_async::ScaledJoystickStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::JoystickData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::JoystickData>::Create(stub_->channel_.get(), stub_->rpcmethod_ScaledJoystickStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::JoystickData>* Sensors::Stub::AsyncScaledJoystickStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::JoystickData>::Create(channel_.get(), cq, rpcmethod_ScaledJoystickStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::JoystickData>* Sensors::Stub::PrepareAsyncScaledJoystickStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::JoystickData>::Create(channel_.get(), cq, rpcmethod_ScaledJoystickStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::JoystickData>* Sensors::Stub::LuciJoystickStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::JoystickData>::Create(channel_.get(), rpcmethod_LuciJoystickStream_, context, request);
}

void Sensors::Stub::experimental_async::LuciJoystickStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::JoystickData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::JoystickData>::Create(stub_->channel_.get(), stub_->rpcmethod_LuciJoystickStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::JoystickData>* Sensors::Stub::AsyncLuciJoystickStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::JoystickData>::Create(channel_.get(), cq, rpcmethod_LuciJoystickStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::JoystickData>* Sensors::Stub::PrepareAsyncLuciJoystickStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::JoystickData>::Create(channel_.get(), cq, rpcmethod_LuciJoystickStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::AhrsData>* Sensors::Stub::AhrsStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::AhrsData>::Create(channel_.get(), rpcmethod_AhrsStream_, context, request);
}

void Sensors::Stub::experimental_async::AhrsStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::AhrsData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::AhrsData>::Create(stub_->channel_.get(), stub_->rpcmethod_AhrsStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::AhrsData>* Sensors::Stub::AsyncAhrsStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::AhrsData>::Create(channel_.get(), cq, rpcmethod_AhrsStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::AhrsData>* Sensors::Stub::PrepareAsyncAhrsStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::AhrsData>::Create(channel_.get(), cq, rpcmethod_AhrsStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::ClosestObstacles>* Sensors::Stub::RadarClosestObstaclesStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::ClosestObstacles>::Create(channel_.get(), rpcmethod_RadarClosestObstaclesStream_, context, request);
}

void Sensors::Stub::experimental_async::RadarClosestObstaclesStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::ClosestObstacles>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::ClosestObstacles>::Create(stub_->channel_.get(), stub_->rpcmethod_RadarClosestObstaclesStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::ClosestObstacles>* Sensors::Stub::AsyncRadarClosestObstaclesStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ClosestObstacles>::Create(channel_.get(), cq, rpcmethod_RadarClosestObstaclesStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::ClosestObstacles>* Sensors::Stub::PrepareAsyncRadarClosestObstaclesStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ClosestObstacles>::Create(channel_.get(), cq, rpcmethod_RadarClosestObstaclesStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::ClosestObstacles>* Sensors::Stub::UltrasonicClosestObstaclesStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::ClosestObstacles>::Create(channel_.get(), rpcmethod_UltrasonicClosestObstaclesStream_, context, request);
}

void Sensors::Stub::experimental_async::UltrasonicClosestObstaclesStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::ClosestObstacles>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::ClosestObstacles>::Create(stub_->channel_.get(), stub_->rpcmethod_UltrasonicClosestObstaclesStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::ClosestObstacles>* Sensors::Stub::AsyncUltrasonicClosestObstaclesStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ClosestObstacles>::Create(channel_.get(), cq, rpcmethod_UltrasonicClosestObstaclesStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::ClosestObstacles>* Sensors::Stub::PrepareAsyncUltrasonicClosestObstaclesStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ClosestObstacles>::Create(channel_.get(), cq, rpcmethod_UltrasonicClosestObstaclesStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::ClosestObstacles>* Sensors::Stub::CameraCollisionClosestObstaclesStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::ClosestObstacles>::Create(channel_.get(), rpcmethod_CameraCollisionClosestObstaclesStream_, context, request);
}

void Sensors::Stub::experimental_async::CameraCollisionClosestObstaclesStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::ClosestObstacles>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::ClosestObstacles>::Create(stub_->channel_.get(), stub_->rpcmethod_CameraCollisionClosestObstaclesStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::ClosestObstacles>* Sensors::Stub::AsyncCameraCollisionClosestObstaclesStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ClosestObstacles>::Create(channel_.get(), cq, rpcmethod_CameraCollisionClosestObstaclesStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::ClosestObstacles>* Sensors::Stub::PrepareAsyncCameraCollisionClosestObstaclesStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ClosestObstacles>::Create(channel_.get(), cq, rpcmethod_CameraCollisionClosestObstaclesStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::ClosestObstacles>* Sensors::Stub::StepClosestObstaclesStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::ClosestObstacles>::Create(channel_.get(), rpcmethod_StepClosestObstaclesStream_, context, request);
}

void Sensors::Stub::experimental_async::StepClosestObstaclesStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::ClosestObstacles>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::ClosestObstacles>::Create(stub_->channel_.get(), stub_->rpcmethod_StepClosestObstaclesStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::ClosestObstacles>* Sensors::Stub::AsyncStepClosestObstaclesStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ClosestObstacles>::Create(channel_.get(), cq, rpcmethod_StepClosestObstaclesStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::ClosestObstacles>* Sensors::Stub::PrepareAsyncStepClosestObstaclesStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ClosestObstacles>::Create(channel_.get(), cq, rpcmethod_StepClosestObstaclesStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::ClosestObstacles>* Sensors::Stub::DropoffClosestObstaclesStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::ClosestObstacles>::Create(channel_.get(), rpcmethod_DropoffClosestObstaclesStream_, context, request);
}

void Sensors::Stub::experimental_async::DropoffClosestObstaclesStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::ClosestObstacles>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::ClosestObstacles>::Create(stub_->channel_.get(), stub_->rpcmethod_DropoffClosestObstaclesStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::ClosestObstacles>* Sensors::Stub::AsyncDropoffClosestObstaclesStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ClosestObstacles>::Create(channel_.get(), cq, rpcmethod_DropoffClosestObstaclesStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::ClosestObstacles>* Sensors::Stub::PrepareAsyncDropoffClosestObstaclesStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ClosestObstacles>::Create(channel_.get(), cq, rpcmethod_DropoffClosestObstaclesStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::NavigationScaling>* Sensors::Stub::ScalingStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::NavigationScaling>::Create(channel_.get(), rpcmethod_ScalingStream_, context, request);
}

void Sensors::Stub::experimental_async::ScalingStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::NavigationScaling>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::NavigationScaling>::Create(stub_->channel_.get(), stub_->rpcmethod_ScalingStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::NavigationScaling>* Sensors::Stub::AsyncScalingStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::NavigationScaling>::Create(channel_.get(), cq, rpcmethod_ScalingStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::NavigationScaling>* Sensors::Stub::PrepareAsyncScalingStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::NavigationScaling>::Create(channel_.get(), cq, rpcmethod_ScalingStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::BatteryVoltage>* Sensors::Stub::BatteryVoltageStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::BatteryVoltage>::Create(channel_.get(), rpcmethod_BatteryVoltageStream_, context, request);
}

void Sensors::Stub::experimental_async::BatteryVoltageStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::BatteryVoltage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::BatteryVoltage>::Create(stub_->channel_.get(), stub_->rpcmethod_BatteryVoltageStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::BatteryVoltage>* Sensors::Stub::AsyncBatteryVoltageStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::BatteryVoltage>::Create(channel_.get(), cq, rpcmethod_BatteryVoltageStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::BatteryVoltage>* Sensors::Stub::PrepareAsyncBatteryVoltageStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::BatteryVoltage>::Create(channel_.get(), cq, rpcmethod_BatteryVoltageStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::BatteryPercent>* Sensors::Stub::BatteryPercentStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::BatteryPercent>::Create(channel_.get(), rpcmethod_BatteryPercentStream_, context, request);
}

void Sensors::Stub::experimental_async::BatteryPercentStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::BatteryPercent>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::BatteryPercent>::Create(stub_->channel_.get(), stub_->rpcmethod_BatteryPercentStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::BatteryPercent>* Sensors::Stub::AsyncBatteryPercentStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::BatteryPercent>::Create(channel_.get(), cq, rpcmethod_BatteryPercentStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::BatteryPercent>* Sensors::Stub::PrepareAsyncBatteryPercentStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::BatteryPercent>::Create(channel_.get(), cq, rpcmethod_BatteryPercentStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::CameraPoints>* Sensors::Stub::CameraStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::CameraPoints>::Create(channel_.get(), rpcmethod_CameraStream_, context, request);
}

void Sensors::Stub::experimental_async::CameraStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::CameraPoints>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::CameraPoints>::Create(stub_->channel_.get(), stub_->rpcmethod_CameraStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::CameraPoints>* Sensors::Stub::AsyncCameraStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::CameraPoints>::Create(channel_.get(), cq, rpcmethod_CameraStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::CameraPoints>* Sensors::Stub::PrepareAsyncCameraStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::CameraPoints>::Create(channel_.get(), cq, rpcmethod_CameraStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::CameraPoints2D>* Sensors::Stub::FlatCameraStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::CameraPoints2D>::Create(channel_.get(), rpcmethod_FlatCameraStream_, context, request);
}

void Sensors::Stub::experimental_async::FlatCameraStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::CameraPoints2D>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::CameraPoints2D>::Create(stub_->channel_.get(), stub_->rpcmethod_FlatCameraStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::CameraPoints2D>* Sensors::Stub::AsyncFlatCameraStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::CameraPoints2D>::Create(channel_.get(), cq, rpcmethod_FlatCameraStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::CameraPoints2D>* Sensors::Stub::PrepareAsyncFlatCameraStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::CameraPoints2D>::Create(channel_.get(), cq, rpcmethod_FlatCameraStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::CameraPoints>* Sensors::Stub::DropoffCameraStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::CameraPoints>::Create(channel_.get(), rpcmethod_DropoffCameraStream_, context, request);
}

void Sensors::Stub::experimental_async::DropoffCameraStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::CameraPoints>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::CameraPoints>::Create(stub_->channel_.get(), stub_->rpcmethod_DropoffCameraStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::CameraPoints>* Sensors::Stub::AsyncDropoffCameraStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::CameraPoints>::Create(channel_.get(), cq, rpcmethod_DropoffCameraStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::CameraPoints>* Sensors::Stub::PrepareAsyncDropoffCameraStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::CameraPoints>::Create(channel_.get(), cq, rpcmethod_DropoffCameraStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::ObjectDetection2D>* Sensors::Stub::CaneCameraStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::ObjectDetection2D>::Create(channel_.get(), rpcmethod_CaneCameraStream_, context, request);
}

void Sensors::Stub::experimental_async::CaneCameraStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::ObjectDetection2D>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::ObjectDetection2D>::Create(stub_->channel_.get(), stub_->rpcmethod_CaneCameraStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::ObjectDetection2D>* Sensors::Stub::AsyncCaneCameraStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ObjectDetection2D>::Create(channel_.get(), cq, rpcmethod_CaneCameraStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::ObjectDetection2D>* Sensors::Stub::PrepareAsyncCaneCameraStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ObjectDetection2D>::Create(channel_.get(), cq, rpcmethod_CaneCameraStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::GPSData>* Sensors::Stub::GPSStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::GPSData>::Create(channel_.get(), rpcmethod_GPSStream_, context, request);
}

void Sensors::Stub::experimental_async::GPSStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::GPSData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::GPSData>::Create(stub_->channel_.get(), stub_->rpcmethod_GPSStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::GPSData>* Sensors::Stub::AsyncGPSStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::GPSData>::Create(channel_.get(), cq, rpcmethod_GPSStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::GPSData>* Sensors::Stub::PrepareAsyncGPSStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::GPSData>::Create(channel_.get(), cq, rpcmethod_GPSStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::SeatPressure>* Sensors::Stub::SeatPressureStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::SeatPressure>::Create(channel_.get(), rpcmethod_SeatPressureStream_, context, request);
}

void Sensors::Stub::experimental_async::SeatPressureStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::SeatPressure>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::SeatPressure>::Create(stub_->channel_.get(), stub_->rpcmethod_SeatPressureStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::SeatPressure>* Sensors::Stub::AsyncSeatPressureStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::SeatPressure>::Create(channel_.get(), cq, rpcmethod_SeatPressureStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::SeatPressure>* Sensors::Stub::PrepareAsyncSeatPressureStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::SeatPressure>::Create(channel_.get(), cq, rpcmethod_SeatPressureStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::DFParameters>* Sensors::Stub::DFParametersChangedStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::DFParameters>::Create(channel_.get(), rpcmethod_DFParametersChangedStream_, context, request);
}

void Sensors::Stub::experimental_async::DFParametersChangedStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::DFParameters>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::DFParameters>::Create(stub_->channel_.get(), stub_->rpcmethod_DFParametersChangedStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::DFParameters>* Sensors::Stub::AsyncDFParametersChangedStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::DFParameters>::Create(channel_.get(), cq, rpcmethod_DFParametersChangedStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::DFParameters>* Sensors::Stub::PrepareAsyncDFParametersChangedStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::DFParameters>::Create(channel_.get(), cq, rpcmethod_DFParametersChangedStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::DFSeatEvent>* Sensors::Stub::DFEventStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::DFSeatEvent>::Create(channel_.get(), rpcmethod_DFEventStream_, context, request);
}

void Sensors::Stub::experimental_async::DFEventStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::DFSeatEvent>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::DFSeatEvent>::Create(stub_->channel_.get(), stub_->rpcmethod_DFEventStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::DFSeatEvent>* Sensors::Stub::AsyncDFEventStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::DFSeatEvent>::Create(channel_.get(), cq, rpcmethod_DFEventStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::DFSeatEvent>* Sensors::Stub::PrepareAsyncDFEventStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::DFSeatEvent>::Create(channel_.get(), cq, rpcmethod_DFEventStream_, context, request, false, nullptr);
}

::grpc::Status Sensors::Stub::SendLogging(::grpc::ClientContext* context, const ::sensors::LoggingData& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensors::LoggingData, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendLogging_, context, request, response);
}

void Sensors::Stub::experimental_async::SendLogging(::grpc::ClientContext* context, const ::sensors::LoggingData* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensors::LoggingData, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendLogging_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::SendLogging(::grpc::ClientContext* context, const ::sensors::LoggingData* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendLogging_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncSendLoggingRaw(::grpc::ClientContext* context, const ::sensors::LoggingData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::sensors::LoggingData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendLogging_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncSendLoggingRaw(::grpc::ClientContext* context, const ::sensors::LoggingData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendLoggingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::sensors::LoggingData>* Sensors::Stub::LoggingStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::LoggingData>::Create(channel_.get(), rpcmethod_LoggingStream_, context, request);
}

void Sensors::Stub::experimental_async::LoggingStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::LoggingData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::LoggingData>::Create(stub_->channel_.get(), stub_->rpcmethod_LoggingStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::LoggingData>* Sensors::Stub::AsyncLoggingStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::LoggingData>::Create(channel_.get(), cq, rpcmethod_LoggingStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::LoggingData>* Sensors::Stub::PrepareAsyncLoggingStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::LoggingData>::Create(channel_.get(), cq, rpcmethod_LoggingStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::CameraPoints>* Sensors::Stub::StepCameraStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::CameraPoints>::Create(channel_.get(), rpcmethod_StepCameraStream_, context, request);
}

void Sensors::Stub::experimental_async::StepCameraStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::CameraPoints>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::CameraPoints>::Create(stub_->channel_.get(), stub_->rpcmethod_StepCameraStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::CameraPoints>* Sensors::Stub::AsyncStepCameraStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::CameraPoints>::Create(channel_.get(), cq, rpcmethod_StepCameraStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::CameraPoints>* Sensors::Stub::PrepareAsyncStepCameraStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::CameraPoints>::Create(channel_.get(), cq, rpcmethod_StepCameraStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::IrFrame>* Sensors::Stub::IrStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::IrFrame>::Create(channel_.get(), rpcmethod_IrStream_, context, request);
}

void Sensors::Stub::experimental_async::IrStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::IrFrame>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::IrFrame>::Create(stub_->channel_.get(), stub_->rpcmethod_IrStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::IrFrame>* Sensors::Stub::AsyncIrStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::IrFrame>::Create(channel_.get(), cq, rpcmethod_IrStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::IrFrame>* Sensors::Stub::PrepareAsyncIrStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::IrFrame>::Create(channel_.get(), cq, rpcmethod_IrStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::RampAssistStates>* Sensors::Stub::RampAssistStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::RampAssistStates>::Create(channel_.get(), rpcmethod_RampAssistStream_, context, request);
}

void Sensors::Stub::experimental_async::RampAssistStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::RampAssistStates>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::RampAssistStates>::Create(stub_->channel_.get(), stub_->rpcmethod_RampAssistStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::RampAssistStates>* Sensors::Stub::AsyncRampAssistStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::RampAssistStates>::Create(channel_.get(), cq, rpcmethod_RampAssistStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::RampAssistStates>* Sensors::Stub::PrepareAsyncRampAssistStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::RampAssistStates>::Create(channel_.get(), cq, rpcmethod_RampAssistStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::DistanceData>* Sensors::Stub::DistStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::DistanceData>::Create(channel_.get(), rpcmethod_DistStream_, context, request);
}

void Sensors::Stub::experimental_async::DistStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::DistanceData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::DistanceData>::Create(stub_->channel_.get(), stub_->rpcmethod_DistStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::DistanceData>* Sensors::Stub::AsyncDistStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::DistanceData>::Create(channel_.get(), cq, rpcmethod_DistStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::DistanceData>* Sensors::Stub::PrepareAsyncDistStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::DistanceData>::Create(channel_.get(), cq, rpcmethod_DistStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::StartModeData>* Sensors::Stub::StartModeStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::StartModeData>::Create(channel_.get(), rpcmethod_StartModeStream_, context, request);
}

void Sensors::Stub::experimental_async::StartModeStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::StartModeData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::StartModeData>::Create(stub_->channel_.get(), stub_->rpcmethod_StartModeStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::StartModeData>* Sensors::Stub::AsyncStartModeStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::StartModeData>::Create(channel_.get(), cq, rpcmethod_StartModeStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::StartModeData>* Sensors::Stub::PrepareAsyncStartModeStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::StartModeData>::Create(channel_.get(), cq, rpcmethod_StartModeStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::AudioPlaybackRequest>* Sensors::Stub::AudioPlaybackRequestStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::AudioPlaybackRequest>::Create(channel_.get(), rpcmethod_AudioPlaybackRequestStream_, context, request);
}

void Sensors::Stub::experimental_async::AudioPlaybackRequestStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::AudioPlaybackRequest>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::AudioPlaybackRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_AudioPlaybackRequestStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::AudioPlaybackRequest>* Sensors::Stub::AsyncAudioPlaybackRequestStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::AudioPlaybackRequest>::Create(channel_.get(), cq, rpcmethod_AudioPlaybackRequestStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::AudioPlaybackRequest>* Sensors::Stub::PrepareAsyncAudioPlaybackRequestStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::AudioPlaybackRequest>::Create(channel_.get(), cq, rpcmethod_AudioPlaybackRequestStream_, context, request, false, nullptr);
}

::grpc::Status Sensors::Stub::GetZoneBoundaries(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sensors::ZoneBoundaries* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sensors::ZoneBoundaries, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetZoneBoundaries_, context, request, response);
}

void Sensors::Stub::experimental_async::GetZoneBoundaries(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::ZoneBoundaries* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sensors::ZoneBoundaries, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetZoneBoundaries_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::GetZoneBoundaries(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::ZoneBoundaries* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetZoneBoundaries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::ZoneBoundaries>* Sensors::Stub::PrepareAsyncGetZoneBoundariesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::ZoneBoundaries, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetZoneBoundaries_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::ZoneBoundaries>* Sensors::Stub::AsyncGetZoneBoundariesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetZoneBoundariesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::GetBlockedZones(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sensors::BlockedZones* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sensors::BlockedZones, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockedZones_, context, request, response);
}

void Sensors::Stub::experimental_async::GetBlockedZones(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::BlockedZones* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sensors::BlockedZones, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockedZones_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::GetBlockedZones(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::BlockedZones* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockedZones_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::BlockedZones>* Sensors::Stub::PrepareAsyncGetBlockedZonesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::BlockedZones, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockedZones_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::BlockedZones>* Sensors::Stub::AsyncGetBlockedZonesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockedZonesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::GetJoystickRanges(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sensors::JoystickRanges* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sensors::JoystickRanges, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetJoystickRanges_, context, request, response);
}

void Sensors::Stub::experimental_async::GetJoystickRanges(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::JoystickRanges* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sensors::JoystickRanges, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJoystickRanges_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::GetJoystickRanges(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::JoystickRanges* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJoystickRanges_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::JoystickRanges>* Sensors::Stub::PrepareAsyncGetJoystickRangesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::JoystickRanges, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetJoystickRanges_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::JoystickRanges>* Sensors::Stub::AsyncGetJoystickRangesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetJoystickRangesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::EnableRadarFilter(::grpc::ClientContext* context, const ::sensors::RadarFilter& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensors::RadarFilter, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EnableRadarFilter_, context, request, response);
}

void Sensors::Stub::experimental_async::EnableRadarFilter(::grpc::ClientContext* context, const ::sensors::RadarFilter* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensors::RadarFilter, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnableRadarFilter_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::EnableRadarFilter(::grpc::ClientContext* context, const ::sensors::RadarFilter* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnableRadarFilter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncEnableRadarFilterRaw(::grpc::ClientContext* context, const ::sensors::RadarFilter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::sensors::RadarFilter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EnableRadarFilter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncEnableRadarFilterRaw(::grpc::ClientContext* context, const ::sensors::RadarFilter& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnableRadarFilterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::DisableRadarFilter(::grpc::ClientContext* context, const ::sensors::RadarFilter& request, ::sensors::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sensors::RadarFilter, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DisableRadarFilter_, context, request, response);
}

void Sensors::Stub::experimental_async::DisableRadarFilter(::grpc::ClientContext* context, const ::sensors::RadarFilter* request, ::sensors::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sensors::RadarFilter, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableRadarFilter_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::DisableRadarFilter(::grpc::ClientContext* context, const ::sensors::RadarFilter* request, ::sensors::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisableRadarFilter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::PrepareAsyncDisableRadarFilterRaw(::grpc::ClientContext* context, const ::sensors::RadarFilter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::Response, ::sensors::RadarFilter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DisableRadarFilter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::Response>* Sensors::Stub::AsyncDisableRadarFilterRaw(::grpc::ClientContext* context, const ::sensors::RadarFilter& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableRadarFilterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::sensors::EncoderData>* Sensors::Stub::EncoderStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::EncoderData>::Create(channel_.get(), rpcmethod_EncoderStream_, context, request);
}

void Sensors::Stub::experimental_async::EncoderStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::EncoderData>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::EncoderData>::Create(stub_->channel_.get(), stub_->rpcmethod_EncoderStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::EncoderData>* Sensors::Stub::AsyncEncoderStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::EncoderData>::Create(channel_.get(), cq, rpcmethod_EncoderStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::EncoderData>* Sensors::Stub::PrepareAsyncEncoderStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::EncoderData>::Create(channel_.get(), cq, rpcmethod_EncoderStream_, context, request, false, nullptr);
}

::grpc::Status Sensors::Stub::GetCalMatrix(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sensors::CalMatrix* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sensors::CalMatrix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCalMatrix_, context, request, response);
}

void Sensors::Stub::experimental_async::GetCalMatrix(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::CalMatrix* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sensors::CalMatrix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCalMatrix_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::GetCalMatrix(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::CalMatrix* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCalMatrix_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::CalMatrix>* Sensors::Stub::PrepareAsyncGetCalMatrixRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::CalMatrix, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCalMatrix_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::CalMatrix>* Sensors::Stub::AsyncGetCalMatrixRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCalMatrixRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Sensors::Stub::TestReaction(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sensors::ReactionTestResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sensors::ReactionTestResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TestReaction_, context, request, response);
}

void Sensors::Stub::experimental_async::TestReaction(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::ReactionTestResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sensors::ReactionTestResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestReaction_, context, request, response, std::move(f));
}

void Sensors::Stub::experimental_async::TestReaction(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sensors::ReactionTestResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestReaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sensors::ReactionTestResult>* Sensors::Stub::PrepareAsyncTestReactionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sensors::ReactionTestResult, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TestReaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sensors::ReactionTestResult>* Sensors::Stub::AsyncTestReactionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTestReactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::sensors::LuciOverride>* Sensors::Stub::LuciOverrideStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::LuciOverride>::Create(channel_.get(), rpcmethod_LuciOverrideStream_, context, request);
}

void Sensors::Stub::experimental_async::LuciOverrideStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::LuciOverride>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::LuciOverride>::Create(stub_->channel_.get(), stub_->rpcmethod_LuciOverrideStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::LuciOverride>* Sensors::Stub::AsyncLuciOverrideStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::LuciOverride>::Create(channel_.get(), cq, rpcmethod_LuciOverrideStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::LuciOverride>* Sensors::Stub::PrepareAsyncLuciOverrideStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::LuciOverride>::Create(channel_.get(), cq, rpcmethod_LuciOverrideStream_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::sensors::LuciLandmark>* Sensors::Stub::LuciLandmarkStreamPassThroughRaw(::grpc::ClientContext* context, ::sensors::Response* response) {
  return ::grpc::internal::ClientWriterFactory< ::sensors::LuciLandmark>::Create(channel_.get(), rpcmethod_LuciLandmarkStreamPassThrough_, context, response);
}

void Sensors::Stub::experimental_async::LuciLandmarkStreamPassThrough(::grpc::ClientContext* context, ::sensors::Response* response, ::grpc::experimental::ClientWriteReactor< ::sensors::LuciLandmark>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::sensors::LuciLandmark>::Create(stub_->channel_.get(), stub_->rpcmethod_LuciLandmarkStreamPassThrough_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::sensors::LuciLandmark>* Sensors::Stub::AsyncLuciLandmarkStreamPassThroughRaw(::grpc::ClientContext* context, ::sensors::Response* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::sensors::LuciLandmark>::Create(channel_.get(), cq, rpcmethod_LuciLandmarkStreamPassThrough_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::sensors::LuciLandmark>* Sensors::Stub::PrepareAsyncLuciLandmarkStreamPassThroughRaw(::grpc::ClientContext* context, ::sensors::Response* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::sensors::LuciLandmark>::Create(channel_.get(), cq, rpcmethod_LuciLandmarkStreamPassThrough_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::sensors::RampInfo>* Sensors::Stub::RampInfoStreamPassThroughRaw(::grpc::ClientContext* context, ::sensors::Response* response) {
  return ::grpc::internal::ClientWriterFactory< ::sensors::RampInfo>::Create(channel_.get(), rpcmethod_RampInfoStreamPassThrough_, context, response);
}

void Sensors::Stub::experimental_async::RampInfoStreamPassThrough(::grpc::ClientContext* context, ::sensors::Response* response, ::grpc::experimental::ClientWriteReactor< ::sensors::RampInfo>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::sensors::RampInfo>::Create(stub_->channel_.get(), stub_->rpcmethod_RampInfoStreamPassThrough_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::sensors::RampInfo>* Sensors::Stub::AsyncRampInfoStreamPassThroughRaw(::grpc::ClientContext* context, ::sensors::Response* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::sensors::RampInfo>::Create(channel_.get(), cq, rpcmethod_RampInfoStreamPassThrough_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::sensors::RampInfo>* Sensors::Stub::PrepareAsyncRampInfoStreamPassThroughRaw(::grpc::ClientContext* context, ::sensors::Response* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::sensors::RampInfo>::Create(channel_.get(), cq, rpcmethod_RampInfoStreamPassThrough_, context, response, false, nullptr);
}

::grpc::ClientReader< ::sensors::LuciLandmark>* Sensors::Stub::LuciLandmarkStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::LuciLandmark>::Create(channel_.get(), rpcmethod_LuciLandmarkStream_, context, request);
}

void Sensors::Stub::experimental_async::LuciLandmarkStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::LuciLandmark>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::LuciLandmark>::Create(stub_->channel_.get(), stub_->rpcmethod_LuciLandmarkStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::LuciLandmark>* Sensors::Stub::AsyncLuciLandmarkStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::LuciLandmark>::Create(channel_.get(), cq, rpcmethod_LuciLandmarkStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::LuciLandmark>* Sensors::Stub::PrepareAsyncLuciLandmarkStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::LuciLandmark>::Create(channel_.get(), cq, rpcmethod_LuciLandmarkStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::RampInfo>* Sensors::Stub::RampInfoStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::RampInfo>::Create(channel_.get(), rpcmethod_RampInfoStream_, context, request);
}

void Sensors::Stub::experimental_async::RampInfoStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::RampInfo>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::RampInfo>::Create(stub_->channel_.get(), stub_->rpcmethod_RampInfoStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::RampInfo>* Sensors::Stub::AsyncRampInfoStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::RampInfo>::Create(channel_.get(), cq, rpcmethod_RampInfoStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::RampInfo>* Sensors::Stub::PrepareAsyncRampInfoStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::RampInfo>::Create(channel_.get(), cq, rpcmethod_RampInfoStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sensors::ModeCtrl>* Sensors::Stub::DriveModeStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::sensors::ModeCtrl>::Create(channel_.get(), rpcmethod_DriveModeStream_, context, request);
}

void Sensors::Stub::experimental_async::DriveModeStream(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::experimental::ClientReadReactor< ::sensors::ModeCtrl>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sensors::ModeCtrl>::Create(stub_->channel_.get(), stub_->rpcmethod_DriveModeStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sensors::ModeCtrl>* Sensors::Stub::AsyncDriveModeStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ModeCtrl>::Create(channel_.get(), cq, rpcmethod_DriveModeStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sensors::ModeCtrl>* Sensors::Stub::PrepareAsyncDriveModeStreamRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sensors::ModeCtrl>::Create(channel_.get(), cq, rpcmethod_DriveModeStream_, context, request, false, nullptr);
}

Sensors::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::sensors::Led, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::Led* req,
             ::sensors::Response* resp) {
               return service->TurnOnLed(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::sensors::Led, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::Led* req,
             ::sensors::Response* resp) {
               return service->TurnOffLed(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::sensors::HmiState, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::HmiState* req,
             ::sensors::Response* resp) {
               return service->ActivateHmiState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::sensors::HmiState, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::HmiState* req,
             ::sensors::Response* resp) {
               return service->DeactivateHmiState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::sensors::NavigationScaling, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::NavigationScaling* req,
             ::sensors::Response* resp) {
               return service->SetNavigationScaling(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::sensors::UltrasonicCtrl, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::UltrasonicCtrl* req,
             ::sensors::Response* resp) {
               return service->TurnOnUltrasonic(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::sensors::UltrasonicCtrl, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::UltrasonicCtrl* req,
             ::sensors::Response* resp) {
               return service->TurnOffUltrasonic(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::sensors::RadarCtrl, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::RadarCtrl* req,
             ::sensors::Response* resp) {
               return service->TurnOnRadar(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::sensors::RadarCtrl, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::RadarCtrl* req,
             ::sensors::Response* resp) {
               return service->TurnOffRadar(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sensors::Response* resp) {
               return service->CollectImuCalibration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sensors::Response* resp) {
               return service->DFGetCurrentParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sensors::Response* resp) {
               return service->DFGetBufferedEvents(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sensors::Response* resp) {
               return service->DisableLuci(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::sensors::RemoteJsValues, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::RemoteJsValues* req,
             ::sensors::Response* resp) {
               return service->JsOverride(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::sensors::ModeCtrl, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::ModeCtrl* req,
             ::sensors::Response* resp) {
               return service->SetDriveMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::sensors::RampMode, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::RampMode* req,
             ::sensors::Response* resp) {
               return service->SetRampMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::sensors::LuciOverride, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::LuciOverride* req,
             ::sensors::Response* resp) {
               return service->SetLuciOverride(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::sensors::PressCountStreamData, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::PressCountStreamData* req,
             ::sensors::Response* resp) {
               return service->ExtPressCount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[18],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::HmiStreamData>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::HmiStreamData>* writer) {
               return service->HmiStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[19],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::sensors::PressRequest, ::sensors::PressCountStreamData>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::PressRequest* req,
             ::grpc::ServerWriter<::sensors::PressCountStreamData>* writer) {
               return service->PressCountStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[20],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::UltrasonicDistances>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::UltrasonicDistances>* writer) {
               return service->UltrasonicStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[21],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::UltrasonicCurve>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::UltrasonicCurve>* writer) {
               return service->RawUltrasonicStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[22],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::RadarPoints>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::RadarPoints>* writer) {
               return service->RadarStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[23],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::RadarPoints>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::RadarPoints>* writer) {
               return service->RawRadarStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[24],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::ChairSpeed>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::ChairSpeed>* writer) {
               return service->ChairSpeedStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[25],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::sensors::ImuCtrl, ::sensors::ImuData>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::ImuCtrl* req,
             ::grpc::ServerWriter<::sensors::ImuData>* writer) {
               return service->ImuStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[26],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::ChairMode>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::ChairMode>* writer) {
               return service->ChairModeStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[27],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::ChairProfile>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::ChairProfile>* writer) {
               return service->ChairProfileStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[28],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::SpeedSetting>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::SpeedSetting>* writer) {
               return service->SpeedSettingStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[29],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::Joystick>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::Joystick>* writer) {
               return service->JoystickStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[30],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::JoystickData>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::JoystickData>* writer) {
               return service->VirtualJoystickStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[31],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::JoystickData>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::JoystickData>* writer) {
               return service->PhysicalJoystickStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[32],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::JoystickData>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::JoystickData>* writer) {
               return service->ScaledJoystickStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[33],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::JoystickData>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::JoystickData>* writer) {
               return service->LuciJoystickStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[34],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::AhrsData>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::AhrsData>* writer) {
               return service->AhrsStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[35],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::ClosestObstacles>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::ClosestObstacles>* writer) {
               return service->RadarClosestObstaclesStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[36],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::ClosestObstacles>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::ClosestObstacles>* writer) {
               return service->UltrasonicClosestObstaclesStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[37],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::ClosestObstacles>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::ClosestObstacles>* writer) {
               return service->CameraCollisionClosestObstaclesStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[38],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::ClosestObstacles>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::ClosestObstacles>* writer) {
               return service->StepClosestObstaclesStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[39],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::ClosestObstacles>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::ClosestObstacles>* writer) {
               return service->DropoffClosestObstaclesStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[40],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::NavigationScaling>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::NavigationScaling>* writer) {
               return service->ScalingStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[41],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::BatteryVoltage>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::BatteryVoltage>* writer) {
               return service->BatteryVoltageStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[42],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::BatteryPercent>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::BatteryPercent>* writer) {
               return service->BatteryPercentStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[43],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::CameraPoints>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::CameraPoints>* writer) {
               return service->CameraStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[44],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::CameraPoints2D>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::CameraPoints2D>* writer) {
               return service->FlatCameraStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[45],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::CameraPoints>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::CameraPoints>* writer) {
               return service->DropoffCameraStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[46],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::ObjectDetection2D>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::ObjectDetection2D>* writer) {
               return service->CaneCameraStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[47],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::GPSData>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::GPSData>* writer) {
               return service->GPSStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[48],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::SeatPressure>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::SeatPressure>* writer) {
               return service->SeatPressureStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[49],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::DFParameters>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::DFParameters>* writer) {
               return service->DFParametersChangedStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[50],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::DFSeatEvent>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::DFSeatEvent>* writer) {
               return service->DFEventStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::sensors::LoggingData, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::LoggingData* req,
             ::sensors::Response* resp) {
               return service->SendLogging(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[52],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::LoggingData>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::LoggingData>* writer) {
               return service->LoggingStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[53],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::CameraPoints>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::CameraPoints>* writer) {
               return service->StepCameraStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[54],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::IrFrame>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::IrFrame>* writer) {
               return service->IrStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[55],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::RampAssistStates>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::RampAssistStates>* writer) {
               return service->RampAssistStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[56],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::DistanceData>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::DistanceData>* writer) {
               return service->DistStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[57],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::StartModeData>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::StartModeData>* writer) {
               return service->StartModeStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[58],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::AudioPlaybackRequest>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::AudioPlaybackRequest>* writer) {
               return service->AudioPlaybackRequestStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[59],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::ZoneBoundaries, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sensors::ZoneBoundaries* resp) {
               return service->GetZoneBoundaries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[60],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::BlockedZones, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sensors::BlockedZones* resp) {
               return service->GetBlockedZones(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[61],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::JoystickRanges, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sensors::JoystickRanges* resp) {
               return service->GetJoystickRanges(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[62],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::sensors::RadarFilter, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::RadarFilter* req,
             ::sensors::Response* resp) {
               return service->EnableRadarFilter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[63],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::sensors::RadarFilter, ::sensors::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sensors::RadarFilter* req,
             ::sensors::Response* resp) {
               return service->DisableRadarFilter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[64],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::EncoderData>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::EncoderData>* writer) {
               return service->EncoderStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[65],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::CalMatrix, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sensors::CalMatrix* resp) {
               return service->GetCalMatrix(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[66],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::ReactionTestResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sensors::ReactionTestResult* resp) {
               return service->TestReaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[67],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::LuciOverride>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::LuciOverride>* writer) {
               return service->LuciOverrideStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[68],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Sensors::Service, ::sensors::LuciLandmark, ::sensors::Response>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::sensors::LuciLandmark>* reader,
             ::sensors::Response* resp) {
               return service->LuciLandmarkStreamPassThrough(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[69],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Sensors::Service, ::sensors::RampInfo, ::sensors::Response>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::sensors::RampInfo>* reader,
             ::sensors::Response* resp) {
               return service->RampInfoStreamPassThrough(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[70],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::LuciLandmark>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::LuciLandmark>* writer) {
               return service->LuciLandmarkStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[71],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::RampInfo>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::RampInfo>* writer) {
               return service->RampInfoStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Sensors_method_names[72],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Sensors::Service, ::google::protobuf::Empty, ::sensors::ModeCtrl>(
          [](Sensors::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::sensors::ModeCtrl>* writer) {
               return service->DriveModeStream(ctx, req, writer);
             }, this)));
}

Sensors::Service::~Service() {
}

::grpc::Status Sensors::Service::TurnOnLed(::grpc::ServerContext* context, const ::sensors::Led* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::TurnOffLed(::grpc::ServerContext* context, const ::sensors::Led* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::ActivateHmiState(::grpc::ServerContext* context, const ::sensors::HmiState* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::DeactivateHmiState(::grpc::ServerContext* context, const ::sensors::HmiState* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::SetNavigationScaling(::grpc::ServerContext* context, const ::sensors::NavigationScaling* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::TurnOnUltrasonic(::grpc::ServerContext* context, const ::sensors::UltrasonicCtrl* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::TurnOffUltrasonic(::grpc::ServerContext* context, const ::sensors::UltrasonicCtrl* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::TurnOnRadar(::grpc::ServerContext* context, const ::sensors::RadarCtrl* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::TurnOffRadar(::grpc::ServerContext* context, const ::sensors::RadarCtrl* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::CollectImuCalibration(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::DFGetCurrentParameters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::DFGetBufferedEvents(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::DisableLuci(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::JsOverride(::grpc::ServerContext* context, const ::sensors::RemoteJsValues* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::SetDriveMode(::grpc::ServerContext* context, const ::sensors::ModeCtrl* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::SetRampMode(::grpc::ServerContext* context, const ::sensors::RampMode* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::SetLuciOverride(::grpc::ServerContext* context, const ::sensors::LuciOverride* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::ExtPressCount(::grpc::ServerContext* context, const ::sensors::PressCountStreamData* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::HmiStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::HmiStreamData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::PressCountStream(::grpc::ServerContext* context, const ::sensors::PressRequest* request, ::grpc::ServerWriter< ::sensors::PressCountStreamData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::UltrasonicStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::UltrasonicDistances>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::RawUltrasonicStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::UltrasonicCurve>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::RadarStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::RadarPoints>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::RawRadarStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::RadarPoints>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::ChairSpeedStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::ChairSpeed>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::ImuStream(::grpc::ServerContext* context, const ::sensors::ImuCtrl* request, ::grpc::ServerWriter< ::sensors::ImuData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::ChairModeStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::ChairMode>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::ChairProfileStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::ChairProfile>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::SpeedSettingStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::SpeedSetting>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::JoystickStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::Joystick>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::VirtualJoystickStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::JoystickData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::PhysicalJoystickStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::JoystickData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::ScaledJoystickStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::JoystickData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::LuciJoystickStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::JoystickData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::AhrsStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::AhrsData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::RadarClosestObstaclesStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::ClosestObstacles>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::UltrasonicClosestObstaclesStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::ClosestObstacles>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::CameraCollisionClosestObstaclesStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::ClosestObstacles>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::StepClosestObstaclesStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::ClosestObstacles>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::DropoffClosestObstaclesStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::ClosestObstacles>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::ScalingStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::NavigationScaling>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::BatteryVoltageStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::BatteryVoltage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::BatteryPercentStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::BatteryPercent>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::CameraStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::CameraPoints>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::FlatCameraStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::CameraPoints2D>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::DropoffCameraStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::CameraPoints>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::CaneCameraStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::ObjectDetection2D>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::GPSStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::GPSData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::SeatPressureStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::SeatPressure>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::DFParametersChangedStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::DFParameters>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::DFEventStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::DFSeatEvent>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::SendLogging(::grpc::ServerContext* context, const ::sensors::LoggingData* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::LoggingStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::LoggingData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::StepCameraStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::CameraPoints>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::IrStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::IrFrame>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::RampAssistStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::RampAssistStates>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::DistStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::DistanceData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::StartModeStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::StartModeData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::AudioPlaybackRequestStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::AudioPlaybackRequest>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::GetZoneBoundaries(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sensors::ZoneBoundaries* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::GetBlockedZones(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sensors::BlockedZones* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::GetJoystickRanges(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sensors::JoystickRanges* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::EnableRadarFilter(::grpc::ServerContext* context, const ::sensors::RadarFilter* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::DisableRadarFilter(::grpc::ServerContext* context, const ::sensors::RadarFilter* request, ::sensors::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::EncoderStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::EncoderData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::GetCalMatrix(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sensors::CalMatrix* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::TestReaction(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sensors::ReactionTestResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::LuciOverrideStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::LuciOverride>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::LuciLandmarkStreamPassThrough(::grpc::ServerContext* context, ::grpc::ServerReader< ::sensors::LuciLandmark>* reader, ::sensors::Response* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::RampInfoStreamPassThrough(::grpc::ServerContext* context, ::grpc::ServerReader< ::sensors::RampInfo>* reader, ::sensors::Response* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::LuciLandmarkStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::LuciLandmark>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::RampInfoStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::RampInfo>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Sensors::Service::DriveModeStream(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::sensors::ModeCtrl>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sensors

