// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensors_grpc/sensors.proto

#include "sensors_grpc/sensors.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sensors {
constexpr AudioPlaybackRequest::AudioPlaybackRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requested_playback_(0)
{}
struct AudioPlaybackRequestDefaultTypeInternal {
  constexpr AudioPlaybackRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioPlaybackRequestDefaultTypeInternal() {}
  union {
    AudioPlaybackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioPlaybackRequestDefaultTypeInternal _AudioPlaybackRequest_default_instance_;
constexpr PressRequest::PressRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ramp_assist_(false){}
struct PressRequestDefaultTypeInternal {
  constexpr PressRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PressRequestDefaultTypeInternal() {}
  union {
    PressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PressRequestDefaultTypeInternal _PressRequest_default_instance_;
constexpr ZoneBoundary::ZoneBoundary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : polygon_()
  , critical_point_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ZoneBoundaryDefaultTypeInternal {
  constexpr ZoneBoundaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZoneBoundaryDefaultTypeInternal() {}
  union {
    ZoneBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZoneBoundaryDefaultTypeInternal _ZoneBoundary_default_instance_;
constexpr ZoneBoundaries::ZoneBoundaries(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : zone_boundary_(){}
struct ZoneBoundariesDefaultTypeInternal {
  constexpr ZoneBoundariesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZoneBoundariesDefaultTypeInternal() {}
  union {
    ZoneBoundaries _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZoneBoundariesDefaultTypeInternal _ZoneBoundaries_default_instance_;
constexpr BlockedZone::BlockedZone(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , sensor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BlockedZoneDefaultTypeInternal {
  constexpr BlockedZoneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockedZoneDefaultTypeInternal() {}
  union {
    BlockedZone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockedZoneDefaultTypeInternal _BlockedZone_default_instance_;
constexpr BlockedZones::BlockedZones(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blocked_zones_(){}
struct BlockedZonesDefaultTypeInternal {
  constexpr BlockedZonesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockedZonesDefaultTypeInternal() {}
  union {
    BlockedZones _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockedZonesDefaultTypeInternal _BlockedZones_default_instance_;
constexpr JoystickRange::JoystickRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : begin_(0)
  , end_(0){}
struct JoystickRangeDefaultTypeInternal {
  constexpr JoystickRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoystickRangeDefaultTypeInternal() {}
  union {
    JoystickRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoystickRangeDefaultTypeInternal _JoystickRange_default_instance_;
constexpr JoystickRanges::JoystickRanges(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : joystick_ranges_(){}
struct JoystickRangesDefaultTypeInternal {
  constexpr JoystickRangesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoystickRangesDefaultTypeInternal() {}
  union {
    JoystickRanges _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoystickRangesDefaultTypeInternal _JoystickRanges_default_instance_;
constexpr StartModeData::StartModeData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : missing_devices_()
  , mode_(0)
{}
struct StartModeDataDefaultTypeInternal {
  constexpr StartModeDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartModeDataDefaultTypeInternal() {}
  union {
    StartModeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartModeDataDefaultTypeInternal _StartModeData_default_instance_;
constexpr Response::Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reply_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , return_code_(0){}
struct ResponseDefaultTypeInternal {
  constexpr ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDefaultTypeInternal _Response_default_instance_;
constexpr DFParameters::DFParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : df_timestamp_(0u)
  , target_pressure_(0)
  , high_pressure_(0)
  , low_pressure_(0)
  , in_seat_pressure_(0)
  , offload_pressure_(0){}
struct DFParametersDefaultTypeInternal {
  constexpr DFParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DFParametersDefaultTypeInternal() {}
  union {
    DFParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DFParametersDefaultTypeInternal _DFParameters_default_instance_;
constexpr DFSeatEvent::DFSeatEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_timestamp_(0u)
  , event_timestamp_(0u)
  , group_(0)

  , event_type_(0)
{}
struct DFSeatEventDefaultTypeInternal {
  constexpr DFSeatEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DFSeatEventDefaultTypeInternal() {}
  union {
    DFSeatEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DFSeatEventDefaultTypeInternal _DFSeatEvent_default_instance_;
constexpr DistanceData::DistanceData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : distance_(0){}
struct DistanceDataDefaultTypeInternal {
  constexpr DistanceDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DistanceDataDefaultTypeInternal() {}
  union {
    DistanceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DistanceDataDefaultTypeInternal _DistanceData_default_instance_;
constexpr SeatPressure::SeatPressure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pressure_(0){}
struct SeatPressureDefaultTypeInternal {
  constexpr SeatPressureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SeatPressureDefaultTypeInternal() {}
  union {
    SeatPressure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SeatPressureDefaultTypeInternal _SeatPressure_default_instance_;
constexpr ObstacleValue_Linear::ObstacleValue_Linear(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : distance_(0){}
struct ObstacleValue_LinearDefaultTypeInternal {
  constexpr ObstacleValue_LinearDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObstacleValue_LinearDefaultTypeInternal() {}
  union {
    ObstacleValue_Linear _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObstacleValue_LinearDefaultTypeInternal _ObstacleValue_Linear_default_instance_;
constexpr ObstacleValue_Angular::ObstacleValue_Angular(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : angle_(0){}
struct ObstacleValue_AngularDefaultTypeInternal {
  constexpr ObstacleValue_AngularDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObstacleValue_AngularDefaultTypeInternal() {}
  union {
    ObstacleValue_Angular _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObstacleValue_AngularDefaultTypeInternal _ObstacleValue_Angular_default_instance_;
constexpr ObstacleValue_Combo::ObstacleValue_Combo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : distance_(0)
  , angle_(0){}
struct ObstacleValue_ComboDefaultTypeInternal {
  constexpr ObstacleValue_ComboDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObstacleValue_ComboDefaultTypeInternal() {}
  union {
    ObstacleValue_Combo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObstacleValue_ComboDefaultTypeInternal _ObstacleValue_Combo_default_instance_;
constexpr ObstacleValue::ObstacleValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ObstacleValueDefaultTypeInternal {
  constexpr ObstacleValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObstacleValueDefaultTypeInternal() {}
  union {
    ObstacleValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObstacleValueDefaultTypeInternal _ObstacleValue_default_instance_;
constexpr ClosestObstacles::ClosestObstacles(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : front_(nullptr)
  , front_left_(nullptr)
  , front_right_(nullptr)
  , left_(nullptr)
  , right_(nullptr)
  , back_left_(nullptr)
  , back_right_(nullptr)
  , back_(nullptr)
  , timestamp_(nullptr){}
struct ClosestObstaclesDefaultTypeInternal {
  constexpr ClosestObstaclesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClosestObstaclesDefaultTypeInternal() {}
  union {
    ClosestObstacles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClosestObstaclesDefaultTypeInternal _ClosestObstacles_default_instance_;
constexpr CameraPoints::CameraPoints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , timestamp_(nullptr){}
struct CameraPointsDefaultTypeInternal {
  constexpr CameraPointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraPointsDefaultTypeInternal() {}
  union {
    CameraPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraPointsDefaultTypeInternal _CameraPoints_default_instance_;
constexpr Point3D::Point3D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Point3DDefaultTypeInternal {
  constexpr Point3DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Point3DDefaultTypeInternal() {}
  union {
    Point3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Point3DDefaultTypeInternal _Point3D_default_instance_;
constexpr ObjectDetection2D::ObjectDetection2D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objects_(){}
struct ObjectDetection2DDefaultTypeInternal {
  constexpr ObjectDetection2DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectDetection2DDefaultTypeInternal() {}
  union {
    ObjectDetection2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectDetection2DDefaultTypeInternal _ObjectDetection2D_default_instance_;
constexpr Object2D::Object2D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , points_(nullptr){}
struct Object2DDefaultTypeInternal {
  constexpr Object2DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Object2DDefaultTypeInternal() {}
  union {
    Object2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Object2DDefaultTypeInternal _Object2D_default_instance_;
constexpr CameraPoints2D::CameraPoints2D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , timestamp_(nullptr){}
struct CameraPoints2DDefaultTypeInternal {
  constexpr CameraPoints2DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraPoints2DDefaultTypeInternal() {}
  union {
    CameraPoints2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraPoints2DDefaultTypeInternal _CameraPoints2D_default_instance_;
constexpr Point2D::Point2D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct Point2DDefaultTypeInternal {
  constexpr Point2DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Point2DDefaultTypeInternal() {}
  union {
    Point2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Point2DDefaultTypeInternal _Point2D_default_instance_;
constexpr LoggingData::LoggingData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(0)
  , timestamp_(0){}
struct LoggingDataDefaultTypeInternal {
  constexpr LoggingDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoggingDataDefaultTypeInternal() {}
  union {
    LoggingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoggingDataDefaultTypeInternal _LoggingData_default_instance_;
constexpr Led::Led(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : led_(0)
{}
struct LedDefaultTypeInternal {
  constexpr LedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LedDefaultTypeInternal() {}
  union {
    Led _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LedDefaultTypeInternal _Led_default_instance_;
constexpr HmiState::HmiState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(0)
{}
struct HmiStateDefaultTypeInternal {
  constexpr HmiStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HmiStateDefaultTypeInternal() {}
  union {
    HmiState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HmiStateDefaultTypeInternal _HmiState_default_instance_;
constexpr HmiStreamData::HmiStreamData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_alt_override_(false)
  , button_state_(0)
{}
struct HmiStreamDataDefaultTypeInternal {
  constexpr HmiStreamDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HmiStreamDataDefaultTypeInternal() {}
  union {
    HmiStreamData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HmiStreamDataDefaultTypeInternal _HmiStreamData_default_instance_;
constexpr PressCountStreamData::PressCountStreamData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : press_count_(0){}
struct PressCountStreamDataDefaultTypeInternal {
  constexpr PressCountStreamDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PressCountStreamDataDefaultTypeInternal() {}
  union {
    PressCountStreamData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PressCountStreamDataDefaultTypeInternal _PressCountStreamData_default_instance_;
constexpr NavigationScaling::NavigationScaling(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : front_fb_(0)
  , front_rl_(0)
  , front_right_fb_(0)
  , front_right_rl_(0)
  , front_left_fb_(0)
  , front_left_rl_(0)
  , right_fb_(0)
  , right_rl_(0)
  , left_fb_(0)
  , left_rl_(0)
  , back_right_fb_(0)
  , back_right_rl_(0)
  , back_left_fb_(0)
  , back_left_rl_(0)
  , back_fb_(0)
  , back_rl_(0)
  , max_js_scale_increase_(0u)
  , max_js_scale_decrease_(0u)
  , luci_active_(false){}
struct NavigationScalingDefaultTypeInternal {
  constexpr NavigationScalingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NavigationScalingDefaultTypeInternal() {}
  union {
    NavigationScaling _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NavigationScalingDefaultTypeInternal _NavigationScaling_default_instance_;
constexpr UltrasonicCtrl::UltrasonicCtrl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : board_(0)

  , spi_id_(0)
  , address_(0){}
struct UltrasonicCtrlDefaultTypeInternal {
  constexpr UltrasonicCtrlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UltrasonicCtrlDefaultTypeInternal() {}
  union {
    UltrasonicCtrl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UltrasonicCtrlDefaultTypeInternal _UltrasonicCtrl_default_instance_;
constexpr UltrasonicDistance::UltrasonicDistance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arc_points_()
  , timestamp_(nullptr)
  , distance_(0)
  , board_(0)

  , spi_id_(0)
  , address_(0){}
struct UltrasonicDistanceDefaultTypeInternal {
  constexpr UltrasonicDistanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UltrasonicDistanceDefaultTypeInternal() {}
  union {
    UltrasonicDistance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UltrasonicDistanceDefaultTypeInternal _UltrasonicDistance_default_instance_;
constexpr UltrasonicDistances::UltrasonicDistances(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : distances_(){}
struct UltrasonicDistancesDefaultTypeInternal {
  constexpr UltrasonicDistancesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UltrasonicDistancesDefaultTypeInternal() {}
  union {
    UltrasonicDistances _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UltrasonicDistancesDefaultTypeInternal _UltrasonicDistances_default_instance_;
constexpr UltrasonicCurve::UltrasonicCurve(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : curve_()
  , _curve_cached_byte_size_()
  , board_(0)

  , spi_id_(0)
  , address_(0){}
struct UltrasonicCurveDefaultTypeInternal {
  constexpr UltrasonicCurveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UltrasonicCurveDefaultTypeInternal() {}
  union {
    UltrasonicCurve _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UltrasonicCurveDefaultTypeInternal _UltrasonicCurve_default_instance_;
constexpr RadarFilter::RadarFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_(0)
{}
struct RadarFilterDefaultTypeInternal {
  constexpr RadarFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadarFilterDefaultTypeInternal() {}
  union {
    RadarFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadarFilterDefaultTypeInternal _RadarFilter_default_instance_;
constexpr RadarCtrl::RadarCtrl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : radar_(0)
{}
struct RadarCtrlDefaultTypeInternal {
  constexpr RadarCtrlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadarCtrlDefaultTypeInternal() {}
  union {
    RadarCtrl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadarCtrlDefaultTypeInternal _RadarCtrl_default_instance_;
constexpr RadarPoint::RadarPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0)
  , doppler_(0)
  , cross_section_(0){}
struct RadarPointDefaultTypeInternal {
  constexpr RadarPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadarPointDefaultTypeInternal() {}
  union {
    RadarPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadarPointDefaultTypeInternal _RadarPoint_default_instance_;
constexpr RadarPoints::RadarPoints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , timestamp_(nullptr)
  , source_(0)
{}
struct RadarPointsDefaultTypeInternal {
  constexpr RadarPointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadarPointsDefaultTypeInternal() {}
  union {
    RadarPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadarPointsDefaultTypeInternal _RadarPoints_default_instance_;
constexpr ChairSpeed::ChairSpeed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(nullptr)
  , speed_m_p_s_(0){}
struct ChairSpeedDefaultTypeInternal {
  constexpr ChairSpeedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChairSpeedDefaultTypeInternal() {}
  union {
    ChairSpeed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChairSpeedDefaultTypeInternal _ChairSpeed_default_instance_;
constexpr ImuCtrl::ImuCtrl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : imu_(0)
{}
struct ImuCtrlDefaultTypeInternal {
  constexpr ImuCtrlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImuCtrlDefaultTypeInternal() {}
  union {
    ImuCtrl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImuCtrlDefaultTypeInternal _ImuCtrl_default_instance_;
constexpr ImuData::ImuData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(nullptr)
  , quaternion_x_(0)
  , quaternion_y_(0)
  , quaternion_z_(0)
  , quaternion_w_(0)
  , acceleration_x_(0)
  , acceleration_y_(0)
  , acceleration_z_(0)
  , gyro_x_(0)
  , gyro_y_(0)
  , gyro_z_(0)
  , euler_x_(0)
  , euler_y_(0)
  , euler_z_(0)
  , accelerometer_x_(0)
  , accelerometer_y_(0)
  , accelerometer_z_(0)
  , magnetometer_x_(0)
  , magnetometer_y_(0)
  , magnetometer_z_(0)
  , gravity_x_(0)
  , gravity_y_(0)
  , gravity_z_(0)
  , cal_system_(0)

  , cal_gyroscope_(0)

  , cal_accelerometer_(0)

  , cal_magnetometer_(0)

  , source_(0)
{}
struct ImuDataDefaultTypeInternal {
  constexpr ImuDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImuDataDefaultTypeInternal() {}
  union {
    ImuData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImuDataDefaultTypeInternal _ImuData_default_instance_;
constexpr ChairMode::ChairMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_drive_mode_(false){}
struct ChairModeDefaultTypeInternal {
  constexpr ChairModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChairModeDefaultTypeInternal() {}
  union {
    ChairMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChairModeDefaultTypeInternal _ChairMode_default_instance_;
constexpr ChairProfile::ChairProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : profile_(0){}
struct ChairProfileDefaultTypeInternal {
  constexpr ChairProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChairProfileDefaultTypeInternal() {}
  union {
    ChairProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChairProfileDefaultTypeInternal _ChairProfile_default_instance_;
constexpr SpeedSetting::SpeedSetting(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : speed_setting_(0){}
struct SpeedSettingDefaultTypeInternal {
  constexpr SpeedSettingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeedSettingDefaultTypeInternal() {}
  union {
    SpeedSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeedSettingDefaultTypeInternal _SpeedSetting_default_instance_;
constexpr JoystickData::JoystickData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : joystick_zone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(nullptr)
  , forward_back_(0)
  , left_right_(0){}
struct JoystickDataDefaultTypeInternal {
  constexpr JoystickDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoystickDataDefaultTypeInternal() {}
  union {
    JoystickData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoystickDataDefaultTypeInternal _JoystickData_default_instance_;
constexpr Joystick::Joystick(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : forward_back_(0)
  , left_right_(0){}
struct JoystickDefaultTypeInternal {
  constexpr JoystickDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoystickDefaultTypeInternal() {}
  union {
    Joystick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoystickDefaultTypeInternal _Joystick_default_instance_;
constexpr BatteryVoltage::BatteryVoltage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : battery_voltage_(0){}
struct BatteryVoltageDefaultTypeInternal {
  constexpr BatteryVoltageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatteryVoltageDefaultTypeInternal() {}
  union {
    BatteryVoltage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatteryVoltageDefaultTypeInternal _BatteryVoltage_default_instance_;
constexpr BatteryPercent::BatteryPercent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : battery_percentage_(0){}
struct BatteryPercentDefaultTypeInternal {
  constexpr BatteryPercentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatteryPercentDefaultTypeInternal() {}
  union {
    BatteryPercent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatteryPercentDefaultTypeInternal _BatteryPercent_default_instance_;
constexpr GPSData::GPSData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latitude_(0)
  , longitude_(0)
  , heading_of_motion_(0)
  , number_of_sv_(0u)
  , hdop_(0u)
  , height_above_sea_(0)
  , ground_speed_(0)
  , quality_(0)

  , year_(0)
  , month_(0)
  , day_(0)
  , hour_(0)
  , minute_(0)
  , second_(0){}
struct GPSDataDefaultTypeInternal {
  constexpr GPSDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GPSDataDefaultTypeInternal() {}
  union {
    GPSData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GPSDataDefaultTypeInternal _GPSData_default_instance_;
constexpr EncoderData::EncoderData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(nullptr)
  , left_angle_(0)
  , right_angle_(0)
  , fl_caster_degrees_(0)
  , bl_caster_degrees_(0)
  , fr_caster_degrees_(0)
  , br_caster_degrees_(0){}
struct EncoderDataDefaultTypeInternal {
  constexpr EncoderDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EncoderDataDefaultTypeInternal() {}
  union {
    EncoderData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EncoderDataDefaultTypeInternal _EncoderData_default_instance_;
constexpr Vec3::Vec3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vec3DefaultTypeInternal {
  constexpr Vec3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vec3DefaultTypeInternal() {}
  union {
    Vec3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vec3DefaultTypeInternal _Vec3_default_instance_;
constexpr Vec4::Vec4(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : w_(0)
  , x_(0)
  , y_(0)
  , z_(0){}
struct Vec4DefaultTypeInternal {
  constexpr Vec4DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vec4DefaultTypeInternal() {}
  union {
    Vec4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vec4DefaultTypeInternal _Vec4_default_instance_;
constexpr AhrsData::AhrsData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : linear_velocity_(nullptr)
  , linear_acceleration_(nullptr)
  , angular_velocity_(nullptr)
  , angular_acceleration_(nullptr)
  , orientation_(nullptr)
  , timestamp_(nullptr){}
struct AhrsDataDefaultTypeInternal {
  constexpr AhrsDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AhrsDataDefaultTypeInternal() {}
  union {
    AhrsData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AhrsDataDefaultTypeInternal _AhrsData_default_instance_;
constexpr MatrixElement::MatrixElement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0){}
struct MatrixElementDefaultTypeInternal {
  constexpr MatrixElementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MatrixElementDefaultTypeInternal() {}
  union {
    MatrixElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MatrixElementDefaultTypeInternal _MatrixElement_default_instance_;
constexpr CalMatrix::CalMatrix(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matrix_element_()
  , rows_(0)
  , columns_(0){}
struct CalMatrixDefaultTypeInternal {
  constexpr CalMatrixDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CalMatrixDefaultTypeInternal() {}
  union {
    CalMatrix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CalMatrixDefaultTypeInternal _CalMatrix_default_instance_;
constexpr IrIntrinsics::IrIntrinsics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fx_(0)
  , fy_(0)
  , ppx_(0)
  , ppy_(0){}
struct IrIntrinsicsDefaultTypeInternal {
  constexpr IrIntrinsicsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IrIntrinsicsDefaultTypeInternal() {}
  union {
    IrIntrinsics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IrIntrinsicsDefaultTypeInternal _IrIntrinsics_default_instance_;
constexpr IrFrame::IrFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frame_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , camera_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , intrinsics_(nullptr)
  , timestamp_(nullptr)
  , width_(0)
  , height_(0){}
struct IrFrameDefaultTypeInternal {
  constexpr IrFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IrFrameDefaultTypeInternal() {}
  union {
    IrFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IrFrameDefaultTypeInternal _IrFrame_default_instance_;
constexpr RemoteJsValues::RemoteJsValues(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : forward_back_(0)
  , left_right_(0){}
struct RemoteJsValuesDefaultTypeInternal {
  constexpr RemoteJsValuesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoteJsValuesDefaultTypeInternal() {}
  union {
    RemoteJsValues _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoteJsValuesDefaultTypeInternal _RemoteJsValues_default_instance_;
constexpr ModeCtrl::ModeCtrl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mode_(0)
{}
struct ModeCtrlDefaultTypeInternal {
  constexpr ModeCtrlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModeCtrlDefaultTypeInternal() {}
  union {
    ModeCtrl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModeCtrlDefaultTypeInternal _ModeCtrl_default_instance_;
constexpr RampMode::RampMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ramp_active_(false)
  , ramp_approach_active_(false){}
struct RampModeDefaultTypeInternal {
  constexpr RampModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RampModeDefaultTypeInternal() {}
  union {
    RampMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RampModeDefaultTypeInternal _RampMode_default_instance_;
constexpr RampAssistStates::RampAssistStates(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(nullptr)
  , is_active_(false)
  , approach_active_(false){}
struct RampAssistStatesDefaultTypeInternal {
  constexpr RampAssistStatesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RampAssistStatesDefaultTypeInternal() {}
  union {
    RampAssistStates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RampAssistStatesDefaultTypeInternal _RampAssistStates_default_instance_;
constexpr LuciOverride::LuciOverride(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : override_active_(false){}
struct LuciOverrideDefaultTypeInternal {
  constexpr LuciOverrideDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LuciOverrideDefaultTypeInternal() {}
  union {
    LuciOverride _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LuciOverrideDefaultTypeInternal _LuciOverride_default_instance_;
constexpr ReactionTestResult::ReactionTestResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)

  , reaction_time_(0){}
struct ReactionTestResultDefaultTypeInternal {
  constexpr ReactionTestResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReactionTestResultDefaultTypeInternal() {}
  union {
    ReactionTestResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReactionTestResultDefaultTypeInternal _ReactionTestResult_default_instance_;
constexpr LandMarkRotation::LandMarkRotation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct LandMarkRotationDefaultTypeInternal {
  constexpr LandMarkRotationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LandMarkRotationDefaultTypeInternal() {}
  union {
    LandMarkRotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LandMarkRotationDefaultTypeInternal _LandMarkRotation_default_instance_;
constexpr LandMarkTranslation::LandMarkTranslation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct LandMarkTranslationDefaultTypeInternal {
  constexpr LandMarkTranslationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LandMarkTranslationDefaultTypeInternal() {}
  union {
    LandMarkTranslation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LandMarkTranslationDefaultTypeInternal _LandMarkTranslation_default_instance_;
constexpr Pose::Pose(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : translation_(nullptr)
  , rotation_(nullptr){}
struct PoseDefaultTypeInternal {
  constexpr PoseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PoseDefaultTypeInternal() {}
  union {
    Pose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PoseDefaultTypeInternal _Pose_default_instance_;
constexpr LuciLandmark::LuciLandmark(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pose_(nullptr)
  , timestamp_(nullptr)
  , type_(0)

  , id_(0){}
struct LuciLandmarkDefaultTypeInternal {
  constexpr LuciLandmarkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LuciLandmarkDefaultTypeInternal() {}
  union {
    LuciLandmark _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LuciLandmarkDefaultTypeInternal _LuciLandmark_default_instance_;
constexpr PID::PID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : p_(0)
  , i_(0)
  , d_(0)
  , goal_(0)
  , output_(0)
  , error_(0){}
struct PIDDefaultTypeInternal {
  constexpr PIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PIDDefaultTypeInternal() {}
  union {
    PID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PIDDefaultTypeInternal _PID_default_instance_;
constexpr RampInfo::RampInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : approach_forward_pid_(nullptr)
  , approach_turn_pid_(nullptr)
  , adjustment_forward_pid_(nullptr)
  , adjustment_turn_pid_(nullptr)
  , timestamp_(nullptr)
  , state_(0)

  , scout_center_dist_x_(0)
  , chair_ramp_dist_y_(0)
  , ramp_trac_js_lr_(0)
  , ramp_trac_js_fb_(0)
  , operating_js_lr_(0)
  , operating_js_fb_(0)
  , ramp_width_(0){}
struct RampInfoDefaultTypeInternal {
  constexpr RampInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RampInfoDefaultTypeInternal() {}
  union {
    RampInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RampInfoDefaultTypeInternal _RampInfo_default_instance_;
}  // namespace sensors
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[70];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sensors_5fgrpc_2fsensors_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sensors_5fgrpc_2fsensors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::AudioPlaybackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::AudioPlaybackRequest, requested_playback_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::PressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::PressRequest, ramp_assist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ZoneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::ZoneBoundary, polygon_),
  PROTOBUF_FIELD_OFFSET(::sensors::ZoneBoundary, critical_point_),
  PROTOBUF_FIELD_OFFSET(::sensors::ZoneBoundary, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ZoneBoundaries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::ZoneBoundaries, zone_boundary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::BlockedZone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::BlockedZone, points_),
  PROTOBUF_FIELD_OFFSET(::sensors::BlockedZone, sensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::BlockedZones, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::BlockedZones, blocked_zones_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickRange, begin_),
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickRange, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickRanges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickRanges, joystick_ranges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::StartModeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::StartModeData, mode_),
  PROTOBUF_FIELD_OFFSET(::sensors::StartModeData, missing_devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::Response, reply_),
  PROTOBUF_FIELD_OFFSET(::sensors::Response, return_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::DFParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::DFParameters, df_timestamp_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFParameters, target_pressure_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFParameters, high_pressure_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFParameters, low_pressure_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFParameters, in_seat_pressure_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFParameters, offload_pressure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::DFSeatEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::DFSeatEvent, current_timestamp_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFSeatEvent, event_timestamp_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFSeatEvent, group_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFSeatEvent, event_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::DistanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::DistanceData, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::SeatPressure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::SeatPressure, pressure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue_Linear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue_Linear, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue_Angular, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue_Angular, angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue_Combo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue_Combo, distance_),
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue_Combo, angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, front_),
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, front_left_),
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, front_right_),
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, left_),
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, right_),
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, back_left_),
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, back_right_),
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, back_),
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::CameraPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::CameraPoints, points_),
  PROTOBUF_FIELD_OFFSET(::sensors::CameraPoints, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Point3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::Point3D, x_),
  PROTOBUF_FIELD_OFFSET(::sensors::Point3D, y_),
  PROTOBUF_FIELD_OFFSET(::sensors::Point3D, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ObjectDetection2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::ObjectDetection2D, objects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Object2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::Object2D, points_),
  PROTOBUF_FIELD_OFFSET(::sensors::Object2D, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::CameraPoints2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::CameraPoints2D, points_),
  PROTOBUF_FIELD_OFFSET(::sensors::CameraPoints2D, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Point2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::Point2D, x_),
  PROTOBUF_FIELD_OFFSET(::sensors::Point2D, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::LoggingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::LoggingData, key_),
  PROTOBUF_FIELD_OFFSET(::sensors::LoggingData, value_),
  PROTOBUF_FIELD_OFFSET(::sensors::LoggingData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::sensors::LoggingData, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Led, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::Led, led_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::HmiState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::HmiState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::HmiStreamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::HmiStreamData, is_alt_override_),
  PROTOBUF_FIELD_OFFSET(::sensors::HmiStreamData, button_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::PressCountStreamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::PressCountStreamData, press_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, front_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, front_rl_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, front_right_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, front_right_rl_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, front_left_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, front_left_rl_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, right_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, right_rl_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, left_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, left_rl_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, back_right_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, back_right_rl_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, back_left_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, back_left_rl_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, back_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, back_rl_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, max_js_scale_increase_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, max_js_scale_decrease_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, luci_active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCtrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCtrl, board_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCtrl, spi_id_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCtrl, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistance, distance_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistance, board_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistance, spi_id_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistance, address_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistance, timestamp_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistance, arc_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistances, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistances, distances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCurve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCurve, curve_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCurve, board_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCurve, spi_id_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCurve, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::RadarFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::RadarFilter, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::RadarCtrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::RadarCtrl, radar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoint, x_),
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoint, y_),
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoint, z_),
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoint, doppler_),
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoint, cross_section_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoints, points_),
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoints, source_),
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoints, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ChairSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::ChairSpeed, speed_m_p_s_),
  PROTOBUF_FIELD_OFFSET(::sensors::ChairSpeed, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ImuCtrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::ImuCtrl, imu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, quaternion_x_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, quaternion_y_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, quaternion_z_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, quaternion_w_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, acceleration_x_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, acceleration_y_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, acceleration_z_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, gyro_x_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, gyro_y_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, gyro_z_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, euler_x_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, euler_y_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, euler_z_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, accelerometer_x_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, accelerometer_y_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, accelerometer_z_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, magnetometer_x_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, magnetometer_y_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, magnetometer_z_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, gravity_x_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, gravity_y_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, gravity_z_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, cal_system_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, cal_gyroscope_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, cal_accelerometer_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, cal_magnetometer_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ChairMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::ChairMode, is_drive_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ChairProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::ChairProfile, profile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::SpeedSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::SpeedSetting, speed_setting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickData, forward_back_),
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickData, left_right_),
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickData, joystick_zone_),
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickData, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Joystick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::Joystick, forward_back_),
  PROTOBUF_FIELD_OFFSET(::sensors::Joystick, left_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::BatteryVoltage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::BatteryVoltage, battery_voltage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::BatteryPercent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::BatteryPercent, battery_percentage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, latitude_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, longitude_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, heading_of_motion_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, number_of_sv_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, hdop_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, height_above_sea_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, ground_speed_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, quality_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, year_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, month_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, day_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, hour_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, minute_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, second_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::EncoderData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::EncoderData, left_angle_),
  PROTOBUF_FIELD_OFFSET(::sensors::EncoderData, right_angle_),
  PROTOBUF_FIELD_OFFSET(::sensors::EncoderData, fl_caster_degrees_),
  PROTOBUF_FIELD_OFFSET(::sensors::EncoderData, bl_caster_degrees_),
  PROTOBUF_FIELD_OFFSET(::sensors::EncoderData, fr_caster_degrees_),
  PROTOBUF_FIELD_OFFSET(::sensors::EncoderData, br_caster_degrees_),
  PROTOBUF_FIELD_OFFSET(::sensors::EncoderData, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::Vec3, x_),
  PROTOBUF_FIELD_OFFSET(::sensors::Vec3, y_),
  PROTOBUF_FIELD_OFFSET(::sensors::Vec3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Vec4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::Vec4, w_),
  PROTOBUF_FIELD_OFFSET(::sensors::Vec4, x_),
  PROTOBUF_FIELD_OFFSET(::sensors::Vec4, y_),
  PROTOBUF_FIELD_OFFSET(::sensors::Vec4, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::AhrsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::AhrsData, linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::sensors::AhrsData, linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::sensors::AhrsData, angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::sensors::AhrsData, angular_acceleration_),
  PROTOBUF_FIELD_OFFSET(::sensors::AhrsData, orientation_),
  PROTOBUF_FIELD_OFFSET(::sensors::AhrsData, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::MatrixElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::MatrixElement, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::CalMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::CalMatrix, rows_),
  PROTOBUF_FIELD_OFFSET(::sensors::CalMatrix, columns_),
  PROTOBUF_FIELD_OFFSET(::sensors::CalMatrix, matrix_element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::IrIntrinsics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::IrIntrinsics, fx_),
  PROTOBUF_FIELD_OFFSET(::sensors::IrIntrinsics, fy_),
  PROTOBUF_FIELD_OFFSET(::sensors::IrIntrinsics, ppx_),
  PROTOBUF_FIELD_OFFSET(::sensors::IrIntrinsics, ppy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::IrFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::IrFrame, frame_),
  PROTOBUF_FIELD_OFFSET(::sensors::IrFrame, width_),
  PROTOBUF_FIELD_OFFSET(::sensors::IrFrame, height_),
  PROTOBUF_FIELD_OFFSET(::sensors::IrFrame, camera_),
  PROTOBUF_FIELD_OFFSET(::sensors::IrFrame, intrinsics_),
  PROTOBUF_FIELD_OFFSET(::sensors::IrFrame, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::RemoteJsValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::RemoteJsValues, forward_back_),
  PROTOBUF_FIELD_OFFSET(::sensors::RemoteJsValues, left_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ModeCtrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::ModeCtrl, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::RampMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::RampMode, ramp_active_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampMode, ramp_approach_active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::RampAssistStates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::RampAssistStates, is_active_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampAssistStates, approach_active_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampAssistStates, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::LuciOverride, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::LuciOverride, override_active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ReactionTestResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::ReactionTestResult, result_),
  PROTOBUF_FIELD_OFFSET(::sensors::ReactionTestResult, reaction_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::LandMarkRotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::LandMarkRotation, x_),
  PROTOBUF_FIELD_OFFSET(::sensors::LandMarkRotation, y_),
  PROTOBUF_FIELD_OFFSET(::sensors::LandMarkRotation, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::LandMarkTranslation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::LandMarkTranslation, x_),
  PROTOBUF_FIELD_OFFSET(::sensors::LandMarkTranslation, y_),
  PROTOBUF_FIELD_OFFSET(::sensors::LandMarkTranslation, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::Pose, translation_),
  PROTOBUF_FIELD_OFFSET(::sensors::Pose, rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::LuciLandmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::LuciLandmark, type_),
  PROTOBUF_FIELD_OFFSET(::sensors::LuciLandmark, id_),
  PROTOBUF_FIELD_OFFSET(::sensors::LuciLandmark, pose_),
  PROTOBUF_FIELD_OFFSET(::sensors::LuciLandmark, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::PID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::PID, p_),
  PROTOBUF_FIELD_OFFSET(::sensors::PID, i_),
  PROTOBUF_FIELD_OFFSET(::sensors::PID, d_),
  PROTOBUF_FIELD_OFFSET(::sensors::PID, goal_),
  PROTOBUF_FIELD_OFFSET(::sensors::PID, output_),
  PROTOBUF_FIELD_OFFSET(::sensors::PID, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::RampInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::RampInfo, state_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampInfo, scout_center_dist_x_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampInfo, chair_ramp_dist_y_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampInfo, ramp_trac_js_lr_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampInfo, ramp_trac_js_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampInfo, operating_js_lr_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampInfo, operating_js_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampInfo, approach_forward_pid_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampInfo, approach_turn_pid_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampInfo, adjustment_forward_pid_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampInfo, adjustment_turn_pid_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampInfo, ramp_width_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampInfo, timestamp_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensors::AudioPlaybackRequest)},
  { 6, -1, sizeof(::sensors::PressRequest)},
  { 12, -1, sizeof(::sensors::ZoneBoundary)},
  { 20, -1, sizeof(::sensors::ZoneBoundaries)},
  { 26, -1, sizeof(::sensors::BlockedZone)},
  { 33, -1, sizeof(::sensors::BlockedZones)},
  { 39, -1, sizeof(::sensors::JoystickRange)},
  { 46, -1, sizeof(::sensors::JoystickRanges)},
  { 52, -1, sizeof(::sensors::StartModeData)},
  { 59, -1, sizeof(::sensors::Response)},
  { 66, -1, sizeof(::sensors::DFParameters)},
  { 77, -1, sizeof(::sensors::DFSeatEvent)},
  { 86, -1, sizeof(::sensors::DistanceData)},
  { 92, -1, sizeof(::sensors::SeatPressure)},
  { 98, -1, sizeof(::sensors::ObstacleValue_Linear)},
  { 104, -1, sizeof(::sensors::ObstacleValue_Angular)},
  { 110, -1, sizeof(::sensors::ObstacleValue_Combo)},
  { 117, -1, sizeof(::sensors::ObstacleValue)},
  { 126, -1, sizeof(::sensors::ClosestObstacles)},
  { 140, -1, sizeof(::sensors::CameraPoints)},
  { 147, -1, sizeof(::sensors::Point3D)},
  { 155, -1, sizeof(::sensors::ObjectDetection2D)},
  { 161, -1, sizeof(::sensors::Object2D)},
  { 168, -1, sizeof(::sensors::CameraPoints2D)},
  { 175, -1, sizeof(::sensors::Point2D)},
  { 182, -1, sizeof(::sensors::LoggingData)},
  { 191, -1, sizeof(::sensors::Led)},
  { 197, -1, sizeof(::sensors::HmiState)},
  { 203, -1, sizeof(::sensors::HmiStreamData)},
  { 210, -1, sizeof(::sensors::PressCountStreamData)},
  { 216, -1, sizeof(::sensors::NavigationScaling)},
  { 240, -1, sizeof(::sensors::UltrasonicCtrl)},
  { 248, -1, sizeof(::sensors::UltrasonicDistance)},
  { 259, -1, sizeof(::sensors::UltrasonicDistances)},
  { 265, -1, sizeof(::sensors::UltrasonicCurve)},
  { 274, -1, sizeof(::sensors::RadarFilter)},
  { 280, -1, sizeof(::sensors::RadarCtrl)},
  { 286, -1, sizeof(::sensors::RadarPoint)},
  { 296, -1, sizeof(::sensors::RadarPoints)},
  { 304, -1, sizeof(::sensors::ChairSpeed)},
  { 311, -1, sizeof(::sensors::ImuCtrl)},
  { 317, -1, sizeof(::sensors::ImuData)},
  { 350, -1, sizeof(::sensors::ChairMode)},
  { 356, -1, sizeof(::sensors::ChairProfile)},
  { 362, -1, sizeof(::sensors::SpeedSetting)},
  { 368, -1, sizeof(::sensors::JoystickData)},
  { 377, -1, sizeof(::sensors::Joystick)},
  { 384, -1, sizeof(::sensors::BatteryVoltage)},
  { 390, -1, sizeof(::sensors::BatteryPercent)},
  { 396, -1, sizeof(::sensors::GPSData)},
  { 415, -1, sizeof(::sensors::EncoderData)},
  { 427, -1, sizeof(::sensors::Vec3)},
  { 435, -1, sizeof(::sensors::Vec4)},
  { 444, -1, sizeof(::sensors::AhrsData)},
  { 455, -1, sizeof(::sensors::MatrixElement)},
  { 461, -1, sizeof(::sensors::CalMatrix)},
  { 469, -1, sizeof(::sensors::IrIntrinsics)},
  { 478, -1, sizeof(::sensors::IrFrame)},
  { 489, -1, sizeof(::sensors::RemoteJsValues)},
  { 496, -1, sizeof(::sensors::ModeCtrl)},
  { 502, -1, sizeof(::sensors::RampMode)},
  { 509, -1, sizeof(::sensors::RampAssistStates)},
  { 517, -1, sizeof(::sensors::LuciOverride)},
  { 523, -1, sizeof(::sensors::ReactionTestResult)},
  { 530, -1, sizeof(::sensors::LandMarkRotation)},
  { 538, -1, sizeof(::sensors::LandMarkTranslation)},
  { 546, -1, sizeof(::sensors::Pose)},
  { 553, -1, sizeof(::sensors::LuciLandmark)},
  { 562, -1, sizeof(::sensors::PID)},
  { 573, -1, sizeof(::sensors::RampInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_AudioPlaybackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_PressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ZoneBoundary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ZoneBoundaries_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_BlockedZone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_BlockedZones_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_JoystickRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_JoystickRanges_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_StartModeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_DFParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_DFSeatEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_DistanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_SeatPressure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ObstacleValue_Linear_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ObstacleValue_Angular_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ObstacleValue_Combo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ObstacleValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ClosestObstacles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_CameraPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Point3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ObjectDetection2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Object2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_CameraPoints2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Point2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_LoggingData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Led_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_HmiState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_HmiStreamData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_PressCountStreamData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_NavigationScaling_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_UltrasonicCtrl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_UltrasonicDistance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_UltrasonicDistances_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_UltrasonicCurve_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_RadarFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_RadarCtrl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_RadarPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_RadarPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ChairSpeed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ImuCtrl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ImuData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ChairMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ChairProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_SpeedSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_JoystickData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Joystick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_BatteryVoltage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_BatteryPercent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_GPSData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_EncoderData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Vec3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Vec4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_AhrsData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_MatrixElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_CalMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_IrIntrinsics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_IrFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_RemoteJsValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ModeCtrl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_RampMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_RampAssistStates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_LuciOverride_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ReactionTestResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_LandMarkRotation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_LandMarkTranslation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Pose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_LuciLandmark_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_PID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_RampInfo_default_instance_),
};

const char descriptor_table_protodef_sensors_5fgrpc_2fsensors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032sensors_grpc/sensors.proto\022\007sensors\032\037g"
  "oogle/protobuf/timestamp.proto\032\033google/p"
  "rotobuf/empty.proto\"\213\001\n\024AudioPlaybackReq"
  "uest\022K\n\022requested_playback\030\001 \001(\0162/.senso"
  "rs.AudioPlaybackRequest.RequestedPlaybac"
  "k\"&\n\021RequestedPlayback\022\021\n\rERROR_DISABLE\020"
  "\000\"#\n\014PressRequest\022\023\n\013ramp_assist\030\001 \001(\010\"i"
  "\n\014ZoneBoundary\022!\n\007polygon\030\001 \003(\0132\020.sensor"
  "s.Point2D\022(\n\016critical_point\030\002 \003(\0132\020.sens"
  "ors.Point2D\022\014\n\004name\030\003 \001(\t\">\n\016ZoneBoundar"
  "ies\022,\n\rzone_boundary\030\001 \003(\0132\025.sensors.Zon"
  "eBoundary\"\?\n\013BlockedZone\022 \n\006points\030\001 \003(\013"
  "2\020.sensors.Point2D\022\016\n\006sensor\030\002 \001(\t\";\n\014Bl"
  "ockedZones\022+\n\rblocked_zones\030\001 \003(\0132\024.sens"
  "ors.BlockedZone\"+\n\rJoystickRange\022\r\n\005begi"
  "n\030\001 \001(\002\022\013\n\003end\030\002 \001(\002\"A\n\016JoystickRanges\022/"
  "\n\017joystick_ranges\030\001 \003(\0132\026.sensors.Joysti"
  "ckRange\"\230\001\n\rStartModeData\022/\n\004mode\030\001 \001(\0162"
  "!.sensors.StartModeData.StartModes\022\027\n\017mi"
  "ssing_devices\030\002 \003(\t\"=\n\nStartModes\022\013\n\007UNK"
  "NOWN\020\000\022\n\n\006NORMAL\020\001\022\010\n\004AUTO\020\002\022\014\n\010DISABLED"
  "\020\003\".\n\010Response\022\r\n\005reply\030\001 \001(\t\022\023\n\013return_"
  "code\030\002 \001(\005\"\236\001\n\014DFParameters\022\024\n\014df_timest"
  "amp\030\001 \001(\r\022\027\n\017target_pressure\030\002 \001(\002\022\025\n\rhi"
  "gh_pressure\030\003 \001(\002\022\024\n\014low_pressure\030\004 \001(\002\022"
  "\030\n\020in_seat_pressure\030\005 \001(\002\022\030\n\020offload_pre"
  "ssure\030\006 \001(\002\"\211\003\n\013DFSeatEvent\022\031\n\021current_t"
  "imestamp\030\001 \001(\r\022\027\n\017event_timestamp\030\002 \001(\r\022"
  ".\n\005group\030\003 \001(\0162\037.sensors.DFSeatEvent.Eve"
  "ntGroup\0222\n\nevent_type\030\004 \001(\0162\036.sensors.DF"
  "SeatEvent.EventType\"Y\n\nEventGroup\022\027\n\023UNK"
  "NOWN_EVENT_GROUP\020\000\022\r\n\010PRESSURE\020\241\001\022\014\n\007WET"
  "NESS\020\242\001\022\016\n\tINFLATION\020\243\001\"\005\010\001\020\240\001\"\206\001\n\tEvent"
  "Type\022\037\n\033UNKNOWN_PRESSURE_EVENT_TYPE\020\000\022\017\n"
  "\013OUT_OF_SEAT\020\022\022\021\n\rPRESSURE_HIGH\020\023\022\020\n\014PRE"
  "SSURE_LOW\020\024\022\013\n\007OFFLOAD\020\025\022\017\n\013PRESSURE_OK\020"
  "\026\"\004\010\001\020\021\" \n\014DistanceData\022\020\n\010distance\030\001 \001("
  "\005\" \n\014SeatPressure\022\020\n\010pressure\030\001 \001(\002\"\213\002\n\r"
  "ObstacleValue\022/\n\006linear\030\001 \001(\0132\035.sensors."
  "ObstacleValue.LinearH\000\0221\n\007angular\030\002 \001(\0132"
  "\036.sensors.ObstacleValue.AngularH\000\022-\n\005com"
  "bo\030\003 \001(\0132\034.sensors.ObstacleValue.ComboH\000"
  "\032\032\n\006Linear\022\020\n\010distance\030\001 \001(\002\032\030\n\007Angular\022"
  "\r\n\005angle\030\001 \001(\002\032(\n\005Combo\022\020\n\010distance\030\001 \001("
  "\002\022\r\n\005angle\030\002 \001(\002B\007\n\005value\"\213\003\n\020ClosestObs"
  "tacles\022%\n\005front\030\001 \001(\0132\026.sensors.Obstacle"
  "Value\022*\n\nfront_left\030\002 \001(\0132\026.sensors.Obst"
  "acleValue\022+\n\013front_right\030\003 \001(\0132\026.sensors"
  ".ObstacleValue\022$\n\004left\030\004 \001(\0132\026.sensors.O"
  "bstacleValue\022%\n\005right\030\005 \001(\0132\026.sensors.Ob"
  "stacleValue\022)\n\tback_left\030\006 \001(\0132\026.sensors"
  ".ObstacleValue\022*\n\nback_right\030\007 \001(\0132\026.sen"
  "sors.ObstacleValue\022$\n\004back\030\010 \001(\0132\026.senso"
  "rs.ObstacleValue\022-\n\ttimestamp\030\t \001(\0132\032.go"
  "ogle.protobuf.Timestamp\"_\n\014CameraPoints\022"
  " \n\006points\030\001 \003(\0132\020.sensors.Point3D\022-\n\ttim"
  "estamp\030\002 \001(\0132\032.google.protobuf.Timestamp"
  "\"*\n\007Point3D\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003"
  " \001(\002\"7\n\021ObjectDetection2D\022\"\n\007objects\030\001 \003"
  "(\0132\021.sensors.Object2D\"B\n\010Object2D\022\'\n\006poi"
  "nts\030\001 \001(\0132\027.sensors.CameraPoints2D\022\r\n\005la"
  "bel\030\002 \001(\t\"a\n\016CameraPoints2D\022 \n\006points\030\001 "
  "\003(\0132\020.sensors.Point2D\022-\n\ttimestamp\030\002 \001(\013"
  "2\032.google.protobuf.Timestamp\"\037\n\007Point2D\022"
  "\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"^\n\013LoggingData\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001\022\021\n\ttimestamp\030\003 "
  "\001(\005\022 \n\006points\030\004 \003(\0132\020.sensors.Point3D\"\304\001"
  "\n\003Led\022\036\n\003led\030\001 \001(\0162\021.sensors.Led.Leds\"\234\001"
  "\n\004Leds\022\013\n\007UNKNOWN\020\000\022\021\n\rSYSTEM_STATUS\020\001\022\r"
  "\n\tSENSOR_OK\020\002\022\022\n\016SENSOR_BLOCKED\020\003\022\020\n\014SEN"
  "SOR_ERROR\020\004\022\022\n\016WIFI_CONNECTED\020\005\022\022\n\016CELL_"
  "CONNECTED\020\006\022\027\n\023BLUETOOTH_CONNECTED\020\007\"\270\005\n"
  "\010HmiState\022\'\n\005state\030\001 \001(\0162\030.sensors.HmiSt"
  "ate.States\"\202\005\n\006States\022\023\n\017SETUP_APP_PULSE"
  "\020\000\022\026\n\022REACTION_TEST_WAIT\020\001\022\024\n\020REACTION_T"
  "EST_GO\020\002\022\027\n\023SENSOR_SYSTEM_ERROR\020\003\022\017\n\013NOM"
  "INAL_OFF\020\004\022\032\n\026SENSOR_SYSTEM_OVERRIDE\020\005\022\020"
  "\n\014LUCI_LOADING\020\006\022\022\n\016SENSOR_BLOCKED\020\t\022\r\n\t"
  "SYSTEM_OK\020\n\022\025\n\021STABILITY_WARNING\020\013\022\024\n\020ST"
  "ABILITY_DANGER\020\014\022\024\n\020STABILITY_TIPPED\020\r\022\020"
  "\n\014SENDING_LOGS\020\016\022\020\n\014WIFI_SENDING\020\017\022\022\n\016WI"
  "FI_AVAILABLE\020\020\022\020\n\014CELL_SENDING\020\021\022\022\n\016CELL"
  "_AVAILABLE\020\022\022\020\n\014USER_KEY_LOW\020\023\022\024\n\020USER_K"
  "EY_PRESENT\020\024\022\r\n\tNO_ACTION\020\025\022\022\n\016BUTTON_PR"
  "ESSED\020\026\022\026\n\022UPDATE_IN_PROGRESS\020\027\022\013\n\007ALL_O"
  "FF\020\030\022\016\n\nFLASH_LEDS\020\031\022\016\n\nCHASE_LEDS\020\032\022\021\n\r"
  "TEST_USER_KEY\020\033\022\r\n\tTEST_WIFI\020\034\022\r\n\tTEST_C"
  "ELL\020\035\022\022\n\016TEST_SENSOR_OK\020\036\022\027\n\023TEST_SENSOR"
  "_WARNING\020\037\022\025\n\021TEST_SENSOR_ERROR\020 \022\024\n\020TES"
  "T_LUCI_BUTTON\020!\"\214\001\n\rHmiStreamData\022\027\n\017is_"
  "alt_override\030\001 \001(\010\0228\n\014button_state\030\002 \001(\016"
  "2\".sensors.HmiStreamData.ButtonState\"(\n\013"
  "ButtonState\022\013\n\007PRESSED\020\000\022\014\n\010RELEASED\020\001\"+"
  "\n\024PressCountStreamData\022\023\n\013press_count\030\001 "
  "\001(\005\"\252\003\n\021NavigationScaling\022\020\n\010front_fb\030\001 "
  "\001(\002\022\020\n\010front_rl\030\002 \001(\002\022\026\n\016front_right_fb\030"
  "\003 \001(\002\022\026\n\016front_right_rl\030\004 \001(\002\022\025\n\rfront_l"
  "eft_fb\030\005 \001(\002\022\025\n\rfront_left_rl\030\006 \001(\002\022\020\n\010r"
  "ight_fb\030\007 \001(\002\022\020\n\010right_rl\030\010 \001(\002\022\017\n\007left_"
  "fb\030\t \001(\002\022\017\n\007left_rl\030\n \001(\002\022\025\n\rback_right_"
  "fb\030\013 \001(\002\022\025\n\rback_right_rl\030\014 \001(\002\022\024\n\014back_"
  "left_fb\030\r \001(\002\022\024\n\014back_left_rl\030\016 \001(\002\022\017\n\007b"
  "ack_fb\030\017 \001(\002\022\017\n\007back_rl\030\020 \001(\002\022\035\n\025max_js_"
  "scale_increase\030\021 \001(\r\022\035\n\025max_js_scale_dec"
  "rease\030\022 \001(\r\022\023\n\013luci_active\030\023 \001(\010\"\235\001\n\016Ult"
  "rasonicCtrl\022,\n\005board\030\001 \001(\0162\035.sensors.Ult"
  "rasonicCtrl.Board\022\016\n\006spi_id\030\002 \001(\005\022\017\n\007add"
  "ress\030\003 \001(\005\"<\n\005Board\022\013\n\007UNKNOWN\020\000\022\007\n\003MPU\020"
  "\001\022\r\n\tIO_B_LEFT\020\002\022\016\n\nIO_B_RIGHT\020\003\"\214\002\n\022Ult"
  "rasonicDistance\022\020\n\010distance\030\001 \001(\001\0220\n\005boa"
  "rd\030\002 \001(\0162!.sensors.UltrasonicDistance.Bo"
  "ard\022\016\n\006spi_id\030\003 \001(\005\022\017\n\007address\030\004 \001(\005\022-\n\t"
  "timestamp\030\005 \001(\0132\032.google.protobuf.Timest"
  "amp\022$\n\narc_points\030\006 \003(\0132\020.sensors.Point3"
  "D\"<\n\005Board\022\013\n\007UNKNOWN\020\000\022\007\n\003MPU\020\001\022\r\n\tIO_B"
  "_LEFT\020\002\022\016\n\nIO_B_RIGHT\020\003\"E\n\023UltrasonicDis"
  "tances\022.\n\tdistances\030\001 \003(\0132\033.sensors.Ultr"
  "asonicDistance\"\256\001\n\017UltrasonicCurve\022\r\n\005cu"
  "rve\030\001 \003(\005\022-\n\005board\030\002 \001(\0162\036.sensors.Ultra"
  "sonicCurve.Board\022\016\n\006spi_id\030\003 \001(\005\022\017\n\007addr"
  "ess\030\004 \001(\005\"<\n\005Board\022\013\n\007UNKNOWN\020\000\022\007\n\003MPU\020\001"
  "\022\r\n\tIO_B_LEFT\020\002\022\016\n\nIO_B_RIGHT\020\003\"\253\001\n\013Rada"
  "rFilter\022+\n\006filter\030\001 \001(\0162\033.sensors.RadarF"
  "ilter.Filter\"o\n\006Filter\022\016\n\nRANGE_CHOP\020\000\022\n"
  "\n\006ORIGIN\020\001\022\007\n\003FOV\020\002\022\010\n\004PEAK\020\003\022\n\n\006STICKY\020"
  "\004\022\020\n\014EXTRA_STICKY\020\005\022\016\n\nTRANSFORMS\020\006\022\010\n\004A"
  "DAM\020\007\"j\n\tRadarCtrl\022\'\n\005radar\030\001 \001(\0162\030.sens"
  "ors.RadarCtrl.Radar\"4\n\005Radar\022\013\n\007UNKNOWN\020"
  "\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\022\t\n\005FRONT\020\003\"U\n\nRad"
  "arPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001"
  "\022\017\n\007doppler\030\004 \001(\001\022\025\n\rcross_section\030\005 \001(\001"
  "\"\303\001\n\013RadarPoints\022#\n\006points\030\001 \003(\0132\023.senso"
  "rs.RadarPoint\022*\n\006source\030\002 \001(\0162\032.sensors."
  "RadarPoints.Radar\022-\n\ttimestamp\030\003 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\"4\n\005Radar\022\013\n\007UNK"
  "NOWN\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\022\t\n\005FRONT\020\003\"P"
  "\n\nChairSpeed\022\023\n\013speed_m_p_s\030\001 \001(\001\022-\n\ttim"
  "estamp\030\002 \001(\0132\032.google.protobuf.Timestamp"
  "\"$\n\007ImuCtrl\022\031\n\003imu\030\001 \001(\0162\014.sensors.Imu\"\351"
  "\006\n\007ImuData\022\024\n\014quaternion_x\030\001 \001(\001\022\024\n\014quat"
  "ernion_y\030\002 \001(\001\022\024\n\014quaternion_z\030\003 \001(\001\022\024\n\014"
  "quaternion_w\030\004 \001(\001\022\026\n\016acceleration_x\030\005 \001"
  "(\001\022\026\n\016acceleration_y\030\006 \001(\001\022\026\n\016accelerati"
  "on_z\030\007 \001(\001\022\016\n\006gyro_x\030\010 \001(\001\022\016\n\006gyro_y\030\t \001"
  "(\001\022\016\n\006gyro_z\030\n \001(\001\022\017\n\007euler_x\030\013 \001(\001\022\017\n\007e"
  "uler_y\030\014 \001(\001\022\017\n\007euler_z\030\r \001(\001\022\027\n\017acceler"
  "ometer_x\030\016 \001(\001\022\027\n\017accelerometer_y\030\017 \001(\001\022"
  "\027\n\017accelerometer_z\030\020 \001(\001\022\026\n\016magnetometer"
  "_x\030\021 \001(\001\022\026\n\016magnetometer_y\030\022 \001(\001\022\026\n\016magn"
  "etometer_z\030\023 \001(\001\022\021\n\tgravity_x\030\024 \001(\001\022\021\n\tg"
  "ravity_y\030\025 \001(\001\022\021\n\tgravity_z\030\026 \001(\001\0226\n\ncal"
  "_system\030\027 \001(\0162\".sensors.ImuData.Calibrat"
  "ionStatus\0229\n\rcal_gyroscope\030\030 \001(\0162\".senso"
  "rs.ImuData.CalibrationStatus\022=\n\021cal_acce"
  "lerometer\030\031 \001(\0162\".sensors.ImuData.Calibr"
  "ationStatus\022<\n\020cal_magnetometer\030\032 \001(\0162\"."
  "sensors.ImuData.CalibrationStatus\022-\n\ttim"
  "estamp\030\033 \001(\0132\032.google.protobuf.Timestamp"
  "\022\034\n\006source\030\034 \001(\0162\014.sensors.Imu\"R\n\021Calibr"
  "ationStatus\022\022\n\016NOT_CALIBRATED\020\000\022\017\n\013IN_PR"
  "OGRESS\020\001\022\n\n\006USABLE\020\002\022\014\n\010COMPLETE\020\003\"\"\n\tCh"
  "airMode\022\025\n\ris_drive_mode\030\001 \001(\010\"\037\n\014ChairP"
  "rofile\022\017\n\007profile\030\001 \001(\005\"%\n\014SpeedSetting\022"
  "\025\n\rspeed_setting\030\001 \001(\005\"~\n\014JoystickData\022\024"
  "\n\014forward_back\030\001 \001(\005\022\022\n\nleft_right\030\002 \001(\005"
  "\022\025\n\rjoystick_zone\030\003 \001(\t\022-\n\ttimestamp\030\004 \001"
  "(\0132\032.google.protobuf.Timestamp\"4\n\010Joysti"
  "ck\022\024\n\014forward_back\030\001 \001(\005\022\022\n\nleft_right\030\002"
  " \001(\005\")\n\016BatteryVoltage\022\027\n\017battery_voltag"
  "e\030\001 \001(\001\",\n\016BatteryPercent\022\032\n\022battery_per"
  "centage\030\001 \001(\005\"\254\003\n\007GPSData\022\020\n\010latitude\030\001 "
  "\001(\005\022\021\n\tlongitude\030\002 \001(\005\022\031\n\021heading_of_mot"
  "ion\030\003 \001(\005\022\024\n\014number_of_sv\030\004 \001(\r\022\014\n\004hDOP\030"
  "\005 \001(\r\022\030\n\020height_above_sea\030\006 \001(\005\022\024\n\014groun"
  "d_speed\030\007 \001(\005\022+\n\007quality\030\010 \001(\0162\032.sensors"
  ".GPSData.quality_t\022\014\n\004year\030\t \001(\005\022\r\n\005mont"
  "h\030\n \001(\005\022\013\n\003day\030\013 \001(\005\022\014\n\004hour\030\014 \001(\005\022\016\n\006mi"
  "nute\030\r \001(\005\022\016\n\006second\030\016 \001(\005\"\207\001\n\tquality_t"
  "\022\n\n\006no_fix\020\000\022\026\n\022standard_gps_2d_3d\020\001\022\024\n\020"
  "differential_gps\020\002\022\026\n\022rtk_fixed_solution"
  "\020\004\022\026\n\022rtk_float_solution\020\005\022\020\n\014estimated_"
  "dr\020\006\"\321\001\n\013EncoderData\022\022\n\nleft_angle\030\001 \001(\002"
  "\022\023\n\013right_angle\030\002 \001(\002\022\031\n\021fl_caster_degre"
  "es\030\003 \001(\002\022\031\n\021bl_caster_degrees\030\004 \001(\002\022\031\n\021f"
  "r_caster_degrees\030\005 \001(\002\022\031\n\021br_caster_degr"
  "ees\030\006 \001(\002\022-\n\ttimestamp\030\007 \001(\0132\032.google.pr"
  "otobuf.Timestamp\"\'\n\004Vec3\022\t\n\001x\030\001 \001(\002\022\t\n\001y"
  "\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"2\n\004Vec4\022\t\n\001w\030\001 \001(\002\022\t\n\001"
  "x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"\207\002\n\010AhrsDa"
  "ta\022&\n\017linear_velocity\030\001 \001(\0132\r.sensors.Ve"
  "c3\022*\n\023linear_acceleration\030\002 \001(\0132\r.sensor"
  "s.Vec3\022\'\n\020angular_velocity\030\003 \001(\0132\r.senso"
  "rs.Vec3\022+\n\024angular_acceleration\030\004 \001(\0132\r."
  "sensors.Vec3\022\"\n\013orientation\030\005 \001(\0132\r.sens"
  "ors.Vec3\022-\n\ttimestamp\030\006 \001(\0132\032.google.pro"
  "tobuf.Timestamp\"\036\n\rMatrixElement\022\r\n\005valu"
  "e\030\001 \001(\002\"Z\n\tCalMatrix\022\014\n\004rows\030\001 \001(\005\022\017\n\007co"
  "lumns\030\002 \001(\005\022.\n\016matrix_element\030\003 \003(\0132\026.se"
  "nsors.MatrixElement\"@\n\014IrIntrinsics\022\n\n\002f"
  "x\030\001 \001(\002\022\n\n\002fy\030\002 \001(\002\022\013\n\003ppx\030\003 \001(\002\022\013\n\003ppy\030"
  "\004 \001(\002\"\241\001\n\007IrFrame\022\r\n\005frame\030\001 \001(\014\022\r\n\005widt"
  "h\030\002 \001(\005\022\016\n\006height\030\003 \001(\005\022\016\n\006camera\030\004 \001(\t\022"
  ")\n\nintrinsics\030\005 \001(\0132\025.sensors.IrIntrinsi"
  "cs\022-\n\ttimestamp\030\006 \001(\0132\032.google.protobuf."
  "Timestamp\":\n\016RemoteJsValues\022\024\n\014forward_b"
  "ack\030\001 \001(\005\022\022\n\nleft_right\030\002 \001(\005\",\n\010ModeCtr"
  "l\022 \n\004mode\030\001 \001(\0162\022.sensors.DriveMode\"=\n\010R"
  "ampMode\022\023\n\013ramp_active\030\001 \001(\010\022\034\n\024ramp_app"
  "roach_active\030\002 \001(\010\"m\n\020RampAssistStates\022\021"
  "\n\tis_active\030\001 \001(\010\022\027\n\017approach_active\030\002 \001"
  "(\010\022-\n\ttimestamp\030\003 \001(\0132\032.google.protobuf."
  "Timestamp\"\'\n\014LuciOverride\022\027\n\017override_ac"
  "tive\030\001 \001(\010\"\256\001\n\022ReactionTestResult\0226\n\006res"
  "ult\030\001 \001(\0162&.sensors.ReactionTestResult.T"
  "estResult\022\025\n\rreaction_time\030\002 \001(\002\"I\n\nTest"
  "Result\022\006\n\002OK\020\000\022\022\n\016EARLY_MOVEMENT\020\001\022\013\n\007TI"
  "MEOUT\020\002\022\022\n\016INTERNAL_ERROR\020\003\"3\n\020LandMarkR"
  "otation\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002"
  "\"6\n\023LandMarkTranslation\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030"
  "\002 \001(\002\022\t\n\001z\030\003 \001(\002\"f\n\004Pose\0221\n\013translation\030"
  "\001 \001(\0132\034.sensors.LandMarkTranslation\022+\n\010r"
  "otation\030\002 \001(\0132\031.sensors.LandMarkRotation"
  "\"\207\001\n\014LuciLandmark\022\037\n\004type\030\001 \001(\0162\021.sensor"
  "s.LandMark\022\n\n\002id\030\002 \001(\005\022\033\n\004pose\030\003 \001(\0132\r.s"
  "ensors.Pose\022-\n\ttimestamp\030\004 \001(\0132\032.google."
  "protobuf.Timestamp\"S\n\003PID\022\t\n\001p\030\001 \001(\002\022\t\n\001"
  "i\030\002 \001(\002\022\t\n\001d\030\003 \001(\002\022\014\n\004goal\030\004 \001(\002\022\016\n\006outp"
  "ut\030\005 \001(\002\022\r\n\005error\030\006 \001(\002\"\272\003\n\010RampInfo\022!\n\005"
  "state\030\001 \001(\0162\022.sensors.RampState\022\033\n\023scout"
  "_center_dist_x\030\002 \001(\002\022\031\n\021chair_ramp_dist_"
  "y\030\003 \001(\002\022\027\n\017ramp_trac_js_lr\030\004 \001(\005\022\027\n\017ramp"
  "_trac_js_fb\030\005 \001(\005\022\027\n\017operating_js_lr\030\006 \001"
  "(\005\022\027\n\017operating_js_fb\030\007 \001(\005\022*\n\024approach_"
  "forward_pid\030\010 \001(\0132\014.sensors.PID\022\'\n\021appro"
  "ach_turn_pid\030\t \001(\0132\014.sensors.PID\022,\n\026adju"
  "stment_forward_pid\030\n \001(\0132\014.sensors.PID\022)"
  "\n\023adjustment_turn_pid\030\013 \001(\0132\014.sensors.PI"
  "D\022\022\n\nramp_width\030\014 \001(\002\022-\n\ttimestamp\030\r \001(\013"
  "2\032.google.protobuf.Timestamp*3\n\003Imu\022\013\n\007U"
  "NKNOWN\020\000\022\r\n\tFOOTPLATE\020\001\022\007\n\003MPU\020\002\022\007\n\003ALL\020"
  "\003*2\n\tDriveMode\022\010\n\004USER\020\000\022\013\n\007ENGAGED\020\001\022\016\n"
  "\nAUTONOMOUS\020\002* \n\010LandMark\022\t\n\005ARUCO\020\000\022\t\n\005"
  "OTHER\020\001*)\n\tRampState\022\014\n\010approach\020\000\022\016\n\nad"
  "justment\020\0012\306&\n\007Sensors\022,\n\tTurnOnLed\022\014.se"
  "nsors.Led\032\021.sensors.Response\022-\n\nTurnOffL"
  "ed\022\014.sensors.Led\032\021.sensors.Response\0228\n\020A"
  "ctivateHmiState\022\021.sensors.HmiState\032\021.sen"
  "sors.Response\022:\n\022DeactivateHmiState\022\021.se"
  "nsors.HmiState\032\021.sensors.Response\022E\n\024Set"
  "NavigationScaling\022\032.sensors.NavigationSc"
  "aling\032\021.sensors.Response\022>\n\020TurnOnUltras"
  "onic\022\027.sensors.UltrasonicCtrl\032\021.sensors."
  "Response\022\?\n\021TurnOffUltrasonic\022\027.sensors."
  "UltrasonicCtrl\032\021.sensors.Response\0224\n\013Tur"
  "nOnRadar\022\022.sensors.RadarCtrl\032\021.sensors.R"
  "esponse\0225\n\014TurnOffRadar\022\022.sensors.RadarC"
  "trl\032\021.sensors.Response\022B\n\025CollectImuCali"
  "bration\022\026.google.protobuf.Empty\032\021.sensor"
  "s.Response\022C\n\026DFGetCurrentParameters\022\026.g"
  "oogle.protobuf.Empty\032\021.sensors.Response\022"
  "@\n\023DFGetBufferedEvents\022\026.google.protobuf"
  ".Empty\032\021.sensors.Response\0228\n\013DisableLuci"
  "\022\026.google.protobuf.Empty\032\021.sensors.Respo"
  "nse\0228\n\nJsOverride\022\027.sensors.RemoteJsValu"
  "es\032\021.sensors.Response\0224\n\014SetDriveMode\022\021."
  "sensors.ModeCtrl\032\021.sensors.Response\0223\n\013S"
  "etRampMode\022\021.sensors.RampMode\032\021.sensors."
  "Response\022;\n\017SetLuciOverride\022\025.sensors.Lu"
  "ciOverride\032\021.sensors.Response\022A\n\rExtPres"
  "sCount\022\035.sensors.PressCountStreamData\032\021."
  "sensors.Response\022=\n\tHmiStream\022\026.google.p"
  "rotobuf.Empty\032\026.sensors.HmiStreamData0\001\022"
  "J\n\020PressCountStream\022\025.sensors.PressReque"
  "st\032\035.sensors.PressCountStreamData0\001\022J\n\020U"
  "ltrasonicStream\022\026.google.protobuf.Empty\032"
  "\034.sensors.UltrasonicDistances0\001\022I\n\023RawUl"
  "trasonicStream\022\026.google.protobuf.Empty\032\030"
  ".sensors.UltrasonicCurve0\001\022=\n\013RadarStrea"
  "m\022\026.google.protobuf.Empty\032\024.sensors.Rada"
  "rPoints0\001\022@\n\016RawRadarStream\022\026.google.pro"
  "tobuf.Empty\032\024.sensors.RadarPoints0\001\022A\n\020C"
  "hairSpeedStream\022\026.google.protobuf.Empty\032"
  "\023.sensors.ChairSpeed0\001\0221\n\tImuStream\022\020.se"
  "nsors.ImuCtrl\032\020.sensors.ImuData0\001\022\?\n\017Cha"
  "irModeStream\022\026.google.protobuf.Empty\032\022.s"
  "ensors.ChairMode0\001\022E\n\022ChairProfileStream"
  "\022\026.google.protobuf.Empty\032\025.sensors.Chair"
  "Profile0\001\022E\n\022SpeedSettingStream\022\026.google"
  ".protobuf.Empty\032\025.sensors.SpeedSetting0\001"
  "\022=\n\016JoystickStream\022\026.google.protobuf.Emp"
  "ty\032\021.sensors.Joystick0\001\022H\n\025VirtualJoysti"
  "ckStream\022\026.google.protobuf.Empty\032\025.senso"
  "rs.JoystickData0\001\022I\n\026PhysicalJoystickStr"
  "eam\022\026.google.protobuf.Empty\032\025.sensors.Jo"
  "ystickData0\001\022G\n\024ScaledJoystickStream\022\026.g"
  "oogle.protobuf.Empty\032\025.sensors.JoystickD"
  "ata0\001\022E\n\022LuciJoystickStream\022\026.google.pro"
  "tobuf.Empty\032\025.sensors.JoystickData0\001\0229\n\n"
  "AhrsStream\022\026.google.protobuf.Empty\032\021.sen"
  "sors.AhrsData0\001\022R\n\033RadarClosestObstacles"
  "Stream\022\026.google.protobuf.Empty\032\031.sensors"
  ".ClosestObstacles0\001\022W\n UltrasonicClosest"
  "ObstaclesStream\022\026.google.protobuf.Empty\032"
  "\031.sensors.ClosestObstacles0\001\022\\\n%CameraCo"
  "llisionClosestObstaclesStream\022\026.google.p"
  "rotobuf.Empty\032\031.sensors.ClosestObstacles"
  "0\001\022Q\n\032StepClosestObstaclesStream\022\026.googl"
  "e.protobuf.Empty\032\031.sensors.ClosestObstac"
  "les0\001\022T\n\035DropoffClosestObstaclesStream\022\026"
  ".google.protobuf.Empty\032\031.sensors.Closest"
  "Obstacles0\001\022E\n\rScalingStream\022\026.google.pr"
  "otobuf.Empty\032\032.sensors.NavigationScaling"
  "0\001\022I\n\024BatteryVoltageStream\022\026.google.prot"
  "obuf.Empty\032\027.sensors.BatteryVoltage0\001\022I\n"
  "\024BatteryPercentStream\022\026.google.protobuf."
  "Empty\032\027.sensors.BatteryPercent0\001\022\?\n\014Came"
  "raStream\022\026.google.protobuf.Empty\032\025.senso"
  "rs.CameraPoints0\001\022E\n\020FlatCameraStream\022\026."
  "google.protobuf.Empty\032\027.sensors.CameraPo"
  "ints2D0\001\022F\n\023DropoffCameraStream\022\026.google"
  ".protobuf.Empty\032\025.sensors.CameraPoints0\001"
  "\022H\n\020CaneCameraStream\022\026.google.protobuf.E"
  "mpty\032\032.sensors.ObjectDetection2D0\001\0227\n\tGP"
  "SStream\022\026.google.protobuf.Empty\032\020.sensor"
  "s.GPSData0\001\022E\n\022SeatPressureStream\022\026.goog"
  "le.protobuf.Empty\032\025.sensors.SeatPressure"
  "0\001\022L\n\031DFParametersChangedStream\022\026.google"
  ".protobuf.Empty\032\025.sensors.DFParameters0\001"
  "\022\?\n\rDFEventStream\022\026.google.protobuf.Empt"
  "y\032\024.sensors.DFSeatEvent0\001\0226\n\013SendLogging"
  "\022\024.sensors.LoggingData\032\021.sensors.Respons"
  "e\022\?\n\rLoggingStream\022\026.google.protobuf.Emp"
  "ty\032\024.sensors.LoggingData0\001\022C\n\020StepCamera"
  "Stream\022\026.google.protobuf.Empty\032\025.sensors"
  ".CameraPoints0\001\0226\n\010IrStream\022\026.google.pro"
  "tobuf.Empty\032\020.sensors.IrFrame0\001\022G\n\020RampA"
  "ssistStream\022\026.google.protobuf.Empty\032\031.se"
  "nsors.RampAssistStates0\001\022=\n\nDistStream\022\026"
  ".google.protobuf.Empty\032\025.sensors.Distanc"
  "eData0\001\022C\n\017StartModeStream\022\026.google.prot"
  "obuf.Empty\032\026.sensors.StartModeData0\001\022U\n\032"
  "AudioPlaybackRequestStream\022\026.google.prot"
  "obuf.Empty\032\035.sensors.AudioPlaybackReques"
  "t0\001\022D\n\021GetZoneBoundaries\022\026.google.protob"
  "uf.Empty\032\027.sensors.ZoneBoundaries\022@\n\017Get"
  "BlockedZones\022\026.google.protobuf.Empty\032\025.s"
  "ensors.BlockedZones\022D\n\021GetJoystickRanges"
  "\022\026.google.protobuf.Empty\032\027.sensors.Joyst"
  "ickRanges\022>\n\021EnableRadarFilter\022\024.sensors"
  ".RadarFilter\032\021.sensors.Response\"\000\022\?\n\022Dis"
  "ableRadarFilter\022\024.sensors.RadarFilter\032\021."
  "sensors.Response\"\000\022\?\n\rEncoderStream\022\026.go"
  "ogle.protobuf.Empty\032\024.sensors.EncoderDat"
  "a0\001\022:\n\014GetCalMatrix\022\026.google.protobuf.Em"
  "pty\032\022.sensors.CalMatrix\022C\n\014TestReaction\022"
  "\026.google.protobuf.Empty\032\033.sensors.Reacti"
  "onTestResult\022E\n\022LuciOverrideStream\022\026.goo"
  "gle.protobuf.Empty\032\025.sensors.LuciOverrid"
  "e0\001\022K\n\035LuciLandmarkStreamPassThrough\022\025.s"
  "ensors.LuciLandmark\032\021.sensors.Response(\001"
  "\022C\n\031RampInfoStreamPassThrough\022\021.sensors."
  "RampInfo\032\021.sensors.Response(\001\022E\n\022LuciLan"
  "dmarkStream\022\026.google.protobuf.Empty\032\025.se"
  "nsors.LuciLandmark0\001\022=\n\016RampInfoStream\022\026"
  ".google.protobuf.Empty\032\021.sensors.RampInf"
  "o0\001\022>\n\017DriveModeStream\022\026.google.protobuf"
  ".Empty\032\021.sensors.ModeCtrl0\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sensors_5fgrpc_2fsensors_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensors_5fgrpc_2fsensors_2eproto = {
  false, false, 14675, descriptor_table_protodef_sensors_5fgrpc_2fsensors_2eproto, "sensors_grpc/sensors.proto", 
  &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once, descriptor_table_sensors_5fgrpc_2fsensors_2eproto_deps, 2, 70,
  schemas, file_default_instances, TableStruct_sensors_5fgrpc_2fsensors_2eproto::offsets,
  file_level_metadata_sensors_5fgrpc_2fsensors_2eproto, file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto, file_level_service_descriptors_sensors_5fgrpc_2fsensors_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter() {
  return &descriptor_table_sensors_5fgrpc_2fsensors_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sensors_5fgrpc_2fsensors_2eproto(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
namespace sensors {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioPlaybackRequest_RequestedPlayback_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[0];
}
bool AudioPlaybackRequest_RequestedPlayback_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AudioPlaybackRequest_RequestedPlayback AudioPlaybackRequest::ERROR_DISABLE;
constexpr AudioPlaybackRequest_RequestedPlayback AudioPlaybackRequest::RequestedPlayback_MIN;
constexpr AudioPlaybackRequest_RequestedPlayback AudioPlaybackRequest::RequestedPlayback_MAX;
constexpr int AudioPlaybackRequest::RequestedPlayback_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StartModeData_StartModes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[1];
}
bool StartModeData_StartModes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StartModeData_StartModes StartModeData::UNKNOWN;
constexpr StartModeData_StartModes StartModeData::NORMAL;
constexpr StartModeData_StartModes StartModeData::AUTO;
constexpr StartModeData_StartModes StartModeData::DISABLED;
constexpr StartModeData_StartModes StartModeData::StartModes_MIN;
constexpr StartModeData_StartModes StartModeData::StartModes_MAX;
constexpr int StartModeData::StartModes_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DFSeatEvent_EventGroup_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[2];
}
bool DFSeatEvent_EventGroup_IsValid(int value) {
  switch (value) {
    case 0:
    case 161:
    case 162:
    case 163:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DFSeatEvent_EventGroup DFSeatEvent::UNKNOWN_EVENT_GROUP;
constexpr DFSeatEvent_EventGroup DFSeatEvent::PRESSURE;
constexpr DFSeatEvent_EventGroup DFSeatEvent::WETNESS;
constexpr DFSeatEvent_EventGroup DFSeatEvent::INFLATION;
constexpr DFSeatEvent_EventGroup DFSeatEvent::EventGroup_MIN;
constexpr DFSeatEvent_EventGroup DFSeatEvent::EventGroup_MAX;
constexpr int DFSeatEvent::EventGroup_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DFSeatEvent_EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[3];
}
bool DFSeatEvent_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DFSeatEvent_EventType DFSeatEvent::UNKNOWN_PRESSURE_EVENT_TYPE;
constexpr DFSeatEvent_EventType DFSeatEvent::OUT_OF_SEAT;
constexpr DFSeatEvent_EventType DFSeatEvent::PRESSURE_HIGH;
constexpr DFSeatEvent_EventType DFSeatEvent::PRESSURE_LOW;
constexpr DFSeatEvent_EventType DFSeatEvent::OFFLOAD;
constexpr DFSeatEvent_EventType DFSeatEvent::PRESSURE_OK;
constexpr DFSeatEvent_EventType DFSeatEvent::EventType_MIN;
constexpr DFSeatEvent_EventType DFSeatEvent::EventType_MAX;
constexpr int DFSeatEvent::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Led_Leds_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[4];
}
bool Led_Leds_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Led_Leds Led::UNKNOWN;
constexpr Led_Leds Led::SYSTEM_STATUS;
constexpr Led_Leds Led::SENSOR_OK;
constexpr Led_Leds Led::SENSOR_BLOCKED;
constexpr Led_Leds Led::SENSOR_ERROR;
constexpr Led_Leds Led::WIFI_CONNECTED;
constexpr Led_Leds Led::CELL_CONNECTED;
constexpr Led_Leds Led::BLUETOOTH_CONNECTED;
constexpr Led_Leds Led::Leds_MIN;
constexpr Led_Leds Led::Leds_MAX;
constexpr int Led::Leds_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HmiState_States_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[5];
}
bool HmiState_States_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HmiState_States HmiState::SETUP_APP_PULSE;
constexpr HmiState_States HmiState::REACTION_TEST_WAIT;
constexpr HmiState_States HmiState::REACTION_TEST_GO;
constexpr HmiState_States HmiState::SENSOR_SYSTEM_ERROR;
constexpr HmiState_States HmiState::NOMINAL_OFF;
constexpr HmiState_States HmiState::SENSOR_SYSTEM_OVERRIDE;
constexpr HmiState_States HmiState::LUCI_LOADING;
constexpr HmiState_States HmiState::SENSOR_BLOCKED;
constexpr HmiState_States HmiState::SYSTEM_OK;
constexpr HmiState_States HmiState::STABILITY_WARNING;
constexpr HmiState_States HmiState::STABILITY_DANGER;
constexpr HmiState_States HmiState::STABILITY_TIPPED;
constexpr HmiState_States HmiState::SENDING_LOGS;
constexpr HmiState_States HmiState::WIFI_SENDING;
constexpr HmiState_States HmiState::WIFI_AVAILABLE;
constexpr HmiState_States HmiState::CELL_SENDING;
constexpr HmiState_States HmiState::CELL_AVAILABLE;
constexpr HmiState_States HmiState::USER_KEY_LOW;
constexpr HmiState_States HmiState::USER_KEY_PRESENT;
constexpr HmiState_States HmiState::NO_ACTION;
constexpr HmiState_States HmiState::BUTTON_PRESSED;
constexpr HmiState_States HmiState::UPDATE_IN_PROGRESS;
constexpr HmiState_States HmiState::ALL_OFF;
constexpr HmiState_States HmiState::FLASH_LEDS;
constexpr HmiState_States HmiState::CHASE_LEDS;
constexpr HmiState_States HmiState::TEST_USER_KEY;
constexpr HmiState_States HmiState::TEST_WIFI;
constexpr HmiState_States HmiState::TEST_CELL;
constexpr HmiState_States HmiState::TEST_SENSOR_OK;
constexpr HmiState_States HmiState::TEST_SENSOR_WARNING;
constexpr HmiState_States HmiState::TEST_SENSOR_ERROR;
constexpr HmiState_States HmiState::TEST_LUCI_BUTTON;
constexpr HmiState_States HmiState::States_MIN;
constexpr HmiState_States HmiState::States_MAX;
constexpr int HmiState::States_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HmiStreamData_ButtonState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[6];
}
bool HmiStreamData_ButtonState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HmiStreamData_ButtonState HmiStreamData::PRESSED;
constexpr HmiStreamData_ButtonState HmiStreamData::RELEASED;
constexpr HmiStreamData_ButtonState HmiStreamData::ButtonState_MIN;
constexpr HmiStreamData_ButtonState HmiStreamData::ButtonState_MAX;
constexpr int HmiStreamData::ButtonState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UltrasonicCtrl_Board_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[7];
}
bool UltrasonicCtrl_Board_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UltrasonicCtrl_Board UltrasonicCtrl::UNKNOWN;
constexpr UltrasonicCtrl_Board UltrasonicCtrl::MPU;
constexpr UltrasonicCtrl_Board UltrasonicCtrl::IO_B_LEFT;
constexpr UltrasonicCtrl_Board UltrasonicCtrl::IO_B_RIGHT;
constexpr UltrasonicCtrl_Board UltrasonicCtrl::Board_MIN;
constexpr UltrasonicCtrl_Board UltrasonicCtrl::Board_MAX;
constexpr int UltrasonicCtrl::Board_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UltrasonicDistance_Board_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[8];
}
bool UltrasonicDistance_Board_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UltrasonicDistance_Board UltrasonicDistance::UNKNOWN;
constexpr UltrasonicDistance_Board UltrasonicDistance::MPU;
constexpr UltrasonicDistance_Board UltrasonicDistance::IO_B_LEFT;
constexpr UltrasonicDistance_Board UltrasonicDistance::IO_B_RIGHT;
constexpr UltrasonicDistance_Board UltrasonicDistance::Board_MIN;
constexpr UltrasonicDistance_Board UltrasonicDistance::Board_MAX;
constexpr int UltrasonicDistance::Board_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UltrasonicCurve_Board_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[9];
}
bool UltrasonicCurve_Board_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UltrasonicCurve_Board UltrasonicCurve::UNKNOWN;
constexpr UltrasonicCurve_Board UltrasonicCurve::MPU;
constexpr UltrasonicCurve_Board UltrasonicCurve::IO_B_LEFT;
constexpr UltrasonicCurve_Board UltrasonicCurve::IO_B_RIGHT;
constexpr UltrasonicCurve_Board UltrasonicCurve::Board_MIN;
constexpr UltrasonicCurve_Board UltrasonicCurve::Board_MAX;
constexpr int UltrasonicCurve::Board_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadarFilter_Filter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[10];
}
bool RadarFilter_Filter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RadarFilter_Filter RadarFilter::RANGE_CHOP;
constexpr RadarFilter_Filter RadarFilter::ORIGIN;
constexpr RadarFilter_Filter RadarFilter::FOV;
constexpr RadarFilter_Filter RadarFilter::PEAK;
constexpr RadarFilter_Filter RadarFilter::STICKY;
constexpr RadarFilter_Filter RadarFilter::EXTRA_STICKY;
constexpr RadarFilter_Filter RadarFilter::TRANSFORMS;
constexpr RadarFilter_Filter RadarFilter::ADAM;
constexpr RadarFilter_Filter RadarFilter::Filter_MIN;
constexpr RadarFilter_Filter RadarFilter::Filter_MAX;
constexpr int RadarFilter::Filter_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadarCtrl_Radar_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[11];
}
bool RadarCtrl_Radar_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RadarCtrl_Radar RadarCtrl::UNKNOWN;
constexpr RadarCtrl_Radar RadarCtrl::LEFT;
constexpr RadarCtrl_Radar RadarCtrl::RIGHT;
constexpr RadarCtrl_Radar RadarCtrl::FRONT;
constexpr RadarCtrl_Radar RadarCtrl::Radar_MIN;
constexpr RadarCtrl_Radar RadarCtrl::Radar_MAX;
constexpr int RadarCtrl::Radar_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadarPoints_Radar_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[12];
}
bool RadarPoints_Radar_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RadarPoints_Radar RadarPoints::UNKNOWN;
constexpr RadarPoints_Radar RadarPoints::LEFT;
constexpr RadarPoints_Radar RadarPoints::RIGHT;
constexpr RadarPoints_Radar RadarPoints::FRONT;
constexpr RadarPoints_Radar RadarPoints::Radar_MIN;
constexpr RadarPoints_Radar RadarPoints::Radar_MAX;
constexpr int RadarPoints::Radar_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImuData_CalibrationStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[13];
}
bool ImuData_CalibrationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImuData_CalibrationStatus ImuData::NOT_CALIBRATED;
constexpr ImuData_CalibrationStatus ImuData::IN_PROGRESS;
constexpr ImuData_CalibrationStatus ImuData::USABLE;
constexpr ImuData_CalibrationStatus ImuData::COMPLETE;
constexpr ImuData_CalibrationStatus ImuData::CalibrationStatus_MIN;
constexpr ImuData_CalibrationStatus ImuData::CalibrationStatus_MAX;
constexpr int ImuData::CalibrationStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GPSData_quality_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[14];
}
bool GPSData_quality_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GPSData_quality_t GPSData::no_fix;
constexpr GPSData_quality_t GPSData::standard_gps_2d_3d;
constexpr GPSData_quality_t GPSData::differential_gps;
constexpr GPSData_quality_t GPSData::rtk_fixed_solution;
constexpr GPSData_quality_t GPSData::rtk_float_solution;
constexpr GPSData_quality_t GPSData::estimated_dr;
constexpr GPSData_quality_t GPSData::quality_t_MIN;
constexpr GPSData_quality_t GPSData::quality_t_MAX;
constexpr int GPSData::quality_t_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReactionTestResult_TestResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[15];
}
bool ReactionTestResult_TestResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReactionTestResult_TestResult ReactionTestResult::OK;
constexpr ReactionTestResult_TestResult ReactionTestResult::EARLY_MOVEMENT;
constexpr ReactionTestResult_TestResult ReactionTestResult::TIMEOUT;
constexpr ReactionTestResult_TestResult ReactionTestResult::INTERNAL_ERROR;
constexpr ReactionTestResult_TestResult ReactionTestResult::TestResult_MIN;
constexpr ReactionTestResult_TestResult ReactionTestResult::TestResult_MAX;
constexpr int ReactionTestResult::TestResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Imu_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[16];
}
bool Imu_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DriveMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[17];
}
bool DriveMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LandMark_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[18];
}
bool LandMark_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RampState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensors_5fgrpc_2fsensors_2eproto);
  return file_level_enum_descriptors_sensors_5fgrpc_2fsensors_2eproto[19];
}
bool RampState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AudioPlaybackRequest::_Internal {
 public:
};

AudioPlaybackRequest::AudioPlaybackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.AudioPlaybackRequest)
}
AudioPlaybackRequest::AudioPlaybackRequest(const AudioPlaybackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requested_playback_ = from.requested_playback_;
  // @@protoc_insertion_point(copy_constructor:sensors.AudioPlaybackRequest)
}

void AudioPlaybackRequest::SharedCtor() {
requested_playback_ = 0;
}

AudioPlaybackRequest::~AudioPlaybackRequest() {
  // @@protoc_insertion_point(destructor:sensors.AudioPlaybackRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioPlaybackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AudioPlaybackRequest::ArenaDtor(void* object) {
  AudioPlaybackRequest* _this = reinterpret_cast< AudioPlaybackRequest* >(object);
  (void)_this;
}
void AudioPlaybackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioPlaybackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioPlaybackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.AudioPlaybackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requested_playback_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioPlaybackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.AudioPlaybackRequest.RequestedPlayback requested_playback = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_requested_playback(static_cast<::sensors::AudioPlaybackRequest_RequestedPlayback>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioPlaybackRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.AudioPlaybackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.AudioPlaybackRequest.RequestedPlayback requested_playback = 1;
  if (this->requested_playback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_requested_playback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.AudioPlaybackRequest)
  return target;
}

size_t AudioPlaybackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.AudioPlaybackRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.AudioPlaybackRequest.RequestedPlayback requested_playback = 1;
  if (this->requested_playback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requested_playback());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioPlaybackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.AudioPlaybackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioPlaybackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioPlaybackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.AudioPlaybackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.AudioPlaybackRequest)
    MergeFrom(*source);
  }
}

void AudioPlaybackRequest::MergeFrom(const AudioPlaybackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.AudioPlaybackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requested_playback() != 0) {
    _internal_set_requested_playback(from._internal_requested_playback());
  }
}

void AudioPlaybackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.AudioPlaybackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioPlaybackRequest::CopyFrom(const AudioPlaybackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.AudioPlaybackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioPlaybackRequest::IsInitialized() const {
  return true;
}

void AudioPlaybackRequest::InternalSwap(AudioPlaybackRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(requested_playback_, other->requested_playback_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioPlaybackRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[0]);
}

// ===================================================================

class PressRequest::_Internal {
 public:
};

PressRequest::PressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.PressRequest)
}
PressRequest::PressRequest(const PressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ramp_assist_ = from.ramp_assist_;
  // @@protoc_insertion_point(copy_constructor:sensors.PressRequest)
}

void PressRequest::SharedCtor() {
ramp_assist_ = false;
}

PressRequest::~PressRequest() {
  // @@protoc_insertion_point(destructor:sensors.PressRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PressRequest::ArenaDtor(void* object) {
  PressRequest* _this = reinterpret_cast< PressRequest* >(object);
  (void)_this;
}
void PressRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.PressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ramp_assist_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PressRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ramp_assist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ramp_assist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PressRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.PressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ramp_assist = 1;
  if (this->ramp_assist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ramp_assist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.PressRequest)
  return target;
}

size_t PressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.PressRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ramp_assist = 1;
  if (this->ramp_assist() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PressRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.PressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PressRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PressRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.PressRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.PressRequest)
    MergeFrom(*source);
  }
}

void PressRequest::MergeFrom(const PressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.PressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ramp_assist() != 0) {
    _internal_set_ramp_assist(from._internal_ramp_assist());
  }
}

void PressRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.PressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PressRequest::CopyFrom(const PressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.PressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PressRequest::IsInitialized() const {
  return true;
}

void PressRequest::InternalSwap(PressRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ramp_assist_, other->ramp_assist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PressRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[1]);
}

// ===================================================================

class ZoneBoundary::_Internal {
 public:
};

ZoneBoundary::ZoneBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  polygon_(arena),
  critical_point_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.ZoneBoundary)
}
ZoneBoundary::ZoneBoundary(const ZoneBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      polygon_(from.polygon_),
      critical_point_(from.critical_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sensors.ZoneBoundary)
}

void ZoneBoundary::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ZoneBoundary::~ZoneBoundary() {
  // @@protoc_insertion_point(destructor:sensors.ZoneBoundary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZoneBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ZoneBoundary::ArenaDtor(void* object) {
  ZoneBoundary* _this = reinterpret_cast< ZoneBoundary* >(object);
  (void)_this;
}
void ZoneBoundary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZoneBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZoneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ZoneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_.Clear();
  critical_point_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZoneBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.Point2D polygon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .sensors.Point2D critical_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_critical_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensors.ZoneBoundary.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZoneBoundary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ZoneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.Point2D polygon = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygon_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_polygon(i), target, stream);
  }

  // repeated .sensors.Point2D critical_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_critical_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_critical_point(i), target, stream);
  }

  // string name = 3;
  if (!this->name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors.ZoneBoundary.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ZoneBoundary)
  return target;
}

size_t ZoneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ZoneBoundary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.Point2D polygon = 1;
  total_size += 1UL * this->_internal_polygon_size();
  for (const auto& msg : this->polygon_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sensors.Point2D critical_point = 2;
  total_size += 1UL * this->_internal_critical_point_size();
  for (const auto& msg : this->critical_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 3;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZoneBoundary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.ZoneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const ZoneBoundary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZoneBoundary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.ZoneBoundary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.ZoneBoundary)
    MergeFrom(*source);
  }
}

void ZoneBoundary::MergeFrom(const ZoneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ZoneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_.MergeFrom(from.polygon_);
  critical_point_.MergeFrom(from.critical_point_);
  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
}

void ZoneBoundary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.ZoneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneBoundary::CopyFrom(const ZoneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ZoneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneBoundary::IsInitialized() const {
  return true;
}

void ZoneBoundary::InternalSwap(ZoneBoundary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  polygon_.InternalSwap(&other->polygon_);
  critical_point_.InternalSwap(&other->critical_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ZoneBoundary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[2]);
}

// ===================================================================

class ZoneBoundaries::_Internal {
 public:
};

ZoneBoundaries::ZoneBoundaries(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  zone_boundary_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.ZoneBoundaries)
}
ZoneBoundaries::ZoneBoundaries(const ZoneBoundaries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      zone_boundary_(from.zone_boundary_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensors.ZoneBoundaries)
}

void ZoneBoundaries::SharedCtor() {
}

ZoneBoundaries::~ZoneBoundaries() {
  // @@protoc_insertion_point(destructor:sensors.ZoneBoundaries)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZoneBoundaries::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ZoneBoundaries::ArenaDtor(void* object) {
  ZoneBoundaries* _this = reinterpret_cast< ZoneBoundaries* >(object);
  (void)_this;
}
void ZoneBoundaries::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZoneBoundaries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZoneBoundaries::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ZoneBoundaries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  zone_boundary_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZoneBoundaries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.ZoneBoundary zone_boundary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_zone_boundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZoneBoundaries::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ZoneBoundaries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.ZoneBoundary zone_boundary = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_zone_boundary_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_zone_boundary(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ZoneBoundaries)
  return target;
}

size_t ZoneBoundaries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ZoneBoundaries)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.ZoneBoundary zone_boundary = 1;
  total_size += 1UL * this->_internal_zone_boundary_size();
  for (const auto& msg : this->zone_boundary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZoneBoundaries::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.ZoneBoundaries)
  GOOGLE_DCHECK_NE(&from, this);
  const ZoneBoundaries* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZoneBoundaries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.ZoneBoundaries)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.ZoneBoundaries)
    MergeFrom(*source);
  }
}

void ZoneBoundaries::MergeFrom(const ZoneBoundaries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ZoneBoundaries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  zone_boundary_.MergeFrom(from.zone_boundary_);
}

void ZoneBoundaries::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.ZoneBoundaries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneBoundaries::CopyFrom(const ZoneBoundaries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ZoneBoundaries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneBoundaries::IsInitialized() const {
  return true;
}

void ZoneBoundaries::InternalSwap(ZoneBoundaries* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  zone_boundary_.InternalSwap(&other->zone_boundary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZoneBoundaries::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[3]);
}

// ===================================================================

class BlockedZone::_Internal {
 public:
};

BlockedZone::BlockedZone(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.BlockedZone)
}
BlockedZone::BlockedZone(const BlockedZone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sensor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sensor().empty()) {
    sensor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sensor(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sensors.BlockedZone)
}

void BlockedZone::SharedCtor() {
sensor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BlockedZone::~BlockedZone() {
  // @@protoc_insertion_point(destructor:sensors.BlockedZone)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockedZone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sensor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockedZone::ArenaDtor(void* object) {
  BlockedZone* _this = reinterpret_cast< BlockedZone* >(object);
  (void)_this;
}
void BlockedZone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockedZone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockedZone::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.BlockedZone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  sensor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockedZone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.Point2D points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string sensor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sensor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensors.BlockedZone.sensor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockedZone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.BlockedZone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.Point2D points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  // string sensor = 2;
  if (!this->sensor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sensor().data(), static_cast<int>(this->_internal_sensor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors.BlockedZone.sensor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sensor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.BlockedZone)
  return target;
}

size_t BlockedZone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.BlockedZone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.Point2D points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sensor = 2;
  if (!this->sensor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockedZone::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.BlockedZone)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockedZone* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockedZone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.BlockedZone)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.BlockedZone)
    MergeFrom(*source);
  }
}

void BlockedZone::MergeFrom(const BlockedZone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.BlockedZone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (!from.sensor().empty()) {
    _internal_set_sensor(from._internal_sensor());
  }
}

void BlockedZone::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.BlockedZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockedZone::CopyFrom(const BlockedZone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.BlockedZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockedZone::IsInitialized() const {
  return true;
}

void BlockedZone::InternalSwap(BlockedZone* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sensor_, GetArenaForAllocation(),
      &other->sensor_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockedZone::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[4]);
}

// ===================================================================

class BlockedZones::_Internal {
 public:
};

BlockedZones::BlockedZones(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blocked_zones_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.BlockedZones)
}
BlockedZones::BlockedZones(const BlockedZones& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blocked_zones_(from.blocked_zones_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensors.BlockedZones)
}

void BlockedZones::SharedCtor() {
}

BlockedZones::~BlockedZones() {
  // @@protoc_insertion_point(destructor:sensors.BlockedZones)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockedZones::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockedZones::ArenaDtor(void* object) {
  BlockedZones* _this = reinterpret_cast< BlockedZones* >(object);
  (void)_this;
}
void BlockedZones::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockedZones::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockedZones::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.BlockedZones)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocked_zones_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockedZones::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.BlockedZone blocked_zones = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocked_zones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockedZones::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.BlockedZones)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.BlockedZone blocked_zones = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocked_zones_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blocked_zones(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.BlockedZones)
  return target;
}

size_t BlockedZones::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.BlockedZones)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.BlockedZone blocked_zones = 1;
  total_size += 1UL * this->_internal_blocked_zones_size();
  for (const auto& msg : this->blocked_zones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockedZones::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.BlockedZones)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockedZones* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockedZones>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.BlockedZones)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.BlockedZones)
    MergeFrom(*source);
  }
}

void BlockedZones::MergeFrom(const BlockedZones& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.BlockedZones)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocked_zones_.MergeFrom(from.blocked_zones_);
}

void BlockedZones::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.BlockedZones)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockedZones::CopyFrom(const BlockedZones& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.BlockedZones)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockedZones::IsInitialized() const {
  return true;
}

void BlockedZones::InternalSwap(BlockedZones* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  blocked_zones_.InternalSwap(&other->blocked_zones_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockedZones::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[5]);
}

// ===================================================================

class JoystickRange::_Internal {
 public:
};

JoystickRange::JoystickRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.JoystickRange)
}
JoystickRange::JoystickRange(const JoystickRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&begin_, &from.begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&begin_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:sensors.JoystickRange)
}

void JoystickRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&begin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&begin_)) + sizeof(end_));
}

JoystickRange::~JoystickRange() {
  // @@protoc_insertion_point(destructor:sensors.JoystickRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoystickRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JoystickRange::ArenaDtor(void* object) {
  JoystickRange* _this = reinterpret_cast< JoystickRange* >(object);
  (void)_this;
}
void JoystickRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoystickRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoystickRange::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.JoystickRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&begin_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoystickRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          begin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoystickRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.JoystickRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float begin = 1;
  if (!(this->begin() <= 0 && this->begin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_begin(), target);
  }

  // float end = 2;
  if (!(this->end() <= 0 && this->end() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.JoystickRange)
  return target;
}

size_t JoystickRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.JoystickRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float begin = 1;
  if (!(this->begin() <= 0 && this->begin() >= 0)) {
    total_size += 1 + 4;
  }

  // float end = 2;
  if (!(this->end() <= 0 && this->end() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoystickRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.JoystickRange)
  GOOGLE_DCHECK_NE(&from, this);
  const JoystickRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoystickRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.JoystickRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.JoystickRange)
    MergeFrom(*source);
  }
}

void JoystickRange::MergeFrom(const JoystickRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.JoystickRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.begin() <= 0 && from.begin() >= 0)) {
    _internal_set_begin(from._internal_begin());
  }
  if (!(from.end() <= 0 && from.end() >= 0)) {
    _internal_set_end(from._internal_end());
  }
}

void JoystickRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.JoystickRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoystickRange::CopyFrom(const JoystickRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.JoystickRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoystickRange::IsInitialized() const {
  return true;
}

void JoystickRange::InternalSwap(JoystickRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoystickRange, end_)
      + sizeof(JoystickRange::end_)
      - PROTOBUF_FIELD_OFFSET(JoystickRange, begin_)>(
          reinterpret_cast<char*>(&begin_),
          reinterpret_cast<char*>(&other->begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoystickRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[6]);
}

// ===================================================================

class JoystickRanges::_Internal {
 public:
};

JoystickRanges::JoystickRanges(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  joystick_ranges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.JoystickRanges)
}
JoystickRanges::JoystickRanges(const JoystickRanges& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      joystick_ranges_(from.joystick_ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensors.JoystickRanges)
}

void JoystickRanges::SharedCtor() {
}

JoystickRanges::~JoystickRanges() {
  // @@protoc_insertion_point(destructor:sensors.JoystickRanges)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoystickRanges::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JoystickRanges::ArenaDtor(void* object) {
  JoystickRanges* _this = reinterpret_cast< JoystickRanges* >(object);
  (void)_this;
}
void JoystickRanges::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoystickRanges::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoystickRanges::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.JoystickRanges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joystick_ranges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoystickRanges::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.JoystickRange joystick_ranges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joystick_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoystickRanges::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.JoystickRanges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.JoystickRange joystick_ranges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joystick_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_joystick_ranges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.JoystickRanges)
  return target;
}

size_t JoystickRanges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.JoystickRanges)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.JoystickRange joystick_ranges = 1;
  total_size += 1UL * this->_internal_joystick_ranges_size();
  for (const auto& msg : this->joystick_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoystickRanges::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.JoystickRanges)
  GOOGLE_DCHECK_NE(&from, this);
  const JoystickRanges* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoystickRanges>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.JoystickRanges)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.JoystickRanges)
    MergeFrom(*source);
  }
}

void JoystickRanges::MergeFrom(const JoystickRanges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.JoystickRanges)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joystick_ranges_.MergeFrom(from.joystick_ranges_);
}

void JoystickRanges::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.JoystickRanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoystickRanges::CopyFrom(const JoystickRanges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.JoystickRanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoystickRanges::IsInitialized() const {
  return true;
}

void JoystickRanges::InternalSwap(JoystickRanges* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  joystick_ranges_.InternalSwap(&other->joystick_ranges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoystickRanges::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[7]);
}

// ===================================================================

class StartModeData::_Internal {
 public:
};

StartModeData::StartModeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  missing_devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.StartModeData)
}
StartModeData::StartModeData(const StartModeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      missing_devices_(from.missing_devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:sensors.StartModeData)
}

void StartModeData::SharedCtor() {
mode_ = 0;
}

StartModeData::~StartModeData() {
  // @@protoc_insertion_point(destructor:sensors.StartModeData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartModeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartModeData::ArenaDtor(void* object) {
  StartModeData* _this = reinterpret_cast< StartModeData* >(object);
  (void)_this;
}
void StartModeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartModeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartModeData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.StartModeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  missing_devices_.Clear();
  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartModeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.StartModeData.StartModes mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::sensors::StartModeData_StartModes>(val));
        } else goto handle_unusual;
        continue;
      // repeated string missing_devices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_missing_devices();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensors.StartModeData.missing_devices"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartModeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.StartModeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.StartModeData.StartModes mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // repeated string missing_devices = 2;
  for (int i = 0, n = this->_internal_missing_devices_size(); i < n; i++) {
    const auto& s = this->_internal_missing_devices(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors.StartModeData.missing_devices");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.StartModeData)
  return target;
}

size_t StartModeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.StartModeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string missing_devices = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(missing_devices_.size());
  for (int i = 0, n = missing_devices_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      missing_devices_.Get(i));
  }

  // .sensors.StartModeData.StartModes mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartModeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.StartModeData)
  GOOGLE_DCHECK_NE(&from, this);
  const StartModeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartModeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.StartModeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.StartModeData)
    MergeFrom(*source);
  }
}

void StartModeData::MergeFrom(const StartModeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.StartModeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  missing_devices_.MergeFrom(from.missing_devices_);
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void StartModeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.StartModeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartModeData::CopyFrom(const StartModeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.StartModeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartModeData::IsInitialized() const {
  return true;
}

void StartModeData::InternalSwap(StartModeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  missing_devices_.InternalSwap(&other->missing_devices_);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartModeData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[8]);
}

// ===================================================================

class Response::_Internal {
 public:
};

Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reply().empty()) {
    reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reply(), 
      GetArenaForAllocation());
  }
  return_code_ = from.return_code_;
  // @@protoc_insertion_point(copy_constructor:sensors.Response)
}

void Response::SharedCtor() {
reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
return_code_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:sensors.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reply_.ClearToEmpty();
  return_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensors.Response.reply"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 return_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          return_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reply = 1;
  if (!this->reply().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply().data(), static_cast<int>(this->_internal_reply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors.Response.reply");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reply(), target);
  }

  // int32 return_code = 2;
  if (this->return_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_return_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reply = 1;
  if (!this->reply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply());
  }

  // int32 return_code = 2;
  if (this->return_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_return_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.reply().empty()) {
    _internal_set_reply(from._internal_reply());
  }
  if (from.return_code() != 0) {
    _internal_set_return_code(from._internal_return_code());
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reply_, GetArenaForAllocation(),
      &other->reply_, other->GetArenaForAllocation()
  );
  swap(return_code_, other->return_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[9]);
}

// ===================================================================

class DFParameters::_Internal {
 public:
};

DFParameters::DFParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.DFParameters)
}
DFParameters::DFParameters(const DFParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&df_timestamp_, &from.df_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&offload_pressure_) -
    reinterpret_cast<char*>(&df_timestamp_)) + sizeof(offload_pressure_));
  // @@protoc_insertion_point(copy_constructor:sensors.DFParameters)
}

void DFParameters::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&df_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offload_pressure_) -
    reinterpret_cast<char*>(&df_timestamp_)) + sizeof(offload_pressure_));
}

DFParameters::~DFParameters() {
  // @@protoc_insertion_point(destructor:sensors.DFParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DFParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DFParameters::ArenaDtor(void* object) {
  DFParameters* _this = reinterpret_cast< DFParameters* >(object);
  (void)_this;
}
void DFParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DFParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DFParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.DFParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&df_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offload_pressure_) -
      reinterpret_cast<char*>(&df_timestamp_)) + sizeof(offload_pressure_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DFParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 df_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          df_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float target_pressure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          target_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float high_pressure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          high_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float low_pressure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          low_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float in_seat_pressure = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          in_seat_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float offload_pressure = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          offload_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DFParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.DFParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 df_timestamp = 1;
  if (this->df_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_df_timestamp(), target);
  }

  // float target_pressure = 2;
  if (!(this->target_pressure() <= 0 && this->target_pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_target_pressure(), target);
  }

  // float high_pressure = 3;
  if (!(this->high_pressure() <= 0 && this->high_pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_high_pressure(), target);
  }

  // float low_pressure = 4;
  if (!(this->low_pressure() <= 0 && this->low_pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_low_pressure(), target);
  }

  // float in_seat_pressure = 5;
  if (!(this->in_seat_pressure() <= 0 && this->in_seat_pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_in_seat_pressure(), target);
  }

  // float offload_pressure = 6;
  if (!(this->offload_pressure() <= 0 && this->offload_pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_offload_pressure(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.DFParameters)
  return target;
}

size_t DFParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.DFParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 df_timestamp = 1;
  if (this->df_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_df_timestamp());
  }

  // float target_pressure = 2;
  if (!(this->target_pressure() <= 0 && this->target_pressure() >= 0)) {
    total_size += 1 + 4;
  }

  // float high_pressure = 3;
  if (!(this->high_pressure() <= 0 && this->high_pressure() >= 0)) {
    total_size += 1 + 4;
  }

  // float low_pressure = 4;
  if (!(this->low_pressure() <= 0 && this->low_pressure() >= 0)) {
    total_size += 1 + 4;
  }

  // float in_seat_pressure = 5;
  if (!(this->in_seat_pressure() <= 0 && this->in_seat_pressure() >= 0)) {
    total_size += 1 + 4;
  }

  // float offload_pressure = 6;
  if (!(this->offload_pressure() <= 0 && this->offload_pressure() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DFParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.DFParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const DFParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DFParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.DFParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.DFParameters)
    MergeFrom(*source);
  }
}

void DFParameters::MergeFrom(const DFParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.DFParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.df_timestamp() != 0) {
    _internal_set_df_timestamp(from._internal_df_timestamp());
  }
  if (!(from.target_pressure() <= 0 && from.target_pressure() >= 0)) {
    _internal_set_target_pressure(from._internal_target_pressure());
  }
  if (!(from.high_pressure() <= 0 && from.high_pressure() >= 0)) {
    _internal_set_high_pressure(from._internal_high_pressure());
  }
  if (!(from.low_pressure() <= 0 && from.low_pressure() >= 0)) {
    _internal_set_low_pressure(from._internal_low_pressure());
  }
  if (!(from.in_seat_pressure() <= 0 && from.in_seat_pressure() >= 0)) {
    _internal_set_in_seat_pressure(from._internal_in_seat_pressure());
  }
  if (!(from.offload_pressure() <= 0 && from.offload_pressure() >= 0)) {
    _internal_set_offload_pressure(from._internal_offload_pressure());
  }
}

void DFParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.DFParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DFParameters::CopyFrom(const DFParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.DFParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DFParameters::IsInitialized() const {
  return true;
}

void DFParameters::InternalSwap(DFParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DFParameters, offload_pressure_)
      + sizeof(DFParameters::offload_pressure_)
      - PROTOBUF_FIELD_OFFSET(DFParameters, df_timestamp_)>(
          reinterpret_cast<char*>(&df_timestamp_),
          reinterpret_cast<char*>(&other->df_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DFParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[10]);
}

// ===================================================================

class DFSeatEvent::_Internal {
 public:
};

DFSeatEvent::DFSeatEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.DFSeatEvent)
}
DFSeatEvent::DFSeatEvent(const DFSeatEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_timestamp_, &from.current_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_type_) -
    reinterpret_cast<char*>(&current_timestamp_)) + sizeof(event_type_));
  // @@protoc_insertion_point(copy_constructor:sensors.DFSeatEvent)
}

void DFSeatEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_type_) -
    reinterpret_cast<char*>(&current_timestamp_)) + sizeof(event_type_));
}

DFSeatEvent::~DFSeatEvent() {
  // @@protoc_insertion_point(destructor:sensors.DFSeatEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DFSeatEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DFSeatEvent::ArenaDtor(void* object) {
  DFSeatEvent* _this = reinterpret_cast< DFSeatEvent* >(object);
  (void)_this;
}
void DFSeatEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DFSeatEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DFSeatEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.DFSeatEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&current_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_type_) -
      reinterpret_cast<char*>(&current_timestamp_)) + sizeof(event_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DFSeatEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 current_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          current_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 event_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          event_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.DFSeatEvent.EventGroup group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_group(static_cast<::sensors::DFSeatEvent_EventGroup>(val));
        } else goto handle_unusual;
        continue;
      // .sensors.DFSeatEvent.EventType event_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::sensors::DFSeatEvent_EventType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DFSeatEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.DFSeatEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current_timestamp = 1;
  if (this->current_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_current_timestamp(), target);
  }

  // uint32 event_timestamp = 2;
  if (this->event_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_timestamp(), target);
  }

  // .sensors.DFSeatEvent.EventGroup group = 3;
  if (this->group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_group(), target);
  }

  // .sensors.DFSeatEvent.EventType event_type = 4;
  if (this->event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_event_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.DFSeatEvent)
  return target;
}

size_t DFSeatEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.DFSeatEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 current_timestamp = 1;
  if (this->current_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_timestamp());
  }

  // uint32 event_timestamp = 2;
  if (this->event_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_timestamp());
  }

  // .sensors.DFSeatEvent.EventGroup group = 3;
  if (this->group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_group());
  }

  // .sensors.DFSeatEvent.EventType event_type = 4;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DFSeatEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.DFSeatEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const DFSeatEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DFSeatEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.DFSeatEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.DFSeatEvent)
    MergeFrom(*source);
  }
}

void DFSeatEvent::MergeFrom(const DFSeatEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.DFSeatEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.current_timestamp() != 0) {
    _internal_set_current_timestamp(from._internal_current_timestamp());
  }
  if (from.event_timestamp() != 0) {
    _internal_set_event_timestamp(from._internal_event_timestamp());
  }
  if (from.group() != 0) {
    _internal_set_group(from._internal_group());
  }
  if (from.event_type() != 0) {
    _internal_set_event_type(from._internal_event_type());
  }
}

void DFSeatEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.DFSeatEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DFSeatEvent::CopyFrom(const DFSeatEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.DFSeatEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DFSeatEvent::IsInitialized() const {
  return true;
}

void DFSeatEvent::InternalSwap(DFSeatEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DFSeatEvent, event_type_)
      + sizeof(DFSeatEvent::event_type_)
      - PROTOBUF_FIELD_OFFSET(DFSeatEvent, current_timestamp_)>(
          reinterpret_cast<char*>(&current_timestamp_),
          reinterpret_cast<char*>(&other->current_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DFSeatEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[11]);
}

// ===================================================================

class DistanceData::_Internal {
 public:
};

DistanceData::DistanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.DistanceData)
}
DistanceData::DistanceData(const DistanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:sensors.DistanceData)
}

void DistanceData::SharedCtor() {
distance_ = 0;
}

DistanceData::~DistanceData() {
  // @@protoc_insertion_point(destructor:sensors.DistanceData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DistanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DistanceData::ArenaDtor(void* object) {
  DistanceData* _this = reinterpret_cast< DistanceData* >(object);
  (void)_this;
}
void DistanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DistanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DistanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.DistanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DistanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.DistanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 distance = 1;
  if (this->distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.DistanceData)
  return target;
}

size_t DistanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.DistanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 distance = 1;
  if (this->distance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_distance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.DistanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const DistanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DistanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.DistanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.DistanceData)
    MergeFrom(*source);
  }
}

void DistanceData::MergeFrom(const DistanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.DistanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.distance() != 0) {
    _internal_set_distance(from._internal_distance());
  }
}

void DistanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.DistanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistanceData::CopyFrom(const DistanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.DistanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceData::IsInitialized() const {
  return true;
}

void DistanceData::InternalSwap(DistanceData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DistanceData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[12]);
}

// ===================================================================

class SeatPressure::_Internal {
 public:
};

SeatPressure::SeatPressure(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.SeatPressure)
}
SeatPressure::SeatPressure(const SeatPressure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pressure_ = from.pressure_;
  // @@protoc_insertion_point(copy_constructor:sensors.SeatPressure)
}

void SeatPressure::SharedCtor() {
pressure_ = 0;
}

SeatPressure::~SeatPressure() {
  // @@protoc_insertion_point(destructor:sensors.SeatPressure)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SeatPressure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SeatPressure::ArenaDtor(void* object) {
  SeatPressure* _this = reinterpret_cast< SeatPressure* >(object);
  (void)_this;
}
void SeatPressure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SeatPressure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SeatPressure::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.SeatPressure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pressure_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeatPressure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float pressure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeatPressure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.SeatPressure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pressure = 1;
  if (!(this->pressure() <= 0 && this->pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_pressure(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.SeatPressure)
  return target;
}

size_t SeatPressure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.SeatPressure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float pressure = 1;
  if (!(this->pressure() <= 0 && this->pressure() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeatPressure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.SeatPressure)
  GOOGLE_DCHECK_NE(&from, this);
  const SeatPressure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SeatPressure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.SeatPressure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.SeatPressure)
    MergeFrom(*source);
  }
}

void SeatPressure::MergeFrom(const SeatPressure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.SeatPressure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.pressure() <= 0 && from.pressure() >= 0)) {
    _internal_set_pressure(from._internal_pressure());
  }
}

void SeatPressure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.SeatPressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatPressure::CopyFrom(const SeatPressure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.SeatPressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatPressure::IsInitialized() const {
  return true;
}

void SeatPressure::InternalSwap(SeatPressure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pressure_, other->pressure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeatPressure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[13]);
}

// ===================================================================

class ObstacleValue_Linear::_Internal {
 public:
};

ObstacleValue_Linear::ObstacleValue_Linear(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.ObstacleValue.Linear)
}
ObstacleValue_Linear::ObstacleValue_Linear(const ObstacleValue_Linear& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:sensors.ObstacleValue.Linear)
}

void ObstacleValue_Linear::SharedCtor() {
distance_ = 0;
}

ObstacleValue_Linear::~ObstacleValue_Linear() {
  // @@protoc_insertion_point(destructor:sensors.ObstacleValue.Linear)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObstacleValue_Linear::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObstacleValue_Linear::ArenaDtor(void* object) {
  ObstacleValue_Linear* _this = reinterpret_cast< ObstacleValue_Linear* >(object);
  (void)_this;
}
void ObstacleValue_Linear::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleValue_Linear::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObstacleValue_Linear::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ObstacleValue.Linear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleValue_Linear::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleValue_Linear::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ObstacleValue.Linear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ObstacleValue.Linear)
  return target;
}

size_t ObstacleValue_Linear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ObstacleValue.Linear)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleValue_Linear::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.ObstacleValue.Linear)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleValue_Linear* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleValue_Linear>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.ObstacleValue.Linear)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.ObstacleValue.Linear)
    MergeFrom(*source);
  }
}

void ObstacleValue_Linear::MergeFrom(const ObstacleValue_Linear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ObstacleValue.Linear)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
}

void ObstacleValue_Linear::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.ObstacleValue.Linear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleValue_Linear::CopyFrom(const ObstacleValue_Linear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ObstacleValue.Linear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleValue_Linear::IsInitialized() const {
  return true;
}

void ObstacleValue_Linear::InternalSwap(ObstacleValue_Linear* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleValue_Linear::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[14]);
}

// ===================================================================

class ObstacleValue_Angular::_Internal {
 public:
};

ObstacleValue_Angular::ObstacleValue_Angular(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.ObstacleValue.Angular)
}
ObstacleValue_Angular::ObstacleValue_Angular(const ObstacleValue_Angular& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:sensors.ObstacleValue.Angular)
}

void ObstacleValue_Angular::SharedCtor() {
angle_ = 0;
}

ObstacleValue_Angular::~ObstacleValue_Angular() {
  // @@protoc_insertion_point(destructor:sensors.ObstacleValue.Angular)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObstacleValue_Angular::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObstacleValue_Angular::ArenaDtor(void* object) {
  ObstacleValue_Angular* _this = reinterpret_cast< ObstacleValue_Angular* >(object);
  (void)_this;
}
void ObstacleValue_Angular::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleValue_Angular::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObstacleValue_Angular::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ObstacleValue.Angular)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  angle_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleValue_Angular::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleValue_Angular::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ObstacleValue.Angular)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float angle = 1;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ObstacleValue.Angular)
  return target;
}

size_t ObstacleValue_Angular::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ObstacleValue.Angular)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float angle = 1;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleValue_Angular::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.ObstacleValue.Angular)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleValue_Angular* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleValue_Angular>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.ObstacleValue.Angular)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.ObstacleValue.Angular)
    MergeFrom(*source);
  }
}

void ObstacleValue_Angular::MergeFrom(const ObstacleValue_Angular& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ObstacleValue.Angular)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
}

void ObstacleValue_Angular::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.ObstacleValue.Angular)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleValue_Angular::CopyFrom(const ObstacleValue_Angular& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ObstacleValue.Angular)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleValue_Angular::IsInitialized() const {
  return true;
}

void ObstacleValue_Angular::InternalSwap(ObstacleValue_Angular* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(angle_, other->angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleValue_Angular::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[15]);
}

// ===================================================================

class ObstacleValue_Combo::_Internal {
 public:
};

ObstacleValue_Combo::ObstacleValue_Combo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.ObstacleValue.Combo)
}
ObstacleValue_Combo::ObstacleValue_Combo(const ObstacleValue_Combo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:sensors.ObstacleValue.Combo)
}

void ObstacleValue_Combo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&distance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(angle_));
}

ObstacleValue_Combo::~ObstacleValue_Combo() {
  // @@protoc_insertion_point(destructor:sensors.ObstacleValue.Combo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObstacleValue_Combo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObstacleValue_Combo::ArenaDtor(void* object) {
  ObstacleValue_Combo* _this = reinterpret_cast< ObstacleValue_Combo* >(object);
  (void)_this;
}
void ObstacleValue_Combo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleValue_Combo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObstacleValue_Combo::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ObstacleValue.Combo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleValue_Combo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleValue_Combo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ObstacleValue.Combo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_distance(), target);
  }

  // float angle = 2;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ObstacleValue.Combo)
  return target;
}

size_t ObstacleValue_Combo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ObstacleValue.Combo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 4;
  }

  // float angle = 2;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleValue_Combo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.ObstacleValue.Combo)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleValue_Combo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleValue_Combo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.ObstacleValue.Combo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.ObstacleValue.Combo)
    MergeFrom(*source);
  }
}

void ObstacleValue_Combo::MergeFrom(const ObstacleValue_Combo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ObstacleValue.Combo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
}

void ObstacleValue_Combo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.ObstacleValue.Combo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleValue_Combo::CopyFrom(const ObstacleValue_Combo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ObstacleValue.Combo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleValue_Combo::IsInitialized() const {
  return true;
}

void ObstacleValue_Combo::InternalSwap(ObstacleValue_Combo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObstacleValue_Combo, angle_)
      + sizeof(ObstacleValue_Combo::angle_)
      - PROTOBUF_FIELD_OFFSET(ObstacleValue_Combo, distance_)>(
          reinterpret_cast<char*>(&distance_),
          reinterpret_cast<char*>(&other->distance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleValue_Combo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[16]);
}

// ===================================================================

class ObstacleValue::_Internal {
 public:
  static const ::sensors::ObstacleValue_Linear& linear(const ObstacleValue* msg);
  static const ::sensors::ObstacleValue_Angular& angular(const ObstacleValue* msg);
  static const ::sensors::ObstacleValue_Combo& combo(const ObstacleValue* msg);
};

const ::sensors::ObstacleValue_Linear&
ObstacleValue::_Internal::linear(const ObstacleValue* msg) {
  return *msg->value_.linear_;
}
const ::sensors::ObstacleValue_Angular&
ObstacleValue::_Internal::angular(const ObstacleValue* msg) {
  return *msg->value_.angular_;
}
const ::sensors::ObstacleValue_Combo&
ObstacleValue::_Internal::combo(const ObstacleValue* msg) {
  return *msg->value_.combo_;
}
void ObstacleValue::set_allocated_linear(::sensors::ObstacleValue_Linear* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensors::ObstacleValue_Linear>::GetOwningArena(linear);
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    set_has_linear();
    value_.linear_ = linear;
  }
  // @@protoc_insertion_point(field_set_allocated:sensors.ObstacleValue.linear)
}
void ObstacleValue::set_allocated_angular(::sensors::ObstacleValue_Angular* angular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (angular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensors::ObstacleValue_Angular>::GetOwningArena(angular);
    if (message_arena != submessage_arena) {
      angular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular, submessage_arena);
    }
    set_has_angular();
    value_.angular_ = angular;
  }
  // @@protoc_insertion_point(field_set_allocated:sensors.ObstacleValue.angular)
}
void ObstacleValue::set_allocated_combo(::sensors::ObstacleValue_Combo* combo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (combo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensors::ObstacleValue_Combo>::GetOwningArena(combo);
    if (message_arena != submessage_arena) {
      combo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, combo, submessage_arena);
    }
    set_has_combo();
    value_.combo_ = combo;
  }
  // @@protoc_insertion_point(field_set_allocated:sensors.ObstacleValue.combo)
}
ObstacleValue::ObstacleValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.ObstacleValue)
}
ObstacleValue::ObstacleValue(const ObstacleValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kLinear: {
      _internal_mutable_linear()->::sensors::ObstacleValue_Linear::MergeFrom(from._internal_linear());
      break;
    }
    case kAngular: {
      _internal_mutable_angular()->::sensors::ObstacleValue_Angular::MergeFrom(from._internal_angular());
      break;
    }
    case kCombo: {
      _internal_mutable_combo()->::sensors::ObstacleValue_Combo::MergeFrom(from._internal_combo());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensors.ObstacleValue)
}

void ObstacleValue::SharedCtor() {
clear_has_value();
}

ObstacleValue::~ObstacleValue() {
  // @@protoc_insertion_point(destructor:sensors.ObstacleValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObstacleValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void ObstacleValue::ArenaDtor(void* object) {
  ObstacleValue* _this = reinterpret_cast< ObstacleValue* >(object);
  (void)_this;
}
void ObstacleValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObstacleValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:sensors.ObstacleValue)
  switch (value_case()) {
    case kLinear: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.linear_;
      }
      break;
    }
    case kAngular: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.angular_;
      }
      break;
    }
    case kCombo: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.combo_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ObstacleValue::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ObstacleValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.ObstacleValue.Linear linear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.ObstacleValue.Angular angular = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.ObstacleValue.Combo combo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_combo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ObstacleValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.ObstacleValue.Linear linear = 1;
  if (_internal_has_linear()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear(this), target, stream);
  }

  // .sensors.ObstacleValue.Angular angular = 2;
  if (_internal_has_angular()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::angular(this), target, stream);
  }

  // .sensors.ObstacleValue.Combo combo = 3;
  if (_internal_has_combo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::combo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ObstacleValue)
  return target;
}

size_t ObstacleValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ObstacleValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .sensors.ObstacleValue.Linear linear = 1;
    case kLinear: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.linear_);
      break;
    }
    // .sensors.ObstacleValue.Angular angular = 2;
    case kAngular: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.angular_);
      break;
    }
    // .sensors.ObstacleValue.Combo combo = 3;
    case kCombo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.combo_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.ObstacleValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.ObstacleValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.ObstacleValue)
    MergeFrom(*source);
  }
}

void ObstacleValue::MergeFrom(const ObstacleValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ObstacleValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kLinear: {
      _internal_mutable_linear()->::sensors::ObstacleValue_Linear::MergeFrom(from._internal_linear());
      break;
    }
    case kAngular: {
      _internal_mutable_angular()->::sensors::ObstacleValue_Angular::MergeFrom(from._internal_angular());
      break;
    }
    case kCombo: {
      _internal_mutable_combo()->::sensors::ObstacleValue_Combo::MergeFrom(from._internal_combo());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void ObstacleValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.ObstacleValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleValue::CopyFrom(const ObstacleValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ObstacleValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleValue::IsInitialized() const {
  return true;
}

void ObstacleValue::InternalSwap(ObstacleValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[17]);
}

// ===================================================================

class ClosestObstacles::_Internal {
 public:
  static const ::sensors::ObstacleValue& front(const ClosestObstacles* msg);
  static const ::sensors::ObstacleValue& front_left(const ClosestObstacles* msg);
  static const ::sensors::ObstacleValue& front_right(const ClosestObstacles* msg);
  static const ::sensors::ObstacleValue& left(const ClosestObstacles* msg);
  static const ::sensors::ObstacleValue& right(const ClosestObstacles* msg);
  static const ::sensors::ObstacleValue& back_left(const ClosestObstacles* msg);
  static const ::sensors::ObstacleValue& back_right(const ClosestObstacles* msg);
  static const ::sensors::ObstacleValue& back(const ClosestObstacles* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const ClosestObstacles* msg);
};

const ::sensors::ObstacleValue&
ClosestObstacles::_Internal::front(const ClosestObstacles* msg) {
  return *msg->front_;
}
const ::sensors::ObstacleValue&
ClosestObstacles::_Internal::front_left(const ClosestObstacles* msg) {
  return *msg->front_left_;
}
const ::sensors::ObstacleValue&
ClosestObstacles::_Internal::front_right(const ClosestObstacles* msg) {
  return *msg->front_right_;
}
const ::sensors::ObstacleValue&
ClosestObstacles::_Internal::left(const ClosestObstacles* msg) {
  return *msg->left_;
}
const ::sensors::ObstacleValue&
ClosestObstacles::_Internal::right(const ClosestObstacles* msg) {
  return *msg->right_;
}
const ::sensors::ObstacleValue&
ClosestObstacles::_Internal::back_left(const ClosestObstacles* msg) {
  return *msg->back_left_;
}
const ::sensors::ObstacleValue&
ClosestObstacles::_Internal::back_right(const ClosestObstacles* msg) {
  return *msg->back_right_;
}
const ::sensors::ObstacleValue&
ClosestObstacles::_Internal::back(const ClosestObstacles* msg) {
  return *msg->back_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ClosestObstacles::_Internal::timestamp(const ClosestObstacles* msg) {
  return *msg->timestamp_;
}
void ClosestObstacles::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
ClosestObstacles::ClosestObstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.ClosestObstacles)
}
ClosestObstacles::ClosestObstacles(const ClosestObstacles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_front()) {
    front_ = new ::sensors::ObstacleValue(*from.front_);
  } else {
    front_ = nullptr;
  }
  if (from._internal_has_front_left()) {
    front_left_ = new ::sensors::ObstacleValue(*from.front_left_);
  } else {
    front_left_ = nullptr;
  }
  if (from._internal_has_front_right()) {
    front_right_ = new ::sensors::ObstacleValue(*from.front_right_);
  } else {
    front_right_ = nullptr;
  }
  if (from._internal_has_left()) {
    left_ = new ::sensors::ObstacleValue(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::sensors::ObstacleValue(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from._internal_has_back_left()) {
    back_left_ = new ::sensors::ObstacleValue(*from.back_left_);
  } else {
    back_left_ = nullptr;
  }
  if (from._internal_has_back_right()) {
    back_right_ = new ::sensors::ObstacleValue(*from.back_right_);
  } else {
    back_right_ = nullptr;
  }
  if (from._internal_has_back()) {
    back_ = new ::sensors::ObstacleValue(*from.back_);
  } else {
    back_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensors.ClosestObstacles)
}

void ClosestObstacles::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&front_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&front_)) + sizeof(timestamp_));
}

ClosestObstacles::~ClosestObstacles() {
  // @@protoc_insertion_point(destructor:sensors.ClosestObstacles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClosestObstacles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete front_;
  if (this != internal_default_instance()) delete front_left_;
  if (this != internal_default_instance()) delete front_right_;
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete back_left_;
  if (this != internal_default_instance()) delete back_right_;
  if (this != internal_default_instance()) delete back_;
  if (this != internal_default_instance()) delete timestamp_;
}

void ClosestObstacles::ArenaDtor(void* object) {
  ClosestObstacles* _this = reinterpret_cast< ClosestObstacles* >(object);
  (void)_this;
}
void ClosestObstacles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClosestObstacles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClosestObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ClosestObstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && front_ != nullptr) {
    delete front_;
  }
  front_ = nullptr;
  if (GetArenaForAllocation() == nullptr && front_left_ != nullptr) {
    delete front_left_;
  }
  front_left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && front_right_ != nullptr) {
    delete front_right_;
  }
  front_right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && back_left_ != nullptr) {
    delete back_left_;
  }
  back_left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && back_right_ != nullptr) {
    delete back_right_;
  }
  back_right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && back_ != nullptr) {
    delete back_;
  }
  back_ = nullptr;
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClosestObstacles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.ObstacleValue front = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_front(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.ObstacleValue front_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_front_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.ObstacleValue front_right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_front_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.ObstacleValue left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.ObstacleValue right = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.ObstacleValue back_left = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_back_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.ObstacleValue back_right = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_back_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.ObstacleValue back = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_back(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClosestObstacles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ClosestObstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.ObstacleValue front = 1;
  if (this->has_front()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::front(this), target, stream);
  }

  // .sensors.ObstacleValue front_left = 2;
  if (this->has_front_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::front_left(this), target, stream);
  }

  // .sensors.ObstacleValue front_right = 3;
  if (this->has_front_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::front_right(this), target, stream);
  }

  // .sensors.ObstacleValue left = 4;
  if (this->has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::left(this), target, stream);
  }

  // .sensors.ObstacleValue right = 5;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::right(this), target, stream);
  }

  // .sensors.ObstacleValue back_left = 6;
  if (this->has_back_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::back_left(this), target, stream);
  }

  // .sensors.ObstacleValue back_right = 7;
  if (this->has_back_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::back_right(this), target, stream);
  }

  // .sensors.ObstacleValue back = 8;
  if (this->has_back()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::back(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 9;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ClosestObstacles)
  return target;
}

size_t ClosestObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ClosestObstacles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.ObstacleValue front = 1;
  if (this->has_front()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *front_);
  }

  // .sensors.ObstacleValue front_left = 2;
  if (this->has_front_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *front_left_);
  }

  // .sensors.ObstacleValue front_right = 3;
  if (this->has_front_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *front_right_);
  }

  // .sensors.ObstacleValue left = 4;
  if (this->has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .sensors.ObstacleValue right = 5;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .sensors.ObstacleValue back_left = 6;
  if (this->has_back_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *back_left_);
  }

  // .sensors.ObstacleValue back_right = 7;
  if (this->has_back_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *back_right_);
  }

  // .sensors.ObstacleValue back = 8;
  if (this->has_back()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *back_);
  }

  // .google.protobuf.Timestamp timestamp = 9;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClosestObstacles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.ClosestObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const ClosestObstacles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClosestObstacles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.ClosestObstacles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.ClosestObstacles)
    MergeFrom(*source);
  }
}

void ClosestObstacles::MergeFrom(const ClosestObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ClosestObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_front()) {
    _internal_mutable_front()->::sensors::ObstacleValue::MergeFrom(from._internal_front());
  }
  if (from.has_front_left()) {
    _internal_mutable_front_left()->::sensors::ObstacleValue::MergeFrom(from._internal_front_left());
  }
  if (from.has_front_right()) {
    _internal_mutable_front_right()->::sensors::ObstacleValue::MergeFrom(from._internal_front_right());
  }
  if (from.has_left()) {
    _internal_mutable_left()->::sensors::ObstacleValue::MergeFrom(from._internal_left());
  }
  if (from.has_right()) {
    _internal_mutable_right()->::sensors::ObstacleValue::MergeFrom(from._internal_right());
  }
  if (from.has_back_left()) {
    _internal_mutable_back_left()->::sensors::ObstacleValue::MergeFrom(from._internal_back_left());
  }
  if (from.has_back_right()) {
    _internal_mutable_back_right()->::sensors::ObstacleValue::MergeFrom(from._internal_back_right());
  }
  if (from.has_back()) {
    _internal_mutable_back()->::sensors::ObstacleValue::MergeFrom(from._internal_back());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void ClosestObstacles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.ClosestObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClosestObstacles::CopyFrom(const ClosestObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ClosestObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClosestObstacles::IsInitialized() const {
  return true;
}

void ClosestObstacles::InternalSwap(ClosestObstacles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClosestObstacles, timestamp_)
      + sizeof(ClosestObstacles::timestamp_)
      - PROTOBUF_FIELD_OFFSET(ClosestObstacles, front_)>(
          reinterpret_cast<char*>(&front_),
          reinterpret_cast<char*>(&other->front_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClosestObstacles::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[18]);
}

// ===================================================================

class CameraPoints::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const CameraPoints* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
CameraPoints::_Internal::timestamp(const CameraPoints* msg) {
  return *msg->timestamp_;
}
void CameraPoints::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
CameraPoints::CameraPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.CameraPoints)
}
CameraPoints::CameraPoints(const CameraPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensors.CameraPoints)
}

void CameraPoints::SharedCtor() {
timestamp_ = nullptr;
}

CameraPoints::~CameraPoints() {
  // @@protoc_insertion_point(destructor:sensors.CameraPoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void CameraPoints::ArenaDtor(void* object) {
  CameraPoints* _this = reinterpret_cast< CameraPoints* >(object);
  (void)_this;
}
void CameraPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.CameraPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.Point3D points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.CameraPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.Point3D points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.CameraPoints)
  return target;
}

size_t CameraPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.CameraPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.Point3D points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.CameraPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.CameraPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.CameraPoints)
    MergeFrom(*source);
  }
}

void CameraPoints::MergeFrom(const CameraPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.CameraPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void CameraPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.CameraPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraPoints::CopyFrom(const CameraPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.CameraPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraPoints::IsInitialized() const {
  return true;
}

void CameraPoints::InternalSwap(CameraPoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraPoints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[19]);
}

// ===================================================================

class Point3D::_Internal {
 public:
};

Point3D::Point3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.Point3D)
}
Point3D::Point3D(const Point3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:sensors.Point3D)
}

void Point3D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point3D::~Point3D() {
  // @@protoc_insertion_point(destructor:sensors.Point3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point3D::ArenaDtor(void* object) {
  Point3D* _this = reinterpret_cast< Point3D* >(object);
  (void)_this;
}
void Point3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point3D::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Point3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Point3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Point3D)
  return target;
}

size_t Point3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Point3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.Point3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Point3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.Point3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.Point3D)
    MergeFrom(*source);
  }
}

void Point3D::MergeFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Point3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Point3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3D::CopyFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3D::IsInitialized() const {
  return true;
}

void Point3D::InternalSwap(Point3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point3D, z_)
      + sizeof(Point3D::z_)
      - PROTOBUF_FIELD_OFFSET(Point3D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point3D::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[20]);
}

// ===================================================================

class ObjectDetection2D::_Internal {
 public:
};

ObjectDetection2D::ObjectDetection2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.ObjectDetection2D)
}
ObjectDetection2D::ObjectDetection2D(const ObjectDetection2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensors.ObjectDetection2D)
}

void ObjectDetection2D::SharedCtor() {
}

ObjectDetection2D::~ObjectDetection2D() {
  // @@protoc_insertion_point(destructor:sensors.ObjectDetection2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectDetection2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObjectDetection2D::ArenaDtor(void* object) {
  ObjectDetection2D* _this = reinterpret_cast< ObjectDetection2D* >(object);
  (void)_this;
}
void ObjectDetection2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectDetection2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectDetection2D::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ObjectDetection2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectDetection2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.Object2D objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectDetection2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ObjectDetection2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.Object2D objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_objects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ObjectDetection2D)
  return target;
}

size_t ObjectDetection2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ObjectDetection2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.Object2D objects = 1;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectDetection2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.ObjectDetection2D)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDetection2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectDetection2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.ObjectDetection2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.ObjectDetection2D)
    MergeFrom(*source);
  }
}

void ObjectDetection2D::MergeFrom(const ObjectDetection2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ObjectDetection2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
}

void ObjectDetection2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.ObjectDetection2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDetection2D::CopyFrom(const ObjectDetection2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ObjectDetection2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDetection2D::IsInitialized() const {
  return true;
}

void ObjectDetection2D::InternalSwap(ObjectDetection2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  objects_.InternalSwap(&other->objects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDetection2D::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[21]);
}

// ===================================================================

class Object2D::_Internal {
 public:
  static const ::sensors::CameraPoints2D& points(const Object2D* msg);
};

const ::sensors::CameraPoints2D&
Object2D::_Internal::points(const Object2D* msg) {
  return *msg->points_;
}
Object2D::Object2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.Object2D)
}
Object2D::Object2D(const Object2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_points()) {
    points_ = new ::sensors::CameraPoints2D(*from.points_);
  } else {
    points_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensors.Object2D)
}

void Object2D::SharedCtor() {
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
points_ = nullptr;
}

Object2D::~Object2D() {
  // @@protoc_insertion_point(destructor:sensors.Object2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Object2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete points_;
}

void Object2D::ArenaDtor(void* object) {
  Object2D* _this = reinterpret_cast< Object2D* >(object);
  (void)_this;
}
void Object2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Object2D::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Object2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && points_ != nullptr) {
    delete points_;
  }
  points_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.CameraPoints2D points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_points(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensors.Object2D.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Object2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.CameraPoints2D points = 1;
  if (this->has_points()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::points(this), target, stream);
  }

  // string label = 2;
  if (!this->label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors.Object2D.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Object2D)
  return target;
}

size_t Object2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Object2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 2;
  if (!this->label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // .sensors.CameraPoints2D points = 1;
  if (this->has_points()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *points_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.Object2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Object2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.Object2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.Object2D)
    MergeFrom(*source);
  }
}

void Object2D::MergeFrom(const Object2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Object2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.label().empty()) {
    _internal_set_label(from._internal_label());
  }
  if (from.has_points()) {
    _internal_mutable_points()->::sensors::CameraPoints2D::MergeFrom(from._internal_points());
  }
}

void Object2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.Object2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object2D::CopyFrom(const Object2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Object2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object2D::IsInitialized() const {
  return true;
}

void Object2D::InternalSwap(Object2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &label_, GetArenaForAllocation(),
      &other->label_, other->GetArenaForAllocation()
  );
  swap(points_, other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Object2D::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[22]);
}

// ===================================================================

class CameraPoints2D::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const CameraPoints2D* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
CameraPoints2D::_Internal::timestamp(const CameraPoints2D* msg) {
  return *msg->timestamp_;
}
void CameraPoints2D::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
CameraPoints2D::CameraPoints2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.CameraPoints2D)
}
CameraPoints2D::CameraPoints2D(const CameraPoints2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensors.CameraPoints2D)
}

void CameraPoints2D::SharedCtor() {
timestamp_ = nullptr;
}

CameraPoints2D::~CameraPoints2D() {
  // @@protoc_insertion_point(destructor:sensors.CameraPoints2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraPoints2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void CameraPoints2D::ArenaDtor(void* object) {
  CameraPoints2D* _this = reinterpret_cast< CameraPoints2D* >(object);
  (void)_this;
}
void CameraPoints2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraPoints2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraPoints2D::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.CameraPoints2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraPoints2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.Point2D points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraPoints2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.CameraPoints2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.Point2D points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.CameraPoints2D)
  return target;
}

size_t CameraPoints2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.CameraPoints2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.Point2D points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraPoints2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.CameraPoints2D)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraPoints2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraPoints2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.CameraPoints2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.CameraPoints2D)
    MergeFrom(*source);
  }
}

void CameraPoints2D::MergeFrom(const CameraPoints2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.CameraPoints2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void CameraPoints2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.CameraPoints2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraPoints2D::CopyFrom(const CameraPoints2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.CameraPoints2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraPoints2D::IsInitialized() const {
  return true;
}

void CameraPoints2D::InternalSwap(CameraPoints2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraPoints2D::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[23]);
}

// ===================================================================

class Point2D::_Internal {
 public:
};

Point2D::Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.Point2D)
}
Point2D::Point2D(const Point2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:sensors.Point2D)
}

void Point2D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point2D::~Point2D() {
  // @@protoc_insertion_point(destructor:sensors.Point2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point2D::ArenaDtor(void* object) {
  Point2D* _this = reinterpret_cast< Point2D* >(object);
  (void)_this;
}
void Point2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point2D::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Point2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Point2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Point2D)
  return target;
}

size_t Point2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Point2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.Point2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.Point2D)
    MergeFrom(*source);
  }
}

void Point2D::MergeFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Point2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2D::CopyFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2D::IsInitialized() const {
  return true;
}

void Point2D::InternalSwap(Point2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point2D, y_)
      + sizeof(Point2D::y_)
      - PROTOBUF_FIELD_OFFSET(Point2D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2D::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[24]);
}

// ===================================================================

class LoggingData::_Internal {
 public:
};

LoggingData::LoggingData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.LoggingData)
}
LoggingData::LoggingData(const LoggingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:sensors.LoggingData)
}

void LoggingData::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
}

LoggingData::~LoggingData() {
  // @@protoc_insertion_point(destructor:sensors.LoggingData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoggingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoggingData::ArenaDtor(void* object) {
  LoggingData* _this = reinterpret_cast< LoggingData* >(object);
  (void)_this;
}
void LoggingData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoggingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoggingData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.LoggingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  key_.ClearToEmpty();
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoggingData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensors.LoggingData.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sensors.Point3D points = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoggingData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.LoggingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors.LoggingData.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  // int32 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_timestamp(), target);
  }

  // repeated .sensors.Point3D points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.LoggingData)
  return target;
}

size_t LoggingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.LoggingData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.Point3D points = 4;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string key = 1;
  if (!this->key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoggingData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.LoggingData)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggingData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoggingData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.LoggingData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.LoggingData)
    MergeFrom(*source);
  }
}

void LoggingData::MergeFrom(const LoggingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.LoggingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (!from.key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void LoggingData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.LoggingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggingData::CopyFrom(const LoggingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.LoggingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggingData::IsInitialized() const {
  return true;
}

void LoggingData::InternalSwap(LoggingData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoggingData, timestamp_)
      + sizeof(LoggingData::timestamp_)
      - PROTOBUF_FIELD_OFFSET(LoggingData, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoggingData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[25]);
}

// ===================================================================

class Led::_Internal {
 public:
};

Led::Led(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.Led)
}
Led::Led(const Led& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  led_ = from.led_;
  // @@protoc_insertion_point(copy_constructor:sensors.Led)
}

void Led::SharedCtor() {
led_ = 0;
}

Led::~Led() {
  // @@protoc_insertion_point(destructor:sensors.Led)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Led::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Led::ArenaDtor(void* object) {
  Led* _this = reinterpret_cast< Led* >(object);
  (void)_this;
}
void Led::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Led::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Led::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Led)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  led_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Led::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.Led.Leds led = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_led(static_cast<::sensors::Led_Leds>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Led::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Led)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.Led.Leds led = 1;
  if (this->led() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_led(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Led)
  return target;
}

size_t Led::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Led)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.Led.Leds led = 1;
  if (this->led() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_led());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Led::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.Led)
  GOOGLE_DCHECK_NE(&from, this);
  const Led* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Led>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.Led)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.Led)
    MergeFrom(*source);
  }
}

void Led::MergeFrom(const Led& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Led)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.led() != 0) {
    _internal_set_led(from._internal_led());
  }
}

void Led::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.Led)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Led::CopyFrom(const Led& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Led)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Led::IsInitialized() const {
  return true;
}

void Led::InternalSwap(Led* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(led_, other->led_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Led::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[26]);
}

// ===================================================================

class HmiState::_Internal {
 public:
};

HmiState::HmiState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.HmiState)
}
HmiState::HmiState(const HmiState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:sensors.HmiState)
}

void HmiState::SharedCtor() {
state_ = 0;
}

HmiState::~HmiState() {
  // @@protoc_insertion_point(destructor:sensors.HmiState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HmiState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HmiState::ArenaDtor(void* object) {
  HmiState* _this = reinterpret_cast< HmiState* >(object);
  (void)_this;
}
void HmiState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HmiState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HmiState::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.HmiState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HmiState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.HmiState.States state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::sensors::HmiState_States>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HmiState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.HmiState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.HmiState.States state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.HmiState)
  return target;
}

size_t HmiState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.HmiState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.HmiState.States state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HmiState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.HmiState)
  GOOGLE_DCHECK_NE(&from, this);
  const HmiState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HmiState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.HmiState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.HmiState)
    MergeFrom(*source);
  }
}

void HmiState::MergeFrom(const HmiState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.HmiState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void HmiState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.HmiState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmiState::CopyFrom(const HmiState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.HmiState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiState::IsInitialized() const {
  return true;
}

void HmiState::InternalSwap(HmiState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HmiState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[27]);
}

// ===================================================================

class HmiStreamData::_Internal {
 public:
};

HmiStreamData::HmiStreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.HmiStreamData)
}
HmiStreamData::HmiStreamData(const HmiStreamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_alt_override_, &from.is_alt_override_,
    static_cast<size_t>(reinterpret_cast<char*>(&button_state_) -
    reinterpret_cast<char*>(&is_alt_override_)) + sizeof(button_state_));
  // @@protoc_insertion_point(copy_constructor:sensors.HmiStreamData)
}

void HmiStreamData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_alt_override_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&button_state_) -
    reinterpret_cast<char*>(&is_alt_override_)) + sizeof(button_state_));
}

HmiStreamData::~HmiStreamData() {
  // @@protoc_insertion_point(destructor:sensors.HmiStreamData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HmiStreamData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HmiStreamData::ArenaDtor(void* object) {
  HmiStreamData* _this = reinterpret_cast< HmiStreamData* >(object);
  (void)_this;
}
void HmiStreamData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HmiStreamData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HmiStreamData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.HmiStreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_alt_override_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_state_) -
      reinterpret_cast<char*>(&is_alt_override_)) + sizeof(button_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HmiStreamData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_alt_override = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_alt_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.HmiStreamData.ButtonState button_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_button_state(static_cast<::sensors::HmiStreamData_ButtonState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HmiStreamData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.HmiStreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_alt_override = 1;
  if (this->is_alt_override() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_alt_override(), target);
  }

  // .sensors.HmiStreamData.ButtonState button_state = 2;
  if (this->button_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_button_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.HmiStreamData)
  return target;
}

size_t HmiStreamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.HmiStreamData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_alt_override = 1;
  if (this->is_alt_override() != 0) {
    total_size += 1 + 1;
  }

  // .sensors.HmiStreamData.ButtonState button_state = 2;
  if (this->button_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_button_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HmiStreamData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.HmiStreamData)
  GOOGLE_DCHECK_NE(&from, this);
  const HmiStreamData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HmiStreamData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.HmiStreamData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.HmiStreamData)
    MergeFrom(*source);
  }
}

void HmiStreamData::MergeFrom(const HmiStreamData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.HmiStreamData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_alt_override() != 0) {
    _internal_set_is_alt_override(from._internal_is_alt_override());
  }
  if (from.button_state() != 0) {
    _internal_set_button_state(from._internal_button_state());
  }
}

void HmiStreamData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.HmiStreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmiStreamData::CopyFrom(const HmiStreamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.HmiStreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiStreamData::IsInitialized() const {
  return true;
}

void HmiStreamData::InternalSwap(HmiStreamData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HmiStreamData, button_state_)
      + sizeof(HmiStreamData::button_state_)
      - PROTOBUF_FIELD_OFFSET(HmiStreamData, is_alt_override_)>(
          reinterpret_cast<char*>(&is_alt_override_),
          reinterpret_cast<char*>(&other->is_alt_override_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HmiStreamData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[28]);
}

// ===================================================================

class PressCountStreamData::_Internal {
 public:
};

PressCountStreamData::PressCountStreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.PressCountStreamData)
}
PressCountStreamData::PressCountStreamData(const PressCountStreamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  press_count_ = from.press_count_;
  // @@protoc_insertion_point(copy_constructor:sensors.PressCountStreamData)
}

void PressCountStreamData::SharedCtor() {
press_count_ = 0;
}

PressCountStreamData::~PressCountStreamData() {
  // @@protoc_insertion_point(destructor:sensors.PressCountStreamData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PressCountStreamData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PressCountStreamData::ArenaDtor(void* object) {
  PressCountStreamData* _this = reinterpret_cast< PressCountStreamData* >(object);
  (void)_this;
}
void PressCountStreamData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PressCountStreamData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PressCountStreamData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.PressCountStreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  press_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PressCountStreamData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 press_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          press_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PressCountStreamData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.PressCountStreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 press_count = 1;
  if (this->press_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_press_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.PressCountStreamData)
  return target;
}

size_t PressCountStreamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.PressCountStreamData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 press_count = 1;
  if (this->press_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_press_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PressCountStreamData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.PressCountStreamData)
  GOOGLE_DCHECK_NE(&from, this);
  const PressCountStreamData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PressCountStreamData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.PressCountStreamData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.PressCountStreamData)
    MergeFrom(*source);
  }
}

void PressCountStreamData::MergeFrom(const PressCountStreamData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.PressCountStreamData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.press_count() != 0) {
    _internal_set_press_count(from._internal_press_count());
  }
}

void PressCountStreamData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.PressCountStreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PressCountStreamData::CopyFrom(const PressCountStreamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.PressCountStreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PressCountStreamData::IsInitialized() const {
  return true;
}

void PressCountStreamData::InternalSwap(PressCountStreamData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(press_count_, other->press_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PressCountStreamData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[29]);
}

// ===================================================================

class NavigationScaling::_Internal {
 public:
};

NavigationScaling::NavigationScaling(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.NavigationScaling)
}
NavigationScaling::NavigationScaling(const NavigationScaling& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&front_fb_, &from.front_fb_,
    static_cast<size_t>(reinterpret_cast<char*>(&luci_active_) -
    reinterpret_cast<char*>(&front_fb_)) + sizeof(luci_active_));
  // @@protoc_insertion_point(copy_constructor:sensors.NavigationScaling)
}

void NavigationScaling::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&front_fb_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&luci_active_) -
    reinterpret_cast<char*>(&front_fb_)) + sizeof(luci_active_));
}

NavigationScaling::~NavigationScaling() {
  // @@protoc_insertion_point(destructor:sensors.NavigationScaling)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigationScaling::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NavigationScaling::ArenaDtor(void* object) {
  NavigationScaling* _this = reinterpret_cast< NavigationScaling* >(object);
  (void)_this;
}
void NavigationScaling::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigationScaling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NavigationScaling::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.NavigationScaling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&front_fb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&luci_active_) -
      reinterpret_cast<char*>(&front_fb_)) + sizeof(luci_active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationScaling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float front_fb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          front_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float front_rl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          front_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float front_right_fb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          front_right_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float front_right_rl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          front_right_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float front_left_fb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          front_left_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float front_left_rl = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          front_left_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_fb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          right_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_rl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          right_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float left_fb = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          left_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float left_rl = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          left_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float back_right_fb = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          back_right_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float back_right_rl = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          back_right_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float back_left_fb = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          back_left_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float back_left_rl = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          back_left_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float back_fb = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          back_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float back_rl = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          back_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 max_js_scale_increase = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          max_js_scale_increase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_js_scale_decrease = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          max_js_scale_decrease_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool luci_active = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          luci_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationScaling::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.NavigationScaling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float front_fb = 1;
  if (!(this->front_fb() <= 0 && this->front_fb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_front_fb(), target);
  }

  // float front_rl = 2;
  if (!(this->front_rl() <= 0 && this->front_rl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_front_rl(), target);
  }

  // float front_right_fb = 3;
  if (!(this->front_right_fb() <= 0 && this->front_right_fb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_front_right_fb(), target);
  }

  // float front_right_rl = 4;
  if (!(this->front_right_rl() <= 0 && this->front_right_rl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_front_right_rl(), target);
  }

  // float front_left_fb = 5;
  if (!(this->front_left_fb() <= 0 && this->front_left_fb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_front_left_fb(), target);
  }

  // float front_left_rl = 6;
  if (!(this->front_left_rl() <= 0 && this->front_left_rl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_front_left_rl(), target);
  }

  // float right_fb = 7;
  if (!(this->right_fb() <= 0 && this->right_fb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_right_fb(), target);
  }

  // float right_rl = 8;
  if (!(this->right_rl() <= 0 && this->right_rl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_right_rl(), target);
  }

  // float left_fb = 9;
  if (!(this->left_fb() <= 0 && this->left_fb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_left_fb(), target);
  }

  // float left_rl = 10;
  if (!(this->left_rl() <= 0 && this->left_rl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_left_rl(), target);
  }

  // float back_right_fb = 11;
  if (!(this->back_right_fb() <= 0 && this->back_right_fb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_back_right_fb(), target);
  }

  // float back_right_rl = 12;
  if (!(this->back_right_rl() <= 0 && this->back_right_rl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_back_right_rl(), target);
  }

  // float back_left_fb = 13;
  if (!(this->back_left_fb() <= 0 && this->back_left_fb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_back_left_fb(), target);
  }

  // float back_left_rl = 14;
  if (!(this->back_left_rl() <= 0 && this->back_left_rl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_back_left_rl(), target);
  }

  // float back_fb = 15;
  if (!(this->back_fb() <= 0 && this->back_fb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_back_fb(), target);
  }

  // float back_rl = 16;
  if (!(this->back_rl() <= 0 && this->back_rl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_back_rl(), target);
  }

  // uint32 max_js_scale_increase = 17;
  if (this->max_js_scale_increase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_max_js_scale_increase(), target);
  }

  // uint32 max_js_scale_decrease = 18;
  if (this->max_js_scale_decrease() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_max_js_scale_decrease(), target);
  }

  // bool luci_active = 19;
  if (this->luci_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_luci_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.NavigationScaling)
  return target;
}

size_t NavigationScaling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.NavigationScaling)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float front_fb = 1;
  if (!(this->front_fb() <= 0 && this->front_fb() >= 0)) {
    total_size += 1 + 4;
  }

  // float front_rl = 2;
  if (!(this->front_rl() <= 0 && this->front_rl() >= 0)) {
    total_size += 1 + 4;
  }

  // float front_right_fb = 3;
  if (!(this->front_right_fb() <= 0 && this->front_right_fb() >= 0)) {
    total_size += 1 + 4;
  }

  // float front_right_rl = 4;
  if (!(this->front_right_rl() <= 0 && this->front_right_rl() >= 0)) {
    total_size += 1 + 4;
  }

  // float front_left_fb = 5;
  if (!(this->front_left_fb() <= 0 && this->front_left_fb() >= 0)) {
    total_size += 1 + 4;
  }

  // float front_left_rl = 6;
  if (!(this->front_left_rl() <= 0 && this->front_left_rl() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_fb = 7;
  if (!(this->right_fb() <= 0 && this->right_fb() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_rl = 8;
  if (!(this->right_rl() <= 0 && this->right_rl() >= 0)) {
    total_size += 1 + 4;
  }

  // float left_fb = 9;
  if (!(this->left_fb() <= 0 && this->left_fb() >= 0)) {
    total_size += 1 + 4;
  }

  // float left_rl = 10;
  if (!(this->left_rl() <= 0 && this->left_rl() >= 0)) {
    total_size += 1 + 4;
  }

  // float back_right_fb = 11;
  if (!(this->back_right_fb() <= 0 && this->back_right_fb() >= 0)) {
    total_size += 1 + 4;
  }

  // float back_right_rl = 12;
  if (!(this->back_right_rl() <= 0 && this->back_right_rl() >= 0)) {
    total_size += 1 + 4;
  }

  // float back_left_fb = 13;
  if (!(this->back_left_fb() <= 0 && this->back_left_fb() >= 0)) {
    total_size += 1 + 4;
  }

  // float back_left_rl = 14;
  if (!(this->back_left_rl() <= 0 && this->back_left_rl() >= 0)) {
    total_size += 1 + 4;
  }

  // float back_fb = 15;
  if (!(this->back_fb() <= 0 && this->back_fb() >= 0)) {
    total_size += 1 + 4;
  }

  // float back_rl = 16;
  if (!(this->back_rl() <= 0 && this->back_rl() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 max_js_scale_increase = 17;
  if (this->max_js_scale_increase() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_js_scale_increase());
  }

  // uint32 max_js_scale_decrease = 18;
  if (this->max_js_scale_decrease() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_js_scale_decrease());
  }

  // bool luci_active = 19;
  if (this->luci_active() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationScaling::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.NavigationScaling)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationScaling* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationScaling>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.NavigationScaling)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.NavigationScaling)
    MergeFrom(*source);
  }
}

void NavigationScaling::MergeFrom(const NavigationScaling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.NavigationScaling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.front_fb() <= 0 && from.front_fb() >= 0)) {
    _internal_set_front_fb(from._internal_front_fb());
  }
  if (!(from.front_rl() <= 0 && from.front_rl() >= 0)) {
    _internal_set_front_rl(from._internal_front_rl());
  }
  if (!(from.front_right_fb() <= 0 && from.front_right_fb() >= 0)) {
    _internal_set_front_right_fb(from._internal_front_right_fb());
  }
  if (!(from.front_right_rl() <= 0 && from.front_right_rl() >= 0)) {
    _internal_set_front_right_rl(from._internal_front_right_rl());
  }
  if (!(from.front_left_fb() <= 0 && from.front_left_fb() >= 0)) {
    _internal_set_front_left_fb(from._internal_front_left_fb());
  }
  if (!(from.front_left_rl() <= 0 && from.front_left_rl() >= 0)) {
    _internal_set_front_left_rl(from._internal_front_left_rl());
  }
  if (!(from.right_fb() <= 0 && from.right_fb() >= 0)) {
    _internal_set_right_fb(from._internal_right_fb());
  }
  if (!(from.right_rl() <= 0 && from.right_rl() >= 0)) {
    _internal_set_right_rl(from._internal_right_rl());
  }
  if (!(from.left_fb() <= 0 && from.left_fb() >= 0)) {
    _internal_set_left_fb(from._internal_left_fb());
  }
  if (!(from.left_rl() <= 0 && from.left_rl() >= 0)) {
    _internal_set_left_rl(from._internal_left_rl());
  }
  if (!(from.back_right_fb() <= 0 && from.back_right_fb() >= 0)) {
    _internal_set_back_right_fb(from._internal_back_right_fb());
  }
  if (!(from.back_right_rl() <= 0 && from.back_right_rl() >= 0)) {
    _internal_set_back_right_rl(from._internal_back_right_rl());
  }
  if (!(from.back_left_fb() <= 0 && from.back_left_fb() >= 0)) {
    _internal_set_back_left_fb(from._internal_back_left_fb());
  }
  if (!(from.back_left_rl() <= 0 && from.back_left_rl() >= 0)) {
    _internal_set_back_left_rl(from._internal_back_left_rl());
  }
  if (!(from.back_fb() <= 0 && from.back_fb() >= 0)) {
    _internal_set_back_fb(from._internal_back_fb());
  }
  if (!(from.back_rl() <= 0 && from.back_rl() >= 0)) {
    _internal_set_back_rl(from._internal_back_rl());
  }
  if (from.max_js_scale_increase() != 0) {
    _internal_set_max_js_scale_increase(from._internal_max_js_scale_increase());
  }
  if (from.max_js_scale_decrease() != 0) {
    _internal_set_max_js_scale_decrease(from._internal_max_js_scale_decrease());
  }
  if (from.luci_active() != 0) {
    _internal_set_luci_active(from._internal_luci_active());
  }
}

void NavigationScaling::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.NavigationScaling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationScaling::CopyFrom(const NavigationScaling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.NavigationScaling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationScaling::IsInitialized() const {
  return true;
}

void NavigationScaling::InternalSwap(NavigationScaling* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigationScaling, luci_active_)
      + sizeof(NavigationScaling::luci_active_)
      - PROTOBUF_FIELD_OFFSET(NavigationScaling, front_fb_)>(
          reinterpret_cast<char*>(&front_fb_),
          reinterpret_cast<char*>(&other->front_fb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationScaling::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[30]);
}

// ===================================================================

class UltrasonicCtrl::_Internal {
 public:
};

UltrasonicCtrl::UltrasonicCtrl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.UltrasonicCtrl)
}
UltrasonicCtrl::UltrasonicCtrl(const UltrasonicCtrl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&board_, &from.board_,
    static_cast<size_t>(reinterpret_cast<char*>(&address_) -
    reinterpret_cast<char*>(&board_)) + sizeof(address_));
  // @@protoc_insertion_point(copy_constructor:sensors.UltrasonicCtrl)
}

void UltrasonicCtrl::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&board_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&address_) -
    reinterpret_cast<char*>(&board_)) + sizeof(address_));
}

UltrasonicCtrl::~UltrasonicCtrl() {
  // @@protoc_insertion_point(destructor:sensors.UltrasonicCtrl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UltrasonicCtrl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UltrasonicCtrl::ArenaDtor(void* object) {
  UltrasonicCtrl* _this = reinterpret_cast< UltrasonicCtrl* >(object);
  (void)_this;
}
void UltrasonicCtrl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UltrasonicCtrl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UltrasonicCtrl::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.UltrasonicCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&board_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&address_) -
      reinterpret_cast<char*>(&board_)) + sizeof(address_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UltrasonicCtrl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.UltrasonicCtrl.Board board = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_board(static_cast<::sensors::UltrasonicCtrl_Board>(val));
        } else goto handle_unusual;
        continue;
      // int32 spi_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          spi_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicCtrl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.UltrasonicCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.UltrasonicCtrl.Board board = 1;
  if (this->board() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_board(), target);
  }

  // int32 spi_id = 2;
  if (this->spi_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_spi_id(), target);
  }

  // int32 address = 3;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.UltrasonicCtrl)
  return target;
}

size_t UltrasonicCtrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.UltrasonicCtrl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.UltrasonicCtrl.Board board = 1;
  if (this->board() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_board());
  }

  // int32 spi_id = 2;
  if (this->spi_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spi_id());
  }

  // int32 address = 3;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UltrasonicCtrl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.UltrasonicCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicCtrl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UltrasonicCtrl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.UltrasonicCtrl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.UltrasonicCtrl)
    MergeFrom(*source);
  }
}

void UltrasonicCtrl::MergeFrom(const UltrasonicCtrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.UltrasonicCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.board() != 0) {
    _internal_set_board(from._internal_board());
  }
  if (from.spi_id() != 0) {
    _internal_set_spi_id(from._internal_spi_id());
  }
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
}

void UltrasonicCtrl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.UltrasonicCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicCtrl::CopyFrom(const UltrasonicCtrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.UltrasonicCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicCtrl::IsInitialized() const {
  return true;
}

void UltrasonicCtrl::InternalSwap(UltrasonicCtrl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UltrasonicCtrl, address_)
      + sizeof(UltrasonicCtrl::address_)
      - PROTOBUF_FIELD_OFFSET(UltrasonicCtrl, board_)>(
          reinterpret_cast<char*>(&board_),
          reinterpret_cast<char*>(&other->board_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicCtrl::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[31]);
}

// ===================================================================

class UltrasonicDistance::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const UltrasonicDistance* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
UltrasonicDistance::_Internal::timestamp(const UltrasonicDistance* msg) {
  return *msg->timestamp_;
}
void UltrasonicDistance::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
UltrasonicDistance::UltrasonicDistance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arc_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.UltrasonicDistance)
}
UltrasonicDistance::UltrasonicDistance(const UltrasonicDistance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arc_points_(from.arc_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&address_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(address_));
  // @@protoc_insertion_point(copy_constructor:sensors.UltrasonicDistance)
}

void UltrasonicDistance::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&address_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(address_));
}

UltrasonicDistance::~UltrasonicDistance() {
  // @@protoc_insertion_point(destructor:sensors.UltrasonicDistance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UltrasonicDistance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void UltrasonicDistance::ArenaDtor(void* object) {
  UltrasonicDistance* _this = reinterpret_cast< UltrasonicDistance* >(object);
  (void)_this;
}
void UltrasonicDistance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UltrasonicDistance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UltrasonicDistance::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.UltrasonicDistance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arc_points_.Clear();
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&address_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(address_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UltrasonicDistance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sensors.UltrasonicDistance.Board board = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_board(static_cast<::sensors::UltrasonicDistance_Board>(val));
        } else goto handle_unusual;
        continue;
      // int32 spi_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          spi_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sensors.Point3D arc_points = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arc_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicDistance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.UltrasonicDistance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance(), target);
  }

  // .sensors.UltrasonicDistance.Board board = 2;
  if (this->board() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_board(), target);
  }

  // int32 spi_id = 3;
  if (this->spi_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_spi_id(), target);
  }

  // int32 address = 4;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_address(), target);
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timestamp(this), target, stream);
  }

  // repeated .sensors.Point3D arc_points = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arc_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_arc_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.UltrasonicDistance)
  return target;
}

size_t UltrasonicDistance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.UltrasonicDistance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.Point3D arc_points = 6;
  total_size += 1UL * this->_internal_arc_points_size();
  for (const auto& msg : this->arc_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  // .sensors.UltrasonicDistance.Board board = 2;
  if (this->board() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_board());
  }

  // int32 spi_id = 3;
  if (this->spi_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spi_id());
  }

  // int32 address = 4;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UltrasonicDistance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.UltrasonicDistance)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicDistance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UltrasonicDistance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.UltrasonicDistance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.UltrasonicDistance)
    MergeFrom(*source);
  }
}

void UltrasonicDistance::MergeFrom(const UltrasonicDistance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.UltrasonicDistance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arc_points_.MergeFrom(from.arc_points_);
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (from.board() != 0) {
    _internal_set_board(from._internal_board());
  }
  if (from.spi_id() != 0) {
    _internal_set_spi_id(from._internal_spi_id());
  }
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
}

void UltrasonicDistance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.UltrasonicDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicDistance::CopyFrom(const UltrasonicDistance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.UltrasonicDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicDistance::IsInitialized() const {
  return true;
}

void UltrasonicDistance::InternalSwap(UltrasonicDistance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  arc_points_.InternalSwap(&other->arc_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UltrasonicDistance, address_)
      + sizeof(UltrasonicDistance::address_)
      - PROTOBUF_FIELD_OFFSET(UltrasonicDistance, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicDistance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[32]);
}

// ===================================================================

class UltrasonicDistances::_Internal {
 public:
};

UltrasonicDistances::UltrasonicDistances(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  distances_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.UltrasonicDistances)
}
UltrasonicDistances::UltrasonicDistances(const UltrasonicDistances& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      distances_(from.distances_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensors.UltrasonicDistances)
}

void UltrasonicDistances::SharedCtor() {
}

UltrasonicDistances::~UltrasonicDistances() {
  // @@protoc_insertion_point(destructor:sensors.UltrasonicDistances)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UltrasonicDistances::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UltrasonicDistances::ArenaDtor(void* object) {
  UltrasonicDistances* _this = reinterpret_cast< UltrasonicDistances* >(object);
  (void)_this;
}
void UltrasonicDistances::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UltrasonicDistances::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UltrasonicDistances::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.UltrasonicDistances)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distances_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UltrasonicDistances::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.UltrasonicDistance distances = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_distances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicDistances::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.UltrasonicDistances)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.UltrasonicDistance distances = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_distances_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_distances(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.UltrasonicDistances)
  return target;
}

size_t UltrasonicDistances::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.UltrasonicDistances)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.UltrasonicDistance distances = 1;
  total_size += 1UL * this->_internal_distances_size();
  for (const auto& msg : this->distances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UltrasonicDistances::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.UltrasonicDistances)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicDistances* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UltrasonicDistances>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.UltrasonicDistances)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.UltrasonicDistances)
    MergeFrom(*source);
  }
}

void UltrasonicDistances::MergeFrom(const UltrasonicDistances& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.UltrasonicDistances)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  distances_.MergeFrom(from.distances_);
}

void UltrasonicDistances::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.UltrasonicDistances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicDistances::CopyFrom(const UltrasonicDistances& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.UltrasonicDistances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicDistances::IsInitialized() const {
  return true;
}

void UltrasonicDistances::InternalSwap(UltrasonicDistances* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  distances_.InternalSwap(&other->distances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicDistances::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[33]);
}

// ===================================================================

class UltrasonicCurve::_Internal {
 public:
};

UltrasonicCurve::UltrasonicCurve(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  curve_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.UltrasonicCurve)
}
UltrasonicCurve::UltrasonicCurve(const UltrasonicCurve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      curve_(from.curve_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&board_, &from.board_,
    static_cast<size_t>(reinterpret_cast<char*>(&address_) -
    reinterpret_cast<char*>(&board_)) + sizeof(address_));
  // @@protoc_insertion_point(copy_constructor:sensors.UltrasonicCurve)
}

void UltrasonicCurve::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&board_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&address_) -
    reinterpret_cast<char*>(&board_)) + sizeof(address_));
}

UltrasonicCurve::~UltrasonicCurve() {
  // @@protoc_insertion_point(destructor:sensors.UltrasonicCurve)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UltrasonicCurve::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UltrasonicCurve::ArenaDtor(void* object) {
  UltrasonicCurve* _this = reinterpret_cast< UltrasonicCurve* >(object);
  (void)_this;
}
void UltrasonicCurve::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UltrasonicCurve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UltrasonicCurve::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.UltrasonicCurve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  curve_.Clear();
  ::memset(&board_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&address_) -
      reinterpret_cast<char*>(&board_)) + sizeof(address_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UltrasonicCurve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 curve = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_curve(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_curve(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.UltrasonicCurve.Board board = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_board(static_cast<::sensors::UltrasonicCurve_Board>(val));
        } else goto handle_unusual;
        continue;
      // int32 spi_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          spi_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicCurve::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.UltrasonicCurve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 curve = 1;
  {
    int byte_size = _curve_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_curve(), byte_size, target);
    }
  }

  // .sensors.UltrasonicCurve.Board board = 2;
  if (this->board() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_board(), target);
  }

  // int32 spi_id = 3;
  if (this->spi_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_spi_id(), target);
  }

  // int32 address = 4;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.UltrasonicCurve)
  return target;
}

size_t UltrasonicCurve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.UltrasonicCurve)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 curve = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->curve_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _curve_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .sensors.UltrasonicCurve.Board board = 2;
  if (this->board() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_board());
  }

  // int32 spi_id = 3;
  if (this->spi_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spi_id());
  }

  // int32 address = 4;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UltrasonicCurve::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.UltrasonicCurve)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicCurve* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UltrasonicCurve>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.UltrasonicCurve)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.UltrasonicCurve)
    MergeFrom(*source);
  }
}

void UltrasonicCurve::MergeFrom(const UltrasonicCurve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.UltrasonicCurve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  curve_.MergeFrom(from.curve_);
  if (from.board() != 0) {
    _internal_set_board(from._internal_board());
  }
  if (from.spi_id() != 0) {
    _internal_set_spi_id(from._internal_spi_id());
  }
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
}

void UltrasonicCurve::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.UltrasonicCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicCurve::CopyFrom(const UltrasonicCurve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.UltrasonicCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicCurve::IsInitialized() const {
  return true;
}

void UltrasonicCurve::InternalSwap(UltrasonicCurve* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  curve_.InternalSwap(&other->curve_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UltrasonicCurve, address_)
      + sizeof(UltrasonicCurve::address_)
      - PROTOBUF_FIELD_OFFSET(UltrasonicCurve, board_)>(
          reinterpret_cast<char*>(&board_),
          reinterpret_cast<char*>(&other->board_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicCurve::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[34]);
}

// ===================================================================

class RadarFilter::_Internal {
 public:
};

RadarFilter::RadarFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.RadarFilter)
}
RadarFilter::RadarFilter(const RadarFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filter_ = from.filter_;
  // @@protoc_insertion_point(copy_constructor:sensors.RadarFilter)
}

void RadarFilter::SharedCtor() {
filter_ = 0;
}

RadarFilter::~RadarFilter() {
  // @@protoc_insertion_point(destructor:sensors.RadarFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RadarFilter::ArenaDtor(void* object) {
  RadarFilter* _this = reinterpret_cast< RadarFilter* >(object);
  (void)_this;
}
void RadarFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RadarFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.RadarFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.RadarFilter.Filter filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_filter(static_cast<::sensors::RadarFilter_Filter>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.RadarFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.RadarFilter.Filter filter = 1;
  if (this->filter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.RadarFilter)
  return target;
}

size_t RadarFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.RadarFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.RadarFilter.Filter filter = 1;
  if (this->filter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_filter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.RadarFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.RadarFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.RadarFilter)
    MergeFrom(*source);
  }
}

void RadarFilter::MergeFrom(const RadarFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.RadarFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filter() != 0) {
    _internal_set_filter(from._internal_filter());
  }
}

void RadarFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.RadarFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarFilter::CopyFrom(const RadarFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.RadarFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarFilter::IsInitialized() const {
  return true;
}

void RadarFilter::InternalSwap(RadarFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[35]);
}

// ===================================================================

class RadarCtrl::_Internal {
 public:
};

RadarCtrl::RadarCtrl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.RadarCtrl)
}
RadarCtrl::RadarCtrl(const RadarCtrl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radar_ = from.radar_;
  // @@protoc_insertion_point(copy_constructor:sensors.RadarCtrl)
}

void RadarCtrl::SharedCtor() {
radar_ = 0;
}

RadarCtrl::~RadarCtrl() {
  // @@protoc_insertion_point(destructor:sensors.RadarCtrl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarCtrl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RadarCtrl::ArenaDtor(void* object) {
  RadarCtrl* _this = reinterpret_cast< RadarCtrl* >(object);
  (void)_this;
}
void RadarCtrl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarCtrl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RadarCtrl::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.RadarCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radar_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarCtrl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.RadarCtrl.Radar radar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_radar(static_cast<::sensors::RadarCtrl_Radar>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarCtrl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.RadarCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.RadarCtrl.Radar radar = 1;
  if (this->radar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_radar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.RadarCtrl)
  return target;
}

size_t RadarCtrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.RadarCtrl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.RadarCtrl.Radar radar = 1;
  if (this->radar() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_radar());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarCtrl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.RadarCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarCtrl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarCtrl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.RadarCtrl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.RadarCtrl)
    MergeFrom(*source);
  }
}

void RadarCtrl::MergeFrom(const RadarCtrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.RadarCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.radar() != 0) {
    _internal_set_radar(from._internal_radar());
  }
}

void RadarCtrl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.RadarCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarCtrl::CopyFrom(const RadarCtrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.RadarCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarCtrl::IsInitialized() const {
  return true;
}

void RadarCtrl::InternalSwap(RadarCtrl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(radar_, other->radar_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarCtrl::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[36]);
}

// ===================================================================

class RadarPoint::_Internal {
 public:
};

RadarPoint::RadarPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.RadarPoint)
}
RadarPoint::RadarPoint(const RadarPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&cross_section_) -
    reinterpret_cast<char*>(&x_)) + sizeof(cross_section_));
  // @@protoc_insertion_point(copy_constructor:sensors.RadarPoint)
}

void RadarPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cross_section_) -
    reinterpret_cast<char*>(&x_)) + sizeof(cross_section_));
}

RadarPoint::~RadarPoint() {
  // @@protoc_insertion_point(destructor:sensors.RadarPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RadarPoint::ArenaDtor(void* object) {
  RadarPoint* _this = reinterpret_cast< RadarPoint* >(object);
  (void)_this;
}
void RadarPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RadarPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.RadarPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cross_section_) -
      reinterpret_cast<char*>(&x_)) + sizeof(cross_section_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double doppler = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          doppler_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cross_section = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          cross_section_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.RadarPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double doppler = 4;
  if (!(this->doppler() <= 0 && this->doppler() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_doppler(), target);
  }

  // double cross_section = 5;
  if (!(this->cross_section() <= 0 && this->cross_section() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_cross_section(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.RadarPoint)
  return target;
}

size_t RadarPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.RadarPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double doppler = 4;
  if (!(this->doppler() <= 0 && this->doppler() >= 0)) {
    total_size += 1 + 8;
  }

  // double cross_section = 5;
  if (!(this->cross_section() <= 0 && this->cross_section() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.RadarPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.RadarPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.RadarPoint)
    MergeFrom(*source);
  }
}

void RadarPoint::MergeFrom(const RadarPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.RadarPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.doppler() <= 0 && from.doppler() >= 0)) {
    _internal_set_doppler(from._internal_doppler());
  }
  if (!(from.cross_section() <= 0 && from.cross_section() >= 0)) {
    _internal_set_cross_section(from._internal_cross_section());
  }
}

void RadarPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.RadarPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarPoint::CopyFrom(const RadarPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.RadarPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarPoint::IsInitialized() const {
  return true;
}

void RadarPoint::InternalSwap(RadarPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarPoint, cross_section_)
      + sizeof(RadarPoint::cross_section_)
      - PROTOBUF_FIELD_OFFSET(RadarPoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[37]);
}

// ===================================================================

class RadarPoints::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const RadarPoints* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
RadarPoints::_Internal::timestamp(const RadarPoints* msg) {
  return *msg->timestamp_;
}
void RadarPoints::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
RadarPoints::RadarPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.RadarPoints)
}
RadarPoints::RadarPoints(const RadarPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  source_ = from.source_;
  // @@protoc_insertion_point(copy_constructor:sensors.RadarPoints)
}

void RadarPoints::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(source_));
}

RadarPoints::~RadarPoints() {
  // @@protoc_insertion_point(destructor:sensors.RadarPoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void RadarPoints::ArenaDtor(void* object) {
  RadarPoints* _this = reinterpret_cast< RadarPoints* >(object);
  (void)_this;
}
void RadarPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RadarPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.RadarPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  source_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.RadarPoint points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .sensors.RadarPoints.Radar source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::sensors::RadarPoints_Radar>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.RadarPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.RadarPoint points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  // .sensors.RadarPoints.Radar source = 2;
  if (this->source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_source(), target);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.RadarPoints)
  return target;
}

size_t RadarPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.RadarPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.RadarPoint points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .sensors.RadarPoints.Radar source = 2;
  if (this->source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.RadarPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.RadarPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.RadarPoints)
    MergeFrom(*source);
  }
}

void RadarPoints::MergeFrom(const RadarPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.RadarPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.source() != 0) {
    _internal_set_source(from._internal_source());
  }
}

void RadarPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.RadarPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarPoints::CopyFrom(const RadarPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.RadarPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarPoints::IsInitialized() const {
  return true;
}

void RadarPoints::InternalSwap(RadarPoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarPoints, source_)
      + sizeof(RadarPoints::source_)
      - PROTOBUF_FIELD_OFFSET(RadarPoints, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarPoints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[38]);
}

// ===================================================================

class ChairSpeed::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const ChairSpeed* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ChairSpeed::_Internal::timestamp(const ChairSpeed* msg) {
  return *msg->timestamp_;
}
void ChairSpeed::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
ChairSpeed::ChairSpeed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.ChairSpeed)
}
ChairSpeed::ChairSpeed(const ChairSpeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  speed_m_p_s_ = from.speed_m_p_s_;
  // @@protoc_insertion_point(copy_constructor:sensors.ChairSpeed)
}

void ChairSpeed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&speed_m_p_s_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(speed_m_p_s_));
}

ChairSpeed::~ChairSpeed() {
  // @@protoc_insertion_point(destructor:sensors.ChairSpeed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChairSpeed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void ChairSpeed::ArenaDtor(void* object) {
  ChairSpeed* _this = reinterpret_cast< ChairSpeed* >(object);
  (void)_this;
}
void ChairSpeed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChairSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChairSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ChairSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  speed_m_p_s_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChairSpeed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double speed_m_p_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          speed_m_p_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChairSpeed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ChairSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double speed_m_p_s = 1;
  if (!(this->speed_m_p_s() <= 0 && this->speed_m_p_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_speed_m_p_s(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ChairSpeed)
  return target;
}

size_t ChairSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ChairSpeed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // double speed_m_p_s = 1;
  if (!(this->speed_m_p_s() <= 0 && this->speed_m_p_s() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChairSpeed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.ChairSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  const ChairSpeed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChairSpeed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.ChairSpeed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.ChairSpeed)
    MergeFrom(*source);
  }
}

void ChairSpeed::MergeFrom(const ChairSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ChairSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (!(from.speed_m_p_s() <= 0 && from.speed_m_p_s() >= 0)) {
    _internal_set_speed_m_p_s(from._internal_speed_m_p_s());
  }
}

void ChairSpeed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.ChairSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChairSpeed::CopyFrom(const ChairSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ChairSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChairSpeed::IsInitialized() const {
  return true;
}

void ChairSpeed::InternalSwap(ChairSpeed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChairSpeed, speed_m_p_s_)
      + sizeof(ChairSpeed::speed_m_p_s_)
      - PROTOBUF_FIELD_OFFSET(ChairSpeed, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChairSpeed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[39]);
}

// ===================================================================

class ImuCtrl::_Internal {
 public:
};

ImuCtrl::ImuCtrl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.ImuCtrl)
}
ImuCtrl::ImuCtrl(const ImuCtrl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imu_ = from.imu_;
  // @@protoc_insertion_point(copy_constructor:sensors.ImuCtrl)
}

void ImuCtrl::SharedCtor() {
imu_ = 0;
}

ImuCtrl::~ImuCtrl() {
  // @@protoc_insertion_point(destructor:sensors.ImuCtrl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImuCtrl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ImuCtrl::ArenaDtor(void* object) {
  ImuCtrl* _this = reinterpret_cast< ImuCtrl* >(object);
  (void)_this;
}
void ImuCtrl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImuCtrl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImuCtrl::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ImuCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imu_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImuCtrl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.Imu imu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_imu(static_cast<::sensors::Imu>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImuCtrl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ImuCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.Imu imu = 1;
  if (this->imu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_imu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ImuCtrl)
  return target;
}

size_t ImuCtrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ImuCtrl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.Imu imu = 1;
  if (this->imu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_imu());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuCtrl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.ImuCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuCtrl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImuCtrl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.ImuCtrl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.ImuCtrl)
    MergeFrom(*source);
  }
}

void ImuCtrl::MergeFrom(const ImuCtrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ImuCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imu() != 0) {
    _internal_set_imu(from._internal_imu());
  }
}

void ImuCtrl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.ImuCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuCtrl::CopyFrom(const ImuCtrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ImuCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuCtrl::IsInitialized() const {
  return true;
}

void ImuCtrl::InternalSwap(ImuCtrl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(imu_, other->imu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuCtrl::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[40]);
}

// ===================================================================

class ImuData::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const ImuData* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ImuData::_Internal::timestamp(const ImuData* msg) {
  return *msg->timestamp_;
}
void ImuData::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
ImuData::ImuData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.ImuData)
}
ImuData::ImuData(const ImuData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&quaternion_x_, &from.quaternion_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&quaternion_x_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:sensors.ImuData)
}

void ImuData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(source_));
}

ImuData::~ImuData() {
  // @@protoc_insertion_point(destructor:sensors.ImuData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImuData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void ImuData::ArenaDtor(void* object) {
  ImuData* _this = reinterpret_cast< ImuData* >(object);
  (void)_this;
}
void ImuData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImuData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImuData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ImuData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&quaternion_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&quaternion_x_)) + sizeof(source_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImuData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double quaternion_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          quaternion_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double quaternion_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          quaternion_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double quaternion_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          quaternion_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double quaternion_w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          quaternion_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acceleration_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          acceleration_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acceleration_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          acceleration_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acceleration_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          acceleration_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gyro_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          gyro_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gyro_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          gyro_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gyro_z = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          gyro_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double euler_x = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          euler_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double euler_y = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          euler_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double euler_z = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          euler_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double accelerometer_x = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          accelerometer_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double accelerometer_y = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          accelerometer_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double accelerometer_z = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          accelerometer_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double magnetometer_x = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          magnetometer_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double magnetometer_y = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          magnetometer_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double magnetometer_z = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          magnetometer_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gravity_x = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          gravity_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gravity_y = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          gravity_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gravity_z = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          gravity_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sensors.ImuData.CalibrationStatus cal_system = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cal_system(static_cast<::sensors::ImuData_CalibrationStatus>(val));
        } else goto handle_unusual;
        continue;
      // .sensors.ImuData.CalibrationStatus cal_gyroscope = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cal_gyroscope(static_cast<::sensors::ImuData_CalibrationStatus>(val));
        } else goto handle_unusual;
        continue;
      // .sensors.ImuData.CalibrationStatus cal_accelerometer = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cal_accelerometer(static_cast<::sensors::ImuData_CalibrationStatus>(val));
        } else goto handle_unusual;
        continue;
      // .sensors.ImuData.CalibrationStatus cal_magnetometer = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cal_magnetometer(static_cast<::sensors::ImuData_CalibrationStatus>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.Imu source = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::sensors::Imu>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImuData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ImuData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double quaternion_x = 1;
  if (!(this->quaternion_x() <= 0 && this->quaternion_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_quaternion_x(), target);
  }

  // double quaternion_y = 2;
  if (!(this->quaternion_y() <= 0 && this->quaternion_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_quaternion_y(), target);
  }

  // double quaternion_z = 3;
  if (!(this->quaternion_z() <= 0 && this->quaternion_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_quaternion_z(), target);
  }

  // double quaternion_w = 4;
  if (!(this->quaternion_w() <= 0 && this->quaternion_w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_quaternion_w(), target);
  }

  // double acceleration_x = 5;
  if (!(this->acceleration_x() <= 0 && this->acceleration_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_acceleration_x(), target);
  }

  // double acceleration_y = 6;
  if (!(this->acceleration_y() <= 0 && this->acceleration_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_acceleration_y(), target);
  }

  // double acceleration_z = 7;
  if (!(this->acceleration_z() <= 0 && this->acceleration_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_acceleration_z(), target);
  }

  // double gyro_x = 8;
  if (!(this->gyro_x() <= 0 && this->gyro_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_gyro_x(), target);
  }

  // double gyro_y = 9;
  if (!(this->gyro_y() <= 0 && this->gyro_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_gyro_y(), target);
  }

  // double gyro_z = 10;
  if (!(this->gyro_z() <= 0 && this->gyro_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_gyro_z(), target);
  }

  // double euler_x = 11;
  if (!(this->euler_x() <= 0 && this->euler_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_euler_x(), target);
  }

  // double euler_y = 12;
  if (!(this->euler_y() <= 0 && this->euler_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_euler_y(), target);
  }

  // double euler_z = 13;
  if (!(this->euler_z() <= 0 && this->euler_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_euler_z(), target);
  }

  // double accelerometer_x = 14;
  if (!(this->accelerometer_x() <= 0 && this->accelerometer_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_accelerometer_x(), target);
  }

  // double accelerometer_y = 15;
  if (!(this->accelerometer_y() <= 0 && this->accelerometer_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_accelerometer_y(), target);
  }

  // double accelerometer_z = 16;
  if (!(this->accelerometer_z() <= 0 && this->accelerometer_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_accelerometer_z(), target);
  }

  // double magnetometer_x = 17;
  if (!(this->magnetometer_x() <= 0 && this->magnetometer_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_magnetometer_x(), target);
  }

  // double magnetometer_y = 18;
  if (!(this->magnetometer_y() <= 0 && this->magnetometer_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_magnetometer_y(), target);
  }

  // double magnetometer_z = 19;
  if (!(this->magnetometer_z() <= 0 && this->magnetometer_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_magnetometer_z(), target);
  }

  // double gravity_x = 20;
  if (!(this->gravity_x() <= 0 && this->gravity_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_gravity_x(), target);
  }

  // double gravity_y = 21;
  if (!(this->gravity_y() <= 0 && this->gravity_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_gravity_y(), target);
  }

  // double gravity_z = 22;
  if (!(this->gravity_z() <= 0 && this->gravity_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_gravity_z(), target);
  }

  // .sensors.ImuData.CalibrationStatus cal_system = 23;
  if (this->cal_system() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_cal_system(), target);
  }

  // .sensors.ImuData.CalibrationStatus cal_gyroscope = 24;
  if (this->cal_gyroscope() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_cal_gyroscope(), target);
  }

  // .sensors.ImuData.CalibrationStatus cal_accelerometer = 25;
  if (this->cal_accelerometer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      25, this->_internal_cal_accelerometer(), target);
  }

  // .sensors.ImuData.CalibrationStatus cal_magnetometer = 26;
  if (this->cal_magnetometer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      26, this->_internal_cal_magnetometer(), target);
  }

  // .google.protobuf.Timestamp timestamp = 27;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::timestamp(this), target, stream);
  }

  // .sensors.Imu source = 28;
  if (this->source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      28, this->_internal_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ImuData)
  return target;
}

size_t ImuData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ImuData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 27;
  if (this->has_timestamp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // double quaternion_x = 1;
  if (!(this->quaternion_x() <= 0 && this->quaternion_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double quaternion_y = 2;
  if (!(this->quaternion_y() <= 0 && this->quaternion_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double quaternion_z = 3;
  if (!(this->quaternion_z() <= 0 && this->quaternion_z() >= 0)) {
    total_size += 1 + 8;
  }

  // double quaternion_w = 4;
  if (!(this->quaternion_w() <= 0 && this->quaternion_w() >= 0)) {
    total_size += 1 + 8;
  }

  // double acceleration_x = 5;
  if (!(this->acceleration_x() <= 0 && this->acceleration_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double acceleration_y = 6;
  if (!(this->acceleration_y() <= 0 && this->acceleration_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double acceleration_z = 7;
  if (!(this->acceleration_z() <= 0 && this->acceleration_z() >= 0)) {
    total_size += 1 + 8;
  }

  // double gyro_x = 8;
  if (!(this->gyro_x() <= 0 && this->gyro_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double gyro_y = 9;
  if (!(this->gyro_y() <= 0 && this->gyro_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double gyro_z = 10;
  if (!(this->gyro_z() <= 0 && this->gyro_z() >= 0)) {
    total_size += 1 + 8;
  }

  // double euler_x = 11;
  if (!(this->euler_x() <= 0 && this->euler_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double euler_y = 12;
  if (!(this->euler_y() <= 0 && this->euler_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double euler_z = 13;
  if (!(this->euler_z() <= 0 && this->euler_z() >= 0)) {
    total_size += 1 + 8;
  }

  // double accelerometer_x = 14;
  if (!(this->accelerometer_x() <= 0 && this->accelerometer_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double accelerometer_y = 15;
  if (!(this->accelerometer_y() <= 0 && this->accelerometer_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double accelerometer_z = 16;
  if (!(this->accelerometer_z() <= 0 && this->accelerometer_z() >= 0)) {
    total_size += 2 + 8;
  }

  // double magnetometer_x = 17;
  if (!(this->magnetometer_x() <= 0 && this->magnetometer_x() >= 0)) {
    total_size += 2 + 8;
  }

  // double magnetometer_y = 18;
  if (!(this->magnetometer_y() <= 0 && this->magnetometer_y() >= 0)) {
    total_size += 2 + 8;
  }

  // double magnetometer_z = 19;
  if (!(this->magnetometer_z() <= 0 && this->magnetometer_z() >= 0)) {
    total_size += 2 + 8;
  }

  // double gravity_x = 20;
  if (!(this->gravity_x() <= 0 && this->gravity_x() >= 0)) {
    total_size += 2 + 8;
  }

  // double gravity_y = 21;
  if (!(this->gravity_y() <= 0 && this->gravity_y() >= 0)) {
    total_size += 2 + 8;
  }

  // double gravity_z = 22;
  if (!(this->gravity_z() <= 0 && this->gravity_z() >= 0)) {
    total_size += 2 + 8;
  }

  // .sensors.ImuData.CalibrationStatus cal_system = 23;
  if (this->cal_system() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cal_system());
  }

  // .sensors.ImuData.CalibrationStatus cal_gyroscope = 24;
  if (this->cal_gyroscope() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cal_gyroscope());
  }

  // .sensors.ImuData.CalibrationStatus cal_accelerometer = 25;
  if (this->cal_accelerometer() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cal_accelerometer());
  }

  // .sensors.ImuData.CalibrationStatus cal_magnetometer = 26;
  if (this->cal_magnetometer() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cal_magnetometer());
  }

  // .sensors.Imu source = 28;
  if (this->source() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImuData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.ImuData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.ImuData)
    MergeFrom(*source);
  }
}

void ImuData::MergeFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (!(from.quaternion_x() <= 0 && from.quaternion_x() >= 0)) {
    _internal_set_quaternion_x(from._internal_quaternion_x());
  }
  if (!(from.quaternion_y() <= 0 && from.quaternion_y() >= 0)) {
    _internal_set_quaternion_y(from._internal_quaternion_y());
  }
  if (!(from.quaternion_z() <= 0 && from.quaternion_z() >= 0)) {
    _internal_set_quaternion_z(from._internal_quaternion_z());
  }
  if (!(from.quaternion_w() <= 0 && from.quaternion_w() >= 0)) {
    _internal_set_quaternion_w(from._internal_quaternion_w());
  }
  if (!(from.acceleration_x() <= 0 && from.acceleration_x() >= 0)) {
    _internal_set_acceleration_x(from._internal_acceleration_x());
  }
  if (!(from.acceleration_y() <= 0 && from.acceleration_y() >= 0)) {
    _internal_set_acceleration_y(from._internal_acceleration_y());
  }
  if (!(from.acceleration_z() <= 0 && from.acceleration_z() >= 0)) {
    _internal_set_acceleration_z(from._internal_acceleration_z());
  }
  if (!(from.gyro_x() <= 0 && from.gyro_x() >= 0)) {
    _internal_set_gyro_x(from._internal_gyro_x());
  }
  if (!(from.gyro_y() <= 0 && from.gyro_y() >= 0)) {
    _internal_set_gyro_y(from._internal_gyro_y());
  }
  if (!(from.gyro_z() <= 0 && from.gyro_z() >= 0)) {
    _internal_set_gyro_z(from._internal_gyro_z());
  }
  if (!(from.euler_x() <= 0 && from.euler_x() >= 0)) {
    _internal_set_euler_x(from._internal_euler_x());
  }
  if (!(from.euler_y() <= 0 && from.euler_y() >= 0)) {
    _internal_set_euler_y(from._internal_euler_y());
  }
  if (!(from.euler_z() <= 0 && from.euler_z() >= 0)) {
    _internal_set_euler_z(from._internal_euler_z());
  }
  if (!(from.accelerometer_x() <= 0 && from.accelerometer_x() >= 0)) {
    _internal_set_accelerometer_x(from._internal_accelerometer_x());
  }
  if (!(from.accelerometer_y() <= 0 && from.accelerometer_y() >= 0)) {
    _internal_set_accelerometer_y(from._internal_accelerometer_y());
  }
  if (!(from.accelerometer_z() <= 0 && from.accelerometer_z() >= 0)) {
    _internal_set_accelerometer_z(from._internal_accelerometer_z());
  }
  if (!(from.magnetometer_x() <= 0 && from.magnetometer_x() >= 0)) {
    _internal_set_magnetometer_x(from._internal_magnetometer_x());
  }
  if (!(from.magnetometer_y() <= 0 && from.magnetometer_y() >= 0)) {
    _internal_set_magnetometer_y(from._internal_magnetometer_y());
  }
  if (!(from.magnetometer_z() <= 0 && from.magnetometer_z() >= 0)) {
    _internal_set_magnetometer_z(from._internal_magnetometer_z());
  }
  if (!(from.gravity_x() <= 0 && from.gravity_x() >= 0)) {
    _internal_set_gravity_x(from._internal_gravity_x());
  }
  if (!(from.gravity_y() <= 0 && from.gravity_y() >= 0)) {
    _internal_set_gravity_y(from._internal_gravity_y());
  }
  if (!(from.gravity_z() <= 0 && from.gravity_z() >= 0)) {
    _internal_set_gravity_z(from._internal_gravity_z());
  }
  if (from.cal_system() != 0) {
    _internal_set_cal_system(from._internal_cal_system());
  }
  if (from.cal_gyroscope() != 0) {
    _internal_set_cal_gyroscope(from._internal_cal_gyroscope());
  }
  if (from.cal_accelerometer() != 0) {
    _internal_set_cal_accelerometer(from._internal_cal_accelerometer());
  }
  if (from.cal_magnetometer() != 0) {
    _internal_set_cal_magnetometer(from._internal_cal_magnetometer());
  }
  if (from.source() != 0) {
    _internal_set_source(from._internal_source());
  }
}

void ImuData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuData::CopyFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData::IsInitialized() const {
  return true;
}

void ImuData::InternalSwap(ImuData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImuData, source_)
      + sizeof(ImuData::source_)
      - PROTOBUF_FIELD_OFFSET(ImuData, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[41]);
}

// ===================================================================

class ChairMode::_Internal {
 public:
};

ChairMode::ChairMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.ChairMode)
}
ChairMode::ChairMode(const ChairMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_drive_mode_ = from.is_drive_mode_;
  // @@protoc_insertion_point(copy_constructor:sensors.ChairMode)
}

void ChairMode::SharedCtor() {
is_drive_mode_ = false;
}

ChairMode::~ChairMode() {
  // @@protoc_insertion_point(destructor:sensors.ChairMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChairMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChairMode::ArenaDtor(void* object) {
  ChairMode* _this = reinterpret_cast< ChairMode* >(object);
  (void)_this;
}
void ChairMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChairMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChairMode::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ChairMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_drive_mode_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChairMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_drive_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_drive_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChairMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ChairMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_drive_mode = 1;
  if (this->is_drive_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_drive_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ChairMode)
  return target;
}

size_t ChairMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ChairMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_drive_mode = 1;
  if (this->is_drive_mode() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChairMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.ChairMode)
  GOOGLE_DCHECK_NE(&from, this);
  const ChairMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChairMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.ChairMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.ChairMode)
    MergeFrom(*source);
  }
}

void ChairMode::MergeFrom(const ChairMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ChairMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_drive_mode() != 0) {
    _internal_set_is_drive_mode(from._internal_is_drive_mode());
  }
}

void ChairMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.ChairMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChairMode::CopyFrom(const ChairMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ChairMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChairMode::IsInitialized() const {
  return true;
}

void ChairMode::InternalSwap(ChairMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(is_drive_mode_, other->is_drive_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChairMode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[42]);
}

// ===================================================================

class ChairProfile::_Internal {
 public:
};

ChairProfile::ChairProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.ChairProfile)
}
ChairProfile::ChairProfile(const ChairProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  profile_ = from.profile_;
  // @@protoc_insertion_point(copy_constructor:sensors.ChairProfile)
}

void ChairProfile::SharedCtor() {
profile_ = 0;
}

ChairProfile::~ChairProfile() {
  // @@protoc_insertion_point(destructor:sensors.ChairProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChairProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChairProfile::ArenaDtor(void* object) {
  ChairProfile* _this = reinterpret_cast< ChairProfile* >(object);
  (void)_this;
}
void ChairProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChairProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChairProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ChairProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  profile_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChairProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 profile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          profile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChairProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ChairProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 profile = 1;
  if (this->profile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_profile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ChairProfile)
  return target;
}

size_t ChairProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ChairProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 profile = 1;
  if (this->profile() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_profile());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChairProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.ChairProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const ChairProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChairProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.ChairProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.ChairProfile)
    MergeFrom(*source);
  }
}

void ChairProfile::MergeFrom(const ChairProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ChairProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.profile() != 0) {
    _internal_set_profile(from._internal_profile());
  }
}

void ChairProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.ChairProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChairProfile::CopyFrom(const ChairProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ChairProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChairProfile::IsInitialized() const {
  return true;
}

void ChairProfile::InternalSwap(ChairProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(profile_, other->profile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChairProfile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[43]);
}

// ===================================================================

class SpeedSetting::_Internal {
 public:
};

SpeedSetting::SpeedSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.SpeedSetting)
}
SpeedSetting::SpeedSetting(const SpeedSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  speed_setting_ = from.speed_setting_;
  // @@protoc_insertion_point(copy_constructor:sensors.SpeedSetting)
}

void SpeedSetting::SharedCtor() {
speed_setting_ = 0;
}

SpeedSetting::~SpeedSetting() {
  // @@protoc_insertion_point(destructor:sensors.SpeedSetting)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeedSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpeedSetting::ArenaDtor(void* object) {
  SpeedSetting* _this = reinterpret_cast< SpeedSetting* >(object);
  (void)_this;
}
void SpeedSetting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeedSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeedSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.SpeedSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speed_setting_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 speed_setting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          speed_setting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedSetting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.SpeedSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 speed_setting = 1;
  if (this->speed_setting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_speed_setting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.SpeedSetting)
  return target;
}

size_t SpeedSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.SpeedSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 speed_setting = 1;
  if (this->speed_setting() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_speed_setting());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.SpeedSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.SpeedSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.SpeedSetting)
    MergeFrom(*source);
  }
}

void SpeedSetting::MergeFrom(const SpeedSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.SpeedSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.speed_setting() != 0) {
    _internal_set_speed_setting(from._internal_speed_setting());
  }
}

void SpeedSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.SpeedSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedSetting::CopyFrom(const SpeedSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.SpeedSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedSetting::IsInitialized() const {
  return true;
}

void SpeedSetting::InternalSwap(SpeedSetting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(speed_setting_, other->speed_setting_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedSetting::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[44]);
}

// ===================================================================

class JoystickData::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const JoystickData* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
JoystickData::_Internal::timestamp(const JoystickData* msg) {
  return *msg->timestamp_;
}
void JoystickData::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
JoystickData::JoystickData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.JoystickData)
}
JoystickData::JoystickData(const JoystickData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  joystick_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_joystick_zone().empty()) {
    joystick_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_joystick_zone(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&forward_back_, &from.forward_back_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_right_) -
    reinterpret_cast<char*>(&forward_back_)) + sizeof(left_right_));
  // @@protoc_insertion_point(copy_constructor:sensors.JoystickData)
}

void JoystickData::SharedCtor() {
joystick_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&left_right_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(left_right_));
}

JoystickData::~JoystickData() {
  // @@protoc_insertion_point(destructor:sensors.JoystickData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoystickData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  joystick_zone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void JoystickData::ArenaDtor(void* object) {
  JoystickData* _this = reinterpret_cast< JoystickData* >(object);
  (void)_this;
}
void JoystickData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoystickData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoystickData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.JoystickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joystick_zone_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&forward_back_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_right_) -
      reinterpret_cast<char*>(&forward_back_)) + sizeof(left_right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoystickData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 forward_back = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          forward_back_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 left_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          left_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string joystick_zone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_joystick_zone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensors.JoystickData.joystick_zone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoystickData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.JoystickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 forward_back = 1;
  if (this->forward_back() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_forward_back(), target);
  }

  // int32 left_right = 2;
  if (this->left_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_left_right(), target);
  }

  // string joystick_zone = 3;
  if (!this->joystick_zone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_joystick_zone().data(), static_cast<int>(this->_internal_joystick_zone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors.JoystickData.joystick_zone");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_joystick_zone(), target);
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.JoystickData)
  return target;
}

size_t JoystickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.JoystickData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string joystick_zone = 3;
  if (!this->joystick_zone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_joystick_zone());
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // int32 forward_back = 1;
  if (this->forward_back() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_forward_back());
  }

  // int32 left_right = 2;
  if (this->left_right() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_left_right());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoystickData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.JoystickData)
  GOOGLE_DCHECK_NE(&from, this);
  const JoystickData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoystickData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.JoystickData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.JoystickData)
    MergeFrom(*source);
  }
}

void JoystickData::MergeFrom(const JoystickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.JoystickData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.joystick_zone().empty()) {
    _internal_set_joystick_zone(from._internal_joystick_zone());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.forward_back() != 0) {
    _internal_set_forward_back(from._internal_forward_back());
  }
  if (from.left_right() != 0) {
    _internal_set_left_right(from._internal_left_right());
  }
}

void JoystickData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.JoystickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoystickData::CopyFrom(const JoystickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.JoystickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoystickData::IsInitialized() const {
  return true;
}

void JoystickData::InternalSwap(JoystickData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &joystick_zone_, GetArenaForAllocation(),
      &other->joystick_zone_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoystickData, left_right_)
      + sizeof(JoystickData::left_right_)
      - PROTOBUF_FIELD_OFFSET(JoystickData, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoystickData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[45]);
}

// ===================================================================

class Joystick::_Internal {
 public:
};

Joystick::Joystick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.Joystick)
}
Joystick::Joystick(const Joystick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&forward_back_, &from.forward_back_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_right_) -
    reinterpret_cast<char*>(&forward_back_)) + sizeof(left_right_));
  // @@protoc_insertion_point(copy_constructor:sensors.Joystick)
}

void Joystick::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&forward_back_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&left_right_) -
    reinterpret_cast<char*>(&forward_back_)) + sizeof(left_right_));
}

Joystick::~Joystick() {
  // @@protoc_insertion_point(destructor:sensors.Joystick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Joystick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Joystick::ArenaDtor(void* object) {
  Joystick* _this = reinterpret_cast< Joystick* >(object);
  (void)_this;
}
void Joystick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Joystick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Joystick::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Joystick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&forward_back_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_right_) -
      reinterpret_cast<char*>(&forward_back_)) + sizeof(left_right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Joystick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 forward_back = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          forward_back_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 left_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          left_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Joystick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Joystick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 forward_back = 1;
  if (this->forward_back() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_forward_back(), target);
  }

  // int32 left_right = 2;
  if (this->left_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_left_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Joystick)
  return target;
}

size_t Joystick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Joystick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 forward_back = 1;
  if (this->forward_back() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_forward_back());
  }

  // int32 left_right = 2;
  if (this->left_right() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_left_right());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Joystick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.Joystick)
  GOOGLE_DCHECK_NE(&from, this);
  const Joystick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Joystick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.Joystick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.Joystick)
    MergeFrom(*source);
  }
}

void Joystick::MergeFrom(const Joystick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Joystick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.forward_back() != 0) {
    _internal_set_forward_back(from._internal_forward_back());
  }
  if (from.left_right() != 0) {
    _internal_set_left_right(from._internal_left_right());
  }
}

void Joystick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.Joystick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Joystick::CopyFrom(const Joystick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Joystick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joystick::IsInitialized() const {
  return true;
}

void Joystick::InternalSwap(Joystick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Joystick, left_right_)
      + sizeof(Joystick::left_right_)
      - PROTOBUF_FIELD_OFFSET(Joystick, forward_back_)>(
          reinterpret_cast<char*>(&forward_back_),
          reinterpret_cast<char*>(&other->forward_back_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Joystick::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[46]);
}

// ===================================================================

class BatteryVoltage::_Internal {
 public:
};

BatteryVoltage::BatteryVoltage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.BatteryVoltage)
}
BatteryVoltage::BatteryVoltage(const BatteryVoltage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  battery_voltage_ = from.battery_voltage_;
  // @@protoc_insertion_point(copy_constructor:sensors.BatteryVoltage)
}

void BatteryVoltage::SharedCtor() {
battery_voltage_ = 0;
}

BatteryVoltage::~BatteryVoltage() {
  // @@protoc_insertion_point(destructor:sensors.BatteryVoltage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatteryVoltage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatteryVoltage::ArenaDtor(void* object) {
  BatteryVoltage* _this = reinterpret_cast< BatteryVoltage* >(object);
  (void)_this;
}
void BatteryVoltage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatteryVoltage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatteryVoltage::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.BatteryVoltage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battery_voltage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryVoltage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double battery_voltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          battery_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatteryVoltage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.BatteryVoltage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double battery_voltage = 1;
  if (!(this->battery_voltage() <= 0 && this->battery_voltage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_battery_voltage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.BatteryVoltage)
  return target;
}

size_t BatteryVoltage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.BatteryVoltage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double battery_voltage = 1;
  if (!(this->battery_voltage() <= 0 && this->battery_voltage() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryVoltage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.BatteryVoltage)
  GOOGLE_DCHECK_NE(&from, this);
  const BatteryVoltage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatteryVoltage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.BatteryVoltage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.BatteryVoltage)
    MergeFrom(*source);
  }
}

void BatteryVoltage::MergeFrom(const BatteryVoltage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.BatteryVoltage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.battery_voltage() <= 0 && from.battery_voltage() >= 0)) {
    _internal_set_battery_voltage(from._internal_battery_voltage());
  }
}

void BatteryVoltage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.BatteryVoltage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryVoltage::CopyFrom(const BatteryVoltage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.BatteryVoltage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryVoltage::IsInitialized() const {
  return true;
}

void BatteryVoltage::InternalSwap(BatteryVoltage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(battery_voltage_, other->battery_voltage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryVoltage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[47]);
}

// ===================================================================

class BatteryPercent::_Internal {
 public:
};

BatteryPercent::BatteryPercent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.BatteryPercent)
}
BatteryPercent::BatteryPercent(const BatteryPercent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  battery_percentage_ = from.battery_percentage_;
  // @@protoc_insertion_point(copy_constructor:sensors.BatteryPercent)
}

void BatteryPercent::SharedCtor() {
battery_percentage_ = 0;
}

BatteryPercent::~BatteryPercent() {
  // @@protoc_insertion_point(destructor:sensors.BatteryPercent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatteryPercent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatteryPercent::ArenaDtor(void* object) {
  BatteryPercent* _this = reinterpret_cast< BatteryPercent* >(object);
  (void)_this;
}
void BatteryPercent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatteryPercent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatteryPercent::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.BatteryPercent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battery_percentage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryPercent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 battery_percentage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          battery_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatteryPercent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.BatteryPercent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 battery_percentage = 1;
  if (this->battery_percentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_battery_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.BatteryPercent)
  return target;
}

size_t BatteryPercent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.BatteryPercent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 battery_percentage = 1;
  if (this->battery_percentage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battery_percentage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryPercent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.BatteryPercent)
  GOOGLE_DCHECK_NE(&from, this);
  const BatteryPercent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatteryPercent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.BatteryPercent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.BatteryPercent)
    MergeFrom(*source);
  }
}

void BatteryPercent::MergeFrom(const BatteryPercent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.BatteryPercent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.battery_percentage() != 0) {
    _internal_set_battery_percentage(from._internal_battery_percentage());
  }
}

void BatteryPercent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.BatteryPercent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryPercent::CopyFrom(const BatteryPercent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.BatteryPercent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryPercent::IsInitialized() const {
  return true;
}

void BatteryPercent::InternalSwap(BatteryPercent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(battery_percentage_, other->battery_percentage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryPercent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[48]);
}

// ===================================================================

class GPSData::_Internal {
 public:
};

GPSData::GPSData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.GPSData)
}
GPSData::GPSData(const GPSData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(second_));
  // @@protoc_insertion_point(copy_constructor:sensors.GPSData)
}

void GPSData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(second_));
}

GPSData::~GPSData() {
  // @@protoc_insertion_point(destructor:sensors.GPSData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GPSData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GPSData::ArenaDtor(void* object) {
  GPSData* _this = reinterpret_cast< GPSData* >(object);
  (void)_this;
}
void GPSData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPSData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GPSData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.GPSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(second_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPSData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 heading_of_motion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          heading_of_motion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 number_of_sv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          number_of_sv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hDOP = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hdop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height_above_sea = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          height_above_sea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ground_speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ground_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.GPSData.quality_t quality = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quality(static_cast<::sensors::GPSData_quality_t>(val));
        } else goto handle_unusual;
        continue;
      // int32 year = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 month = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 day = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hour = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minute = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 second = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPSData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.GPSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 latitude = 1;
  if (this->latitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_latitude(), target);
  }

  // int32 longitude = 2;
  if (this->longitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_longitude(), target);
  }

  // int32 heading_of_motion = 3;
  if (this->heading_of_motion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_heading_of_motion(), target);
  }

  // uint32 number_of_sv = 4;
  if (this->number_of_sv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_number_of_sv(), target);
  }

  // uint32 hDOP = 5;
  if (this->hdop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hdop(), target);
  }

  // int32 height_above_sea = 6;
  if (this->height_above_sea() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_height_above_sea(), target);
  }

  // int32 ground_speed = 7;
  if (this->ground_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ground_speed(), target);
  }

  // .sensors.GPSData.quality_t quality = 8;
  if (this->quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_quality(), target);
  }

  // int32 year = 9;
  if (this->year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_year(), target);
  }

  // int32 month = 10;
  if (this->month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_month(), target);
  }

  // int32 day = 11;
  if (this->day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_day(), target);
  }

  // int32 hour = 12;
  if (this->hour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_hour(), target);
  }

  // int32 minute = 13;
  if (this->minute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_minute(), target);
  }

  // int32 second = 14;
  if (this->second() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.GPSData)
  return target;
}

size_t GPSData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.GPSData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 latitude = 1;
  if (this->latitude() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_latitude());
  }

  // int32 longitude = 2;
  if (this->longitude() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_longitude());
  }

  // int32 heading_of_motion = 3;
  if (this->heading_of_motion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heading_of_motion());
  }

  // uint32 number_of_sv = 4;
  if (this->number_of_sv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_of_sv());
  }

  // uint32 hDOP = 5;
  if (this->hdop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hdop());
  }

  // int32 height_above_sea = 6;
  if (this->height_above_sea() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height_above_sea());
  }

  // int32 ground_speed = 7;
  if (this->ground_speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ground_speed());
  }

  // .sensors.GPSData.quality_t quality = 8;
  if (this->quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_quality());
  }

  // int32 year = 9;
  if (this->year() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());
  }

  // int32 month = 10;
  if (this->month() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());
  }

  // int32 day = 11;
  if (this->day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day());
  }

  // int32 hour = 12;
  if (this->hour() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hour());
  }

  // int32 minute = 13;
  if (this->minute() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minute());
  }

  // int32 second = 14;
  if (this->second() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_second());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPSData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.GPSData)
  GOOGLE_DCHECK_NE(&from, this);
  const GPSData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPSData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.GPSData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.GPSData)
    MergeFrom(*source);
  }
}

void GPSData::MergeFrom(const GPSData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.GPSData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latitude() != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (from.longitude() != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (from.heading_of_motion() != 0) {
    _internal_set_heading_of_motion(from._internal_heading_of_motion());
  }
  if (from.number_of_sv() != 0) {
    _internal_set_number_of_sv(from._internal_number_of_sv());
  }
  if (from.hdop() != 0) {
    _internal_set_hdop(from._internal_hdop());
  }
  if (from.height_above_sea() != 0) {
    _internal_set_height_above_sea(from._internal_height_above_sea());
  }
  if (from.ground_speed() != 0) {
    _internal_set_ground_speed(from._internal_ground_speed());
  }
  if (from.quality() != 0) {
    _internal_set_quality(from._internal_quality());
  }
  if (from.year() != 0) {
    _internal_set_year(from._internal_year());
  }
  if (from.month() != 0) {
    _internal_set_month(from._internal_month());
  }
  if (from.day() != 0) {
    _internal_set_day(from._internal_day());
  }
  if (from.hour() != 0) {
    _internal_set_hour(from._internal_hour());
  }
  if (from.minute() != 0) {
    _internal_set_minute(from._internal_minute());
  }
  if (from.second() != 0) {
    _internal_set_second(from._internal_second());
  }
}

void GPSData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.GPSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSData::CopyFrom(const GPSData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.GPSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSData::IsInitialized() const {
  return true;
}

void GPSData::InternalSwap(GPSData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPSData, second_)
      + sizeof(GPSData::second_)
      - PROTOBUF_FIELD_OFFSET(GPSData, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GPSData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[49]);
}

// ===================================================================

class EncoderData::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const EncoderData* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
EncoderData::_Internal::timestamp(const EncoderData* msg) {
  return *msg->timestamp_;
}
void EncoderData::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
EncoderData::EncoderData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.EncoderData)
}
EncoderData::EncoderData(const EncoderData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&left_angle_, &from.left_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&br_caster_degrees_) -
    reinterpret_cast<char*>(&left_angle_)) + sizeof(br_caster_degrees_));
  // @@protoc_insertion_point(copy_constructor:sensors.EncoderData)
}

void EncoderData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&br_caster_degrees_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(br_caster_degrees_));
}

EncoderData::~EncoderData() {
  // @@protoc_insertion_point(destructor:sensors.EncoderData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EncoderData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void EncoderData::ArenaDtor(void* object) {
  EncoderData* _this = reinterpret_cast< EncoderData* >(object);
  (void)_this;
}
void EncoderData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EncoderData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EncoderData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.EncoderData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&left_angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&br_caster_degrees_) -
      reinterpret_cast<char*>(&left_angle_)) + sizeof(br_caster_degrees_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncoderData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float left_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          left_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          right_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fl_caster_degrees = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          fl_caster_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bl_caster_degrees = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          bl_caster_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fr_caster_degrees = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          fr_caster_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float br_caster_degrees = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          br_caster_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncoderData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.EncoderData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float left_angle = 1;
  if (!(this->left_angle() <= 0 && this->left_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_left_angle(), target);
  }

  // float right_angle = 2;
  if (!(this->right_angle() <= 0 && this->right_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_right_angle(), target);
  }

  // float fl_caster_degrees = 3;
  if (!(this->fl_caster_degrees() <= 0 && this->fl_caster_degrees() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_fl_caster_degrees(), target);
  }

  // float bl_caster_degrees = 4;
  if (!(this->bl_caster_degrees() <= 0 && this->bl_caster_degrees() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_bl_caster_degrees(), target);
  }

  // float fr_caster_degrees = 5;
  if (!(this->fr_caster_degrees() <= 0 && this->fr_caster_degrees() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_fr_caster_degrees(), target);
  }

  // float br_caster_degrees = 6;
  if (!(this->br_caster_degrees() <= 0 && this->br_caster_degrees() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_br_caster_degrees(), target);
  }

  // .google.protobuf.Timestamp timestamp = 7;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.EncoderData)
  return target;
}

size_t EncoderData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.EncoderData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 7;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // float left_angle = 1;
  if (!(this->left_angle() <= 0 && this->left_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_angle = 2;
  if (!(this->right_angle() <= 0 && this->right_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // float fl_caster_degrees = 3;
  if (!(this->fl_caster_degrees() <= 0 && this->fl_caster_degrees() >= 0)) {
    total_size += 1 + 4;
  }

  // float bl_caster_degrees = 4;
  if (!(this->bl_caster_degrees() <= 0 && this->bl_caster_degrees() >= 0)) {
    total_size += 1 + 4;
  }

  // float fr_caster_degrees = 5;
  if (!(this->fr_caster_degrees() <= 0 && this->fr_caster_degrees() >= 0)) {
    total_size += 1 + 4;
  }

  // float br_caster_degrees = 6;
  if (!(this->br_caster_degrees() <= 0 && this->br_caster_degrees() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncoderData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.EncoderData)
  GOOGLE_DCHECK_NE(&from, this);
  const EncoderData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EncoderData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.EncoderData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.EncoderData)
    MergeFrom(*source);
  }
}

void EncoderData::MergeFrom(const EncoderData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.EncoderData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (!(from.left_angle() <= 0 && from.left_angle() >= 0)) {
    _internal_set_left_angle(from._internal_left_angle());
  }
  if (!(from.right_angle() <= 0 && from.right_angle() >= 0)) {
    _internal_set_right_angle(from._internal_right_angle());
  }
  if (!(from.fl_caster_degrees() <= 0 && from.fl_caster_degrees() >= 0)) {
    _internal_set_fl_caster_degrees(from._internal_fl_caster_degrees());
  }
  if (!(from.bl_caster_degrees() <= 0 && from.bl_caster_degrees() >= 0)) {
    _internal_set_bl_caster_degrees(from._internal_bl_caster_degrees());
  }
  if (!(from.fr_caster_degrees() <= 0 && from.fr_caster_degrees() >= 0)) {
    _internal_set_fr_caster_degrees(from._internal_fr_caster_degrees());
  }
  if (!(from.br_caster_degrees() <= 0 && from.br_caster_degrees() >= 0)) {
    _internal_set_br_caster_degrees(from._internal_br_caster_degrees());
  }
}

void EncoderData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.EncoderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncoderData::CopyFrom(const EncoderData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.EncoderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncoderData::IsInitialized() const {
  return true;
}

void EncoderData::InternalSwap(EncoderData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncoderData, br_caster_degrees_)
      + sizeof(EncoderData::br_caster_degrees_)
      - PROTOBUF_FIELD_OFFSET(EncoderData, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EncoderData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[50]);
}

// ===================================================================

class Vec3::_Internal {
 public:
};

Vec3::Vec3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.Vec3)
}
Vec3::Vec3(const Vec3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:sensors.Vec3)
}

void Vec3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:sensors.Vec3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vec3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec3::ArenaDtor(void* object) {
  Vec3* _this = reinterpret_cast< Vec3* >(object);
  (void)_this;
}
void Vec3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Vec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Vec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Vec3)
  return target;
}

size_t Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Vec3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.Vec3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.Vec3)
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vec3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  return true;
}

void Vec3::InternalSwap(Vec3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec3, z_)
      + sizeof(Vec3::z_)
      - PROTOBUF_FIELD_OFFSET(Vec3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[51]);
}

// ===================================================================

class Vec4::_Internal {
 public:
};

Vec4::Vec4(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.Vec4)
}
Vec4::Vec4(const Vec4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:sensors.Vec4)
}

void Vec4::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&w_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
}

Vec4::~Vec4() {
  // @@protoc_insertion_point(destructor:sensors.Vec4)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vec4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec4::ArenaDtor(void* object) {
  Vec4* _this = reinterpret_cast< Vec4* >(object);
  (void)_this;
}
void Vec4::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vec4::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Vec4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Vec4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Vec4)
  return target;
}

size_t Vec4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Vec4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 4;
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.Vec4)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.Vec4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.Vec4)
    MergeFrom(*source);
  }
}

void Vec4::MergeFrom(const Vec4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Vec4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vec4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.Vec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec4::CopyFrom(const Vec4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Vec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec4::IsInitialized() const {
  return true;
}

void Vec4::InternalSwap(Vec4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec4, z_)
      + sizeof(Vec4::z_)
      - PROTOBUF_FIELD_OFFSET(Vec4, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec4::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[52]);
}

// ===================================================================

class AhrsData::_Internal {
 public:
  static const ::sensors::Vec3& linear_velocity(const AhrsData* msg);
  static const ::sensors::Vec3& linear_acceleration(const AhrsData* msg);
  static const ::sensors::Vec3& angular_velocity(const AhrsData* msg);
  static const ::sensors::Vec3& angular_acceleration(const AhrsData* msg);
  static const ::sensors::Vec3& orientation(const AhrsData* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const AhrsData* msg);
};

const ::sensors::Vec3&
AhrsData::_Internal::linear_velocity(const AhrsData* msg) {
  return *msg->linear_velocity_;
}
const ::sensors::Vec3&
AhrsData::_Internal::linear_acceleration(const AhrsData* msg) {
  return *msg->linear_acceleration_;
}
const ::sensors::Vec3&
AhrsData::_Internal::angular_velocity(const AhrsData* msg) {
  return *msg->angular_velocity_;
}
const ::sensors::Vec3&
AhrsData::_Internal::angular_acceleration(const AhrsData* msg) {
  return *msg->angular_acceleration_;
}
const ::sensors::Vec3&
AhrsData::_Internal::orientation(const AhrsData* msg) {
  return *msg->orientation_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
AhrsData::_Internal::timestamp(const AhrsData* msg) {
  return *msg->timestamp_;
}
void AhrsData::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
AhrsData::AhrsData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.AhrsData)
}
AhrsData::AhrsData(const AhrsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear_velocity()) {
    linear_velocity_ = new ::sensors::Vec3(*from.linear_velocity_);
  } else {
    linear_velocity_ = nullptr;
  }
  if (from._internal_has_linear_acceleration()) {
    linear_acceleration_ = new ::sensors::Vec3(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = nullptr;
  }
  if (from._internal_has_angular_velocity()) {
    angular_velocity_ = new ::sensors::Vec3(*from.angular_velocity_);
  } else {
    angular_velocity_ = nullptr;
  }
  if (from._internal_has_angular_acceleration()) {
    angular_acceleration_ = new ::sensors::Vec3(*from.angular_acceleration_);
  } else {
    angular_acceleration_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::sensors::Vec3(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensors.AhrsData)
}

void AhrsData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&linear_velocity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&linear_velocity_)) + sizeof(timestamp_));
}

AhrsData::~AhrsData() {
  // @@protoc_insertion_point(destructor:sensors.AhrsData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AhrsData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_;
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete angular_acceleration_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete timestamp_;
}

void AhrsData::ArenaDtor(void* object) {
  AhrsData* _this = reinterpret_cast< AhrsData* >(object);
  (void)_this;
}
void AhrsData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AhrsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AhrsData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.AhrsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && linear_velocity_ != nullptr) {
    delete linear_velocity_;
  }
  linear_velocity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && linear_acceleration_ != nullptr) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && angular_acceleration_ != nullptr) {
    delete angular_acceleration_;
  }
  angular_acceleration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AhrsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.Vec3 linear_velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.Vec3 linear_acceleration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.Vec3 angular_velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.Vec3 angular_acceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.Vec3 orientation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AhrsData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.AhrsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.Vec3 linear_velocity = 1;
  if (this->has_linear_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear_velocity(this), target, stream);
  }

  // .sensors.Vec3 linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::linear_acceleration(this), target, stream);
  }

  // .sensors.Vec3 angular_velocity = 3;
  if (this->has_angular_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::angular_velocity(this), target, stream);
  }

  // .sensors.Vec3 angular_acceleration = 4;
  if (this->has_angular_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::angular_acceleration(this), target, stream);
  }

  // .sensors.Vec3 orientation = 5;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::orientation(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.AhrsData)
  return target;
}

size_t AhrsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.AhrsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.Vec3 linear_velocity = 1;
  if (this->has_linear_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_velocity_);
  }

  // .sensors.Vec3 linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_acceleration_);
  }

  // .sensors.Vec3 angular_velocity = 3;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  // .sensors.Vec3 angular_acceleration = 4;
  if (this->has_angular_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_acceleration_);
  }

  // .sensors.Vec3 orientation = 5;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AhrsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.AhrsData)
  GOOGLE_DCHECK_NE(&from, this);
  const AhrsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AhrsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.AhrsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.AhrsData)
    MergeFrom(*source);
  }
}

void AhrsData::MergeFrom(const AhrsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.AhrsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linear_velocity()) {
    _internal_mutable_linear_velocity()->::sensors::Vec3::MergeFrom(from._internal_linear_velocity());
  }
  if (from.has_linear_acceleration()) {
    _internal_mutable_linear_acceleration()->::sensors::Vec3::MergeFrom(from._internal_linear_acceleration());
  }
  if (from.has_angular_velocity()) {
    _internal_mutable_angular_velocity()->::sensors::Vec3::MergeFrom(from._internal_angular_velocity());
  }
  if (from.has_angular_acceleration()) {
    _internal_mutable_angular_acceleration()->::sensors::Vec3::MergeFrom(from._internal_angular_acceleration());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::sensors::Vec3::MergeFrom(from._internal_orientation());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void AhrsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.AhrsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AhrsData::CopyFrom(const AhrsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.AhrsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AhrsData::IsInitialized() const {
  return true;
}

void AhrsData::InternalSwap(AhrsData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AhrsData, timestamp_)
      + sizeof(AhrsData::timestamp_)
      - PROTOBUF_FIELD_OFFSET(AhrsData, linear_velocity_)>(
          reinterpret_cast<char*>(&linear_velocity_),
          reinterpret_cast<char*>(&other->linear_velocity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AhrsData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[53]);
}

// ===================================================================

class MatrixElement::_Internal {
 public:
};

MatrixElement::MatrixElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.MatrixElement)
}
MatrixElement::MatrixElement(const MatrixElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:sensors.MatrixElement)
}

void MatrixElement::SharedCtor() {
value_ = 0;
}

MatrixElement::~MatrixElement() {
  // @@protoc_insertion_point(destructor:sensors.MatrixElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatrixElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MatrixElement::ArenaDtor(void* object) {
  MatrixElement* _this = reinterpret_cast< MatrixElement* >(object);
  (void)_this;
}
void MatrixElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatrixElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatrixElement::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.MatrixElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatrixElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatrixElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.MatrixElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.MatrixElement)
  return target;
}

size_t MatrixElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.MatrixElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatrixElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.MatrixElement)
  GOOGLE_DCHECK_NE(&from, this);
  const MatrixElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatrixElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.MatrixElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.MatrixElement)
    MergeFrom(*source);
  }
}

void MatrixElement::MergeFrom(const MatrixElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.MatrixElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void MatrixElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.MatrixElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatrixElement::CopyFrom(const MatrixElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.MatrixElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatrixElement::IsInitialized() const {
  return true;
}

void MatrixElement::InternalSwap(MatrixElement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatrixElement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[54]);
}

// ===================================================================

class CalMatrix::_Internal {
 public:
};

CalMatrix::CalMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matrix_element_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.CalMatrix)
}
CalMatrix::CalMatrix(const CalMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matrix_element_(from.matrix_element_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rows_, &from.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&columns_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(columns_));
  // @@protoc_insertion_point(copy_constructor:sensors.CalMatrix)
}

void CalMatrix::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rows_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&columns_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(columns_));
}

CalMatrix::~CalMatrix() {
  // @@protoc_insertion_point(destructor:sensors.CalMatrix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CalMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CalMatrix::ArenaDtor(void* object) {
  CalMatrix* _this = reinterpret_cast< CalMatrix* >(object);
  (void)_this;
}
void CalMatrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CalMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CalMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.CalMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_element_.Clear();
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&columns_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(columns_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sensors.MatrixElement matrix_element = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matrix_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalMatrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.CalMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rows = 1;
  if (this->rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rows(), target);
  }

  // int32 columns = 2;
  if (this->columns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_columns(), target);
  }

  // repeated .sensors.MatrixElement matrix_element = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matrix_element_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_matrix_element(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.CalMatrix)
  return target;
}

size_t CalMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.CalMatrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.MatrixElement matrix_element = 3;
  total_size += 1UL * this->_internal_matrix_element_size();
  for (const auto& msg : this->matrix_element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 rows = 1;
  if (this->rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rows());
  }

  // int32 columns = 2;
  if (this->columns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_columns());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalMatrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.CalMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const CalMatrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalMatrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.CalMatrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.CalMatrix)
    MergeFrom(*source);
  }
}

void CalMatrix::MergeFrom(const CalMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.CalMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_element_.MergeFrom(from.matrix_element_);
  if (from.rows() != 0) {
    _internal_set_rows(from._internal_rows());
  }
  if (from.columns() != 0) {
    _internal_set_columns(from._internal_columns());
  }
}

void CalMatrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.CalMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalMatrix::CopyFrom(const CalMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.CalMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalMatrix::IsInitialized() const {
  return true;
}

void CalMatrix::InternalSwap(CalMatrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  matrix_element_.InternalSwap(&other->matrix_element_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalMatrix, columns_)
      + sizeof(CalMatrix::columns_)
      - PROTOBUF_FIELD_OFFSET(CalMatrix, rows_)>(
          reinterpret_cast<char*>(&rows_),
          reinterpret_cast<char*>(&other->rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CalMatrix::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[55]);
}

// ===================================================================

class IrIntrinsics::_Internal {
 public:
};

IrIntrinsics::IrIntrinsics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.IrIntrinsics)
}
IrIntrinsics::IrIntrinsics(const IrIntrinsics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fx_, &from.fx_,
    static_cast<size_t>(reinterpret_cast<char*>(&ppy_) -
    reinterpret_cast<char*>(&fx_)) + sizeof(ppy_));
  // @@protoc_insertion_point(copy_constructor:sensors.IrIntrinsics)
}

void IrIntrinsics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ppy_) -
    reinterpret_cast<char*>(&fx_)) + sizeof(ppy_));
}

IrIntrinsics::~IrIntrinsics() {
  // @@protoc_insertion_point(destructor:sensors.IrIntrinsics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IrIntrinsics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IrIntrinsics::ArenaDtor(void* object) {
  IrIntrinsics* _this = reinterpret_cast< IrIntrinsics* >(object);
  (void)_this;
}
void IrIntrinsics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IrIntrinsics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IrIntrinsics::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.IrIntrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ppy_) -
      reinterpret_cast<char*>(&fx_)) + sizeof(ppy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IrIntrinsics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float fx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          fx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ppx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ppx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ppy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ppy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IrIntrinsics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.IrIntrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float fx = 1;
  if (!(this->fx() <= 0 && this->fx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fx(), target);
  }

  // float fy = 2;
  if (!(this->fy() <= 0 && this->fy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fy(), target);
  }

  // float ppx = 3;
  if (!(this->ppx() <= 0 && this->ppx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_ppx(), target);
  }

  // float ppy = 4;
  if (!(this->ppy() <= 0 && this->ppy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_ppy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.IrIntrinsics)
  return target;
}

size_t IrIntrinsics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.IrIntrinsics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float fx = 1;
  if (!(this->fx() <= 0 && this->fx() >= 0)) {
    total_size += 1 + 4;
  }

  // float fy = 2;
  if (!(this->fy() <= 0 && this->fy() >= 0)) {
    total_size += 1 + 4;
  }

  // float ppx = 3;
  if (!(this->ppx() <= 0 && this->ppx() >= 0)) {
    total_size += 1 + 4;
  }

  // float ppy = 4;
  if (!(this->ppy() <= 0 && this->ppy() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IrIntrinsics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.IrIntrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  const IrIntrinsics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IrIntrinsics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.IrIntrinsics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.IrIntrinsics)
    MergeFrom(*source);
  }
}

void IrIntrinsics::MergeFrom(const IrIntrinsics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.IrIntrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.fx() <= 0 && from.fx() >= 0)) {
    _internal_set_fx(from._internal_fx());
  }
  if (!(from.fy() <= 0 && from.fy() >= 0)) {
    _internal_set_fy(from._internal_fy());
  }
  if (!(from.ppx() <= 0 && from.ppx() >= 0)) {
    _internal_set_ppx(from._internal_ppx());
  }
  if (!(from.ppy() <= 0 && from.ppy() >= 0)) {
    _internal_set_ppy(from._internal_ppy());
  }
}

void IrIntrinsics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.IrIntrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IrIntrinsics::CopyFrom(const IrIntrinsics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.IrIntrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IrIntrinsics::IsInitialized() const {
  return true;
}

void IrIntrinsics::InternalSwap(IrIntrinsics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IrIntrinsics, ppy_)
      + sizeof(IrIntrinsics::ppy_)
      - PROTOBUF_FIELD_OFFSET(IrIntrinsics, fx_)>(
          reinterpret_cast<char*>(&fx_),
          reinterpret_cast<char*>(&other->fx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IrIntrinsics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[56]);
}

// ===================================================================

class IrFrame::_Internal {
 public:
  static const ::sensors::IrIntrinsics& intrinsics(const IrFrame* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const IrFrame* msg);
};

const ::sensors::IrIntrinsics&
IrFrame::_Internal::intrinsics(const IrFrame* msg) {
  return *msg->intrinsics_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
IrFrame::_Internal::timestamp(const IrFrame* msg) {
  return *msg->timestamp_;
}
void IrFrame::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
IrFrame::IrFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.IrFrame)
}
IrFrame::IrFrame(const IrFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame().empty()) {
    frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_frame(), 
      GetArenaForAllocation());
  }
  camera_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_camera().empty()) {
    camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_camera(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_intrinsics()) {
    intrinsics_ = new ::sensors::IrIntrinsics(*from.intrinsics_);
  } else {
    intrinsics_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:sensors.IrFrame)
}

void IrFrame::SharedCtor() {
frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
camera_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&intrinsics_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&intrinsics_)) + sizeof(height_));
}

IrFrame::~IrFrame() {
  // @@protoc_insertion_point(destructor:sensors.IrFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IrFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete intrinsics_;
  if (this != internal_default_instance()) delete timestamp_;
}

void IrFrame::ArenaDtor(void* object) {
  IrFrame* _this = reinterpret_cast< IrFrame* >(object);
  (void)_this;
}
void IrFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IrFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IrFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.IrFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_.ClearToEmpty();
  camera_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && intrinsics_ != nullptr) {
    delete intrinsics_;
  }
  intrinsics_ = nullptr;
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IrFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string camera = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_camera();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensors.IrFrame.camera"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.IrIntrinsics intrinsics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_intrinsics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IrFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.IrFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes frame = 1;
  if (!this->frame().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_frame(), target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // string camera = 4;
  if (!this->camera().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera().data(), static_cast<int>(this->_internal_camera().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors.IrFrame.camera");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_camera(), target);
  }

  // .sensors.IrIntrinsics intrinsics = 5;
  if (this->has_intrinsics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::intrinsics(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.IrFrame)
  return target;
}

size_t IrFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.IrFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes frame = 1;
  if (!this->frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_frame());
  }

  // string camera = 4;
  if (!this->camera().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera());
  }

  // .sensors.IrIntrinsics intrinsics = 5;
  if (this->has_intrinsics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intrinsics_);
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IrFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.IrFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const IrFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IrFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.IrFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.IrFrame)
    MergeFrom(*source);
  }
}

void IrFrame::MergeFrom(const IrFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.IrFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.frame().empty()) {
    _internal_set_frame(from._internal_frame());
  }
  if (!from.camera().empty()) {
    _internal_set_camera(from._internal_camera());
  }
  if (from.has_intrinsics()) {
    _internal_mutable_intrinsics()->::sensors::IrIntrinsics::MergeFrom(from._internal_intrinsics());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void IrFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.IrFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IrFrame::CopyFrom(const IrFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.IrFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IrFrame::IsInitialized() const {
  return true;
}

void IrFrame::InternalSwap(IrFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &frame_, GetArenaForAllocation(),
      &other->frame_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &camera_, GetArenaForAllocation(),
      &other->camera_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IrFrame, height_)
      + sizeof(IrFrame::height_)
      - PROTOBUF_FIELD_OFFSET(IrFrame, intrinsics_)>(
          reinterpret_cast<char*>(&intrinsics_),
          reinterpret_cast<char*>(&other->intrinsics_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IrFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[57]);
}

// ===================================================================

class RemoteJsValues::_Internal {
 public:
};

RemoteJsValues::RemoteJsValues(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.RemoteJsValues)
}
RemoteJsValues::RemoteJsValues(const RemoteJsValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&forward_back_, &from.forward_back_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_right_) -
    reinterpret_cast<char*>(&forward_back_)) + sizeof(left_right_));
  // @@protoc_insertion_point(copy_constructor:sensors.RemoteJsValues)
}

void RemoteJsValues::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&forward_back_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&left_right_) -
    reinterpret_cast<char*>(&forward_back_)) + sizeof(left_right_));
}

RemoteJsValues::~RemoteJsValues() {
  // @@protoc_insertion_point(destructor:sensors.RemoteJsValues)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteJsValues::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoteJsValues::ArenaDtor(void* object) {
  RemoteJsValues* _this = reinterpret_cast< RemoteJsValues* >(object);
  (void)_this;
}
void RemoteJsValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteJsValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoteJsValues::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.RemoteJsValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&forward_back_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_right_) -
      reinterpret_cast<char*>(&forward_back_)) + sizeof(left_right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteJsValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 forward_back = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          forward_back_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 left_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          left_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteJsValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.RemoteJsValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 forward_back = 1;
  if (this->forward_back() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_forward_back(), target);
  }

  // int32 left_right = 2;
  if (this->left_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_left_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.RemoteJsValues)
  return target;
}

size_t RemoteJsValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.RemoteJsValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 forward_back = 1;
  if (this->forward_back() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_forward_back());
  }

  // int32 left_right = 2;
  if (this->left_right() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_left_right());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteJsValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.RemoteJsValues)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteJsValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteJsValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.RemoteJsValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.RemoteJsValues)
    MergeFrom(*source);
  }
}

void RemoteJsValues::MergeFrom(const RemoteJsValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.RemoteJsValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.forward_back() != 0) {
    _internal_set_forward_back(from._internal_forward_back());
  }
  if (from.left_right() != 0) {
    _internal_set_left_right(from._internal_left_right());
  }
}

void RemoteJsValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.RemoteJsValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteJsValues::CopyFrom(const RemoteJsValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.RemoteJsValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteJsValues::IsInitialized() const {
  return true;
}

void RemoteJsValues::InternalSwap(RemoteJsValues* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteJsValues, left_right_)
      + sizeof(RemoteJsValues::left_right_)
      - PROTOBUF_FIELD_OFFSET(RemoteJsValues, forward_back_)>(
          reinterpret_cast<char*>(&forward_back_),
          reinterpret_cast<char*>(&other->forward_back_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteJsValues::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[58]);
}

// ===================================================================

class ModeCtrl::_Internal {
 public:
};

ModeCtrl::ModeCtrl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.ModeCtrl)
}
ModeCtrl::ModeCtrl(const ModeCtrl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:sensors.ModeCtrl)
}

void ModeCtrl::SharedCtor() {
mode_ = 0;
}

ModeCtrl::~ModeCtrl() {
  // @@protoc_insertion_point(destructor:sensors.ModeCtrl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModeCtrl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModeCtrl::ArenaDtor(void* object) {
  ModeCtrl* _this = reinterpret_cast< ModeCtrl* >(object);
  (void)_this;
}
void ModeCtrl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModeCtrl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModeCtrl::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ModeCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModeCtrl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.DriveMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::sensors::DriveMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModeCtrl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ModeCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.DriveMode mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ModeCtrl)
  return target;
}

size_t ModeCtrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ModeCtrl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.DriveMode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModeCtrl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.ModeCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  const ModeCtrl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModeCtrl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.ModeCtrl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.ModeCtrl)
    MergeFrom(*source);
  }
}

void ModeCtrl::MergeFrom(const ModeCtrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ModeCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void ModeCtrl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.ModeCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModeCtrl::CopyFrom(const ModeCtrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ModeCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeCtrl::IsInitialized() const {
  return true;
}

void ModeCtrl::InternalSwap(ModeCtrl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModeCtrl::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[59]);
}

// ===================================================================

class RampMode::_Internal {
 public:
};

RampMode::RampMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.RampMode)
}
RampMode::RampMode(const RampMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ramp_active_, &from.ramp_active_,
    static_cast<size_t>(reinterpret_cast<char*>(&ramp_approach_active_) -
    reinterpret_cast<char*>(&ramp_active_)) + sizeof(ramp_approach_active_));
  // @@protoc_insertion_point(copy_constructor:sensors.RampMode)
}

void RampMode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ramp_active_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ramp_approach_active_) -
    reinterpret_cast<char*>(&ramp_active_)) + sizeof(ramp_approach_active_));
}

RampMode::~RampMode() {
  // @@protoc_insertion_point(destructor:sensors.RampMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RampMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RampMode::ArenaDtor(void* object) {
  RampMode* _this = reinterpret_cast< RampMode* >(object);
  (void)_this;
}
void RampMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RampMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RampMode::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.RampMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ramp_active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ramp_approach_active_) -
      reinterpret_cast<char*>(&ramp_active_)) + sizeof(ramp_approach_active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RampMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ramp_active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ramp_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ramp_approach_active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ramp_approach_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RampMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.RampMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ramp_active = 1;
  if (this->ramp_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ramp_active(), target);
  }

  // bool ramp_approach_active = 2;
  if (this->ramp_approach_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ramp_approach_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.RampMode)
  return target;
}

size_t RampMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.RampMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ramp_active = 1;
  if (this->ramp_active() != 0) {
    total_size += 1 + 1;
  }

  // bool ramp_approach_active = 2;
  if (this->ramp_approach_active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RampMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.RampMode)
  GOOGLE_DCHECK_NE(&from, this);
  const RampMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RampMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.RampMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.RampMode)
    MergeFrom(*source);
  }
}

void RampMode::MergeFrom(const RampMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.RampMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ramp_active() != 0) {
    _internal_set_ramp_active(from._internal_ramp_active());
  }
  if (from.ramp_approach_active() != 0) {
    _internal_set_ramp_approach_active(from._internal_ramp_approach_active());
  }
}

void RampMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.RampMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RampMode::CopyFrom(const RampMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.RampMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RampMode::IsInitialized() const {
  return true;
}

void RampMode::InternalSwap(RampMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RampMode, ramp_approach_active_)
      + sizeof(RampMode::ramp_approach_active_)
      - PROTOBUF_FIELD_OFFSET(RampMode, ramp_active_)>(
          reinterpret_cast<char*>(&ramp_active_),
          reinterpret_cast<char*>(&other->ramp_active_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RampMode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[60]);
}

// ===================================================================

class RampAssistStates::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const RampAssistStates* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
RampAssistStates::_Internal::timestamp(const RampAssistStates* msg) {
  return *msg->timestamp_;
}
void RampAssistStates::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
RampAssistStates::RampAssistStates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.RampAssistStates)
}
RampAssistStates::RampAssistStates(const RampAssistStates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&is_active_, &from.is_active_,
    static_cast<size_t>(reinterpret_cast<char*>(&approach_active_) -
    reinterpret_cast<char*>(&is_active_)) + sizeof(approach_active_));
  // @@protoc_insertion_point(copy_constructor:sensors.RampAssistStates)
}

void RampAssistStates::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&approach_active_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(approach_active_));
}

RampAssistStates::~RampAssistStates() {
  // @@protoc_insertion_point(destructor:sensors.RampAssistStates)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RampAssistStates::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void RampAssistStates::ArenaDtor(void* object) {
  RampAssistStates* _this = reinterpret_cast< RampAssistStates* >(object);
  (void)_this;
}
void RampAssistStates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RampAssistStates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RampAssistStates::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.RampAssistStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&is_active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&approach_active_) -
      reinterpret_cast<char*>(&is_active_)) + sizeof(approach_active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RampAssistStates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool approach_active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          approach_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RampAssistStates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.RampAssistStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_active = 1;
  if (this->is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_active(), target);
  }

  // bool approach_active = 2;
  if (this->approach_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_approach_active(), target);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.RampAssistStates)
  return target;
}

size_t RampAssistStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.RampAssistStates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // bool is_active = 1;
  if (this->is_active() != 0) {
    total_size += 1 + 1;
  }

  // bool approach_active = 2;
  if (this->approach_active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RampAssistStates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.RampAssistStates)
  GOOGLE_DCHECK_NE(&from, this);
  const RampAssistStates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RampAssistStates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.RampAssistStates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.RampAssistStates)
    MergeFrom(*source);
  }
}

void RampAssistStates::MergeFrom(const RampAssistStates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.RampAssistStates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.is_active() != 0) {
    _internal_set_is_active(from._internal_is_active());
  }
  if (from.approach_active() != 0) {
    _internal_set_approach_active(from._internal_approach_active());
  }
}

void RampAssistStates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.RampAssistStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RampAssistStates::CopyFrom(const RampAssistStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.RampAssistStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RampAssistStates::IsInitialized() const {
  return true;
}

void RampAssistStates::InternalSwap(RampAssistStates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RampAssistStates, approach_active_)
      + sizeof(RampAssistStates::approach_active_)
      - PROTOBUF_FIELD_OFFSET(RampAssistStates, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RampAssistStates::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[61]);
}

// ===================================================================

class LuciOverride::_Internal {
 public:
};

LuciOverride::LuciOverride(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.LuciOverride)
}
LuciOverride::LuciOverride(const LuciOverride& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  override_active_ = from.override_active_;
  // @@protoc_insertion_point(copy_constructor:sensors.LuciOverride)
}

void LuciOverride::SharedCtor() {
override_active_ = false;
}

LuciOverride::~LuciOverride() {
  // @@protoc_insertion_point(destructor:sensors.LuciOverride)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LuciOverride::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LuciOverride::ArenaDtor(void* object) {
  LuciOverride* _this = reinterpret_cast< LuciOverride* >(object);
  (void)_this;
}
void LuciOverride::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LuciOverride::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LuciOverride::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.LuciOverride)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  override_active_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LuciOverride::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool override_active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LuciOverride::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.LuciOverride)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool override_active = 1;
  if (this->override_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_override_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.LuciOverride)
  return target;
}

size_t LuciOverride::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.LuciOverride)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool override_active = 1;
  if (this->override_active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LuciOverride::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.LuciOverride)
  GOOGLE_DCHECK_NE(&from, this);
  const LuciOverride* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LuciOverride>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.LuciOverride)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.LuciOverride)
    MergeFrom(*source);
  }
}

void LuciOverride::MergeFrom(const LuciOverride& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.LuciOverride)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.override_active() != 0) {
    _internal_set_override_active(from._internal_override_active());
  }
}

void LuciOverride::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.LuciOverride)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuciOverride::CopyFrom(const LuciOverride& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.LuciOverride)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuciOverride::IsInitialized() const {
  return true;
}

void LuciOverride::InternalSwap(LuciOverride* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(override_active_, other->override_active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LuciOverride::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[62]);
}

// ===================================================================

class ReactionTestResult::_Internal {
 public:
};

ReactionTestResult::ReactionTestResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.ReactionTestResult)
}
ReactionTestResult::ReactionTestResult(const ReactionTestResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&reaction_time_) -
    reinterpret_cast<char*>(&result_)) + sizeof(reaction_time_));
  // @@protoc_insertion_point(copy_constructor:sensors.ReactionTestResult)
}

void ReactionTestResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reaction_time_) -
    reinterpret_cast<char*>(&result_)) + sizeof(reaction_time_));
}

ReactionTestResult::~ReactionTestResult() {
  // @@protoc_insertion_point(destructor:sensors.ReactionTestResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReactionTestResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReactionTestResult::ArenaDtor(void* object) {
  ReactionTestResult* _this = reinterpret_cast< ReactionTestResult* >(object);
  (void)_this;
}
void ReactionTestResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReactionTestResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReactionTestResult::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ReactionTestResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reaction_time_) -
      reinterpret_cast<char*>(&result_)) + sizeof(reaction_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReactionTestResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.ReactionTestResult.TestResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::sensors::ReactionTestResult_TestResult>(val));
        } else goto handle_unusual;
        continue;
      // float reaction_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          reaction_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReactionTestResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ReactionTestResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.ReactionTestResult.TestResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // float reaction_time = 2;
  if (!(this->reaction_time() <= 0 && this->reaction_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_reaction_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ReactionTestResult)
  return target;
}

size_t ReactionTestResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ReactionTestResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.ReactionTestResult.TestResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  // float reaction_time = 2;
  if (!(this->reaction_time() <= 0 && this->reaction_time() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReactionTestResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.ReactionTestResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ReactionTestResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReactionTestResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.ReactionTestResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.ReactionTestResult)
    MergeFrom(*source);
  }
}

void ReactionTestResult::MergeFrom(const ReactionTestResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ReactionTestResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (!(from.reaction_time() <= 0 && from.reaction_time() >= 0)) {
    _internal_set_reaction_time(from._internal_reaction_time());
  }
}

void ReactionTestResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.ReactionTestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReactionTestResult::CopyFrom(const ReactionTestResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ReactionTestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReactionTestResult::IsInitialized() const {
  return true;
}

void ReactionTestResult::InternalSwap(ReactionTestResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReactionTestResult, reaction_time_)
      + sizeof(ReactionTestResult::reaction_time_)
      - PROTOBUF_FIELD_OFFSET(ReactionTestResult, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReactionTestResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[63]);
}

// ===================================================================

class LandMarkRotation::_Internal {
 public:
};

LandMarkRotation::LandMarkRotation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.LandMarkRotation)
}
LandMarkRotation::LandMarkRotation(const LandMarkRotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:sensors.LandMarkRotation)
}

void LandMarkRotation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

LandMarkRotation::~LandMarkRotation() {
  // @@protoc_insertion_point(destructor:sensors.LandMarkRotation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LandMarkRotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LandMarkRotation::ArenaDtor(void* object) {
  LandMarkRotation* _this = reinterpret_cast< LandMarkRotation* >(object);
  (void)_this;
}
void LandMarkRotation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LandMarkRotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LandMarkRotation::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.LandMarkRotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LandMarkRotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LandMarkRotation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.LandMarkRotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.LandMarkRotation)
  return target;
}

size_t LandMarkRotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.LandMarkRotation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandMarkRotation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.LandMarkRotation)
  GOOGLE_DCHECK_NE(&from, this);
  const LandMarkRotation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LandMarkRotation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.LandMarkRotation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.LandMarkRotation)
    MergeFrom(*source);
  }
}

void LandMarkRotation::MergeFrom(const LandMarkRotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.LandMarkRotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void LandMarkRotation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.LandMarkRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandMarkRotation::CopyFrom(const LandMarkRotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.LandMarkRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandMarkRotation::IsInitialized() const {
  return true;
}

void LandMarkRotation::InternalSwap(LandMarkRotation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LandMarkRotation, z_)
      + sizeof(LandMarkRotation::z_)
      - PROTOBUF_FIELD_OFFSET(LandMarkRotation, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LandMarkRotation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[64]);
}

// ===================================================================

class LandMarkTranslation::_Internal {
 public:
};

LandMarkTranslation::LandMarkTranslation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.LandMarkTranslation)
}
LandMarkTranslation::LandMarkTranslation(const LandMarkTranslation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:sensors.LandMarkTranslation)
}

void LandMarkTranslation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

LandMarkTranslation::~LandMarkTranslation() {
  // @@protoc_insertion_point(destructor:sensors.LandMarkTranslation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LandMarkTranslation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LandMarkTranslation::ArenaDtor(void* object) {
  LandMarkTranslation* _this = reinterpret_cast< LandMarkTranslation* >(object);
  (void)_this;
}
void LandMarkTranslation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LandMarkTranslation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LandMarkTranslation::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.LandMarkTranslation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LandMarkTranslation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LandMarkTranslation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.LandMarkTranslation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.LandMarkTranslation)
  return target;
}

size_t LandMarkTranslation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.LandMarkTranslation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandMarkTranslation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.LandMarkTranslation)
  GOOGLE_DCHECK_NE(&from, this);
  const LandMarkTranslation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LandMarkTranslation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.LandMarkTranslation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.LandMarkTranslation)
    MergeFrom(*source);
  }
}

void LandMarkTranslation::MergeFrom(const LandMarkTranslation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.LandMarkTranslation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void LandMarkTranslation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.LandMarkTranslation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandMarkTranslation::CopyFrom(const LandMarkTranslation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.LandMarkTranslation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandMarkTranslation::IsInitialized() const {
  return true;
}

void LandMarkTranslation::InternalSwap(LandMarkTranslation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LandMarkTranslation, z_)
      + sizeof(LandMarkTranslation::z_)
      - PROTOBUF_FIELD_OFFSET(LandMarkTranslation, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LandMarkTranslation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[65]);
}

// ===================================================================

class Pose::_Internal {
 public:
  static const ::sensors::LandMarkTranslation& translation(const Pose* msg);
  static const ::sensors::LandMarkRotation& rotation(const Pose* msg);
};

const ::sensors::LandMarkTranslation&
Pose::_Internal::translation(const Pose* msg) {
  return *msg->translation_;
}
const ::sensors::LandMarkRotation&
Pose::_Internal::rotation(const Pose* msg) {
  return *msg->rotation_;
}
Pose::Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.Pose)
}
Pose::Pose(const Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    translation_ = new ::sensors::LandMarkTranslation(*from.translation_);
  } else {
    translation_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::sensors::LandMarkRotation(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensors.Pose)
}

void Pose::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&translation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&translation_)) + sizeof(rotation_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:sensors.Pose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete translation_;
  if (this != internal_default_instance()) delete rotation_;
}

void Pose::ArenaDtor(void* object) {
  Pose* _this = reinterpret_cast< Pose* >(object);
  (void)_this;
}
void Pose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.LandMarkTranslation translation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.LandMarkRotation rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.LandMarkTranslation translation = 1;
  if (this->has_translation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::translation(this), target, stream);
  }

  // .sensors.LandMarkRotation rotation = 2;
  if (this->has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Pose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.LandMarkTranslation translation = 1;
  if (this->has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *translation_);
  }

  // .sensors.LandMarkRotation rotation = 2;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.Pose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_translation()) {
    _internal_mutable_translation()->::sensors::LandMarkTranslation::MergeFrom(from._internal_translation());
  }
  if (from.has_rotation()) {
    _internal_mutable_rotation()->::sensors::LandMarkRotation::MergeFrom(from._internal_rotation());
  }
}

void Pose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::InternalSwap(Pose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, rotation_)
      + sizeof(Pose::rotation_)
      - PROTOBUF_FIELD_OFFSET(Pose, translation_)>(
          reinterpret_cast<char*>(&translation_),
          reinterpret_cast<char*>(&other->translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[66]);
}

// ===================================================================

class LuciLandmark::_Internal {
 public:
  static const ::sensors::Pose& pose(const LuciLandmark* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const LuciLandmark* msg);
};

const ::sensors::Pose&
LuciLandmark::_Internal::pose(const LuciLandmark* msg) {
  return *msg->pose_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
LuciLandmark::_Internal::timestamp(const LuciLandmark* msg) {
  return *msg->timestamp_;
}
void LuciLandmark::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
LuciLandmark::LuciLandmark(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.LuciLandmark)
}
LuciLandmark::LuciLandmark(const LuciLandmark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::sensors::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:sensors.LuciLandmark)
}

void LuciLandmark::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pose_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&pose_)) + sizeof(id_));
}

LuciLandmark::~LuciLandmark() {
  // @@protoc_insertion_point(destructor:sensors.LuciLandmark)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LuciLandmark::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete timestamp_;
}

void LuciLandmark::ArenaDtor(void* object) {
  LuciLandmark* _this = reinterpret_cast< LuciLandmark* >(object);
  (void)_this;
}
void LuciLandmark::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LuciLandmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LuciLandmark::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.LuciLandmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LuciLandmark::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.LandMark type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sensors::LandMark>(val));
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.Pose pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LuciLandmark::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.LuciLandmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.LandMark type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // .sensors.Pose pose = 3;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pose(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.LuciLandmark)
  return target;
}

size_t LuciLandmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.LuciLandmark)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.Pose pose = 3;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .sensors.LandMark type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LuciLandmark::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.LuciLandmark)
  GOOGLE_DCHECK_NE(&from, this);
  const LuciLandmark* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LuciLandmark>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.LuciLandmark)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.LuciLandmark)
    MergeFrom(*source);
  }
}

void LuciLandmark::MergeFrom(const LuciLandmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.LuciLandmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    _internal_mutable_pose()->::sensors::Pose::MergeFrom(from._internal_pose());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void LuciLandmark::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.LuciLandmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuciLandmark::CopyFrom(const LuciLandmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.LuciLandmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuciLandmark::IsInitialized() const {
  return true;
}

void LuciLandmark::InternalSwap(LuciLandmark* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LuciLandmark, id_)
      + sizeof(LuciLandmark::id_)
      - PROTOBUF_FIELD_OFFSET(LuciLandmark, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LuciLandmark::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[67]);
}

// ===================================================================

class PID::_Internal {
 public:
};

PID::PID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.PID)
}
PID::PID(const PID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&p_, &from.p_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&p_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:sensors.PID)
}

void PID::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&p_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&p_)) + sizeof(error_));
}

PID::~PID() {
  // @@protoc_insertion_point(destructor:sensors.PID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PID::ArenaDtor(void* object) {
  PID* _this = reinterpret_cast< PID* >(object);
  (void)_this;
}
void PID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PID::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.PID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&p_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&p_)) + sizeof(error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float p = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float i = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          i_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float d = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float goal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          goal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float output = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.PID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float p = 1;
  if (!(this->p() <= 0 && this->p() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_p(), target);
  }

  // float i = 2;
  if (!(this->i() <= 0 && this->i() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_i(), target);
  }

  // float d = 3;
  if (!(this->d() <= 0 && this->d() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_d(), target);
  }

  // float goal = 4;
  if (!(this->goal() <= 0 && this->goal() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_goal(), target);
  }

  // float output = 5;
  if (!(this->output() <= 0 && this->output() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_output(), target);
  }

  // float error = 6;
  if (!(this->error() <= 0 && this->error() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.PID)
  return target;
}

size_t PID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.PID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float p = 1;
  if (!(this->p() <= 0 && this->p() >= 0)) {
    total_size += 1 + 4;
  }

  // float i = 2;
  if (!(this->i() <= 0 && this->i() >= 0)) {
    total_size += 1 + 4;
  }

  // float d = 3;
  if (!(this->d() <= 0 && this->d() >= 0)) {
    total_size += 1 + 4;
  }

  // float goal = 4;
  if (!(this->goal() <= 0 && this->goal() >= 0)) {
    total_size += 1 + 4;
  }

  // float output = 5;
  if (!(this->output() <= 0 && this->output() >= 0)) {
    total_size += 1 + 4;
  }

  // float error = 6;
  if (!(this->error() <= 0 && this->error() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.PID)
  GOOGLE_DCHECK_NE(&from, this);
  const PID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.PID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.PID)
    MergeFrom(*source);
  }
}

void PID::MergeFrom(const PID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.PID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.p() <= 0 && from.p() >= 0)) {
    _internal_set_p(from._internal_p());
  }
  if (!(from.i() <= 0 && from.i() >= 0)) {
    _internal_set_i(from._internal_i());
  }
  if (!(from.d() <= 0 && from.d() >= 0)) {
    _internal_set_d(from._internal_d());
  }
  if (!(from.goal() <= 0 && from.goal() >= 0)) {
    _internal_set_goal(from._internal_goal());
  }
  if (!(from.output() <= 0 && from.output() >= 0)) {
    _internal_set_output(from._internal_output());
  }
  if (!(from.error() <= 0 && from.error() >= 0)) {
    _internal_set_error(from._internal_error());
  }
}

void PID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.PID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PID::CopyFrom(const PID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.PID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PID::IsInitialized() const {
  return true;
}

void PID::InternalSwap(PID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PID, error_)
      + sizeof(PID::error_)
      - PROTOBUF_FIELD_OFFSET(PID, p_)>(
          reinterpret_cast<char*>(&p_),
          reinterpret_cast<char*>(&other->p_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[68]);
}

// ===================================================================

class RampInfo::_Internal {
 public:
  static const ::sensors::PID& approach_forward_pid(const RampInfo* msg);
  static const ::sensors::PID& approach_turn_pid(const RampInfo* msg);
  static const ::sensors::PID& adjustment_forward_pid(const RampInfo* msg);
  static const ::sensors::PID& adjustment_turn_pid(const RampInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const RampInfo* msg);
};

const ::sensors::PID&
RampInfo::_Internal::approach_forward_pid(const RampInfo* msg) {
  return *msg->approach_forward_pid_;
}
const ::sensors::PID&
RampInfo::_Internal::approach_turn_pid(const RampInfo* msg) {
  return *msg->approach_turn_pid_;
}
const ::sensors::PID&
RampInfo::_Internal::adjustment_forward_pid(const RampInfo* msg) {
  return *msg->adjustment_forward_pid_;
}
const ::sensors::PID&
RampInfo::_Internal::adjustment_turn_pid(const RampInfo* msg) {
  return *msg->adjustment_turn_pid_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
RampInfo::_Internal::timestamp(const RampInfo* msg) {
  return *msg->timestamp_;
}
void RampInfo::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
RampInfo::RampInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.RampInfo)
}
RampInfo::RampInfo(const RampInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_approach_forward_pid()) {
    approach_forward_pid_ = new ::sensors::PID(*from.approach_forward_pid_);
  } else {
    approach_forward_pid_ = nullptr;
  }
  if (from._internal_has_approach_turn_pid()) {
    approach_turn_pid_ = new ::sensors::PID(*from.approach_turn_pid_);
  } else {
    approach_turn_pid_ = nullptr;
  }
  if (from._internal_has_adjustment_forward_pid()) {
    adjustment_forward_pid_ = new ::sensors::PID(*from.adjustment_forward_pid_);
  } else {
    adjustment_forward_pid_ = nullptr;
  }
  if (from._internal_has_adjustment_turn_pid()) {
    adjustment_turn_pid_ = new ::sensors::PID(*from.adjustment_turn_pid_);
  } else {
    adjustment_turn_pid_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&ramp_width_) -
    reinterpret_cast<char*>(&state_)) + sizeof(ramp_width_));
  // @@protoc_insertion_point(copy_constructor:sensors.RampInfo)
}

void RampInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&approach_forward_pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ramp_width_) -
    reinterpret_cast<char*>(&approach_forward_pid_)) + sizeof(ramp_width_));
}

RampInfo::~RampInfo() {
  // @@protoc_insertion_point(destructor:sensors.RampInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RampInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete approach_forward_pid_;
  if (this != internal_default_instance()) delete approach_turn_pid_;
  if (this != internal_default_instance()) delete adjustment_forward_pid_;
  if (this != internal_default_instance()) delete adjustment_turn_pid_;
  if (this != internal_default_instance()) delete timestamp_;
}

void RampInfo::ArenaDtor(void* object) {
  RampInfo* _this = reinterpret_cast< RampInfo* >(object);
  (void)_this;
}
void RampInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RampInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RampInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.RampInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && approach_forward_pid_ != nullptr) {
    delete approach_forward_pid_;
  }
  approach_forward_pid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && approach_turn_pid_ != nullptr) {
    delete approach_turn_pid_;
  }
  approach_turn_pid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && adjustment_forward_pid_ != nullptr) {
    delete adjustment_forward_pid_;
  }
  adjustment_forward_pid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && adjustment_turn_pid_ != nullptr) {
    delete adjustment_turn_pid_;
  }
  adjustment_turn_pid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ramp_width_) -
      reinterpret_cast<char*>(&state_)) + sizeof(ramp_width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RampInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.RampState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::sensors::RampState>(val));
        } else goto handle_unusual;
        continue;
      // float scout_center_dist_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          scout_center_dist_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float chair_ramp_dist_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          chair_ramp_dist_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 ramp_trac_js_lr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ramp_trac_js_lr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ramp_trac_js_fb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ramp_trac_js_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 operating_js_lr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          operating_js_lr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 operating_js_fb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          operating_js_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.PID approach_forward_pid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_approach_forward_pid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.PID approach_turn_pid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_approach_turn_pid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.PID adjustment_forward_pid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjustment_forward_pid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensors.PID adjustment_turn_pid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjustment_turn_pid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float ramp_width = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          ramp_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RampInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.RampInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.RampState state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // float scout_center_dist_x = 2;
  if (!(this->scout_center_dist_x() <= 0 && this->scout_center_dist_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scout_center_dist_x(), target);
  }

  // float chair_ramp_dist_y = 3;
  if (!(this->chair_ramp_dist_y() <= 0 && this->chair_ramp_dist_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_chair_ramp_dist_y(), target);
  }

  // int32 ramp_trac_js_lr = 4;
  if (this->ramp_trac_js_lr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ramp_trac_js_lr(), target);
  }

  // int32 ramp_trac_js_fb = 5;
  if (this->ramp_trac_js_fb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ramp_trac_js_fb(), target);
  }

  // int32 operating_js_lr = 6;
  if (this->operating_js_lr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_operating_js_lr(), target);
  }

  // int32 operating_js_fb = 7;
  if (this->operating_js_fb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_operating_js_fb(), target);
  }

  // .sensors.PID approach_forward_pid = 8;
  if (this->has_approach_forward_pid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::approach_forward_pid(this), target, stream);
  }

  // .sensors.PID approach_turn_pid = 9;
  if (this->has_approach_turn_pid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::approach_turn_pid(this), target, stream);
  }

  // .sensors.PID adjustment_forward_pid = 10;
  if (this->has_adjustment_forward_pid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::adjustment_forward_pid(this), target, stream);
  }

  // .sensors.PID adjustment_turn_pid = 11;
  if (this->has_adjustment_turn_pid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::adjustment_turn_pid(this), target, stream);
  }

  // float ramp_width = 12;
  if (!(this->ramp_width() <= 0 && this->ramp_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_ramp_width(), target);
  }

  // .google.protobuf.Timestamp timestamp = 13;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.RampInfo)
  return target;
}

size_t RampInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.RampInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.PID approach_forward_pid = 8;
  if (this->has_approach_forward_pid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *approach_forward_pid_);
  }

  // .sensors.PID approach_turn_pid = 9;
  if (this->has_approach_turn_pid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *approach_turn_pid_);
  }

  // .sensors.PID adjustment_forward_pid = 10;
  if (this->has_adjustment_forward_pid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adjustment_forward_pid_);
  }

  // .sensors.PID adjustment_turn_pid = 11;
  if (this->has_adjustment_turn_pid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adjustment_turn_pid_);
  }

  // .google.protobuf.Timestamp timestamp = 13;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .sensors.RampState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // float scout_center_dist_x = 2;
  if (!(this->scout_center_dist_x() <= 0 && this->scout_center_dist_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float chair_ramp_dist_y = 3;
  if (!(this->chair_ramp_dist_y() <= 0 && this->chair_ramp_dist_y() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 ramp_trac_js_lr = 4;
  if (this->ramp_trac_js_lr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ramp_trac_js_lr());
  }

  // int32 ramp_trac_js_fb = 5;
  if (this->ramp_trac_js_fb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ramp_trac_js_fb());
  }

  // int32 operating_js_lr = 6;
  if (this->operating_js_lr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operating_js_lr());
  }

  // int32 operating_js_fb = 7;
  if (this->operating_js_fb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operating_js_fb());
  }

  // float ramp_width = 12;
  if (!(this->ramp_width() <= 0 && this->ramp_width() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RampInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.RampInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RampInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RampInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.RampInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.RampInfo)
    MergeFrom(*source);
  }
}

void RampInfo::MergeFrom(const RampInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.RampInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_approach_forward_pid()) {
    _internal_mutable_approach_forward_pid()->::sensors::PID::MergeFrom(from._internal_approach_forward_pid());
  }
  if (from.has_approach_turn_pid()) {
    _internal_mutable_approach_turn_pid()->::sensors::PID::MergeFrom(from._internal_approach_turn_pid());
  }
  if (from.has_adjustment_forward_pid()) {
    _internal_mutable_adjustment_forward_pid()->::sensors::PID::MergeFrom(from._internal_adjustment_forward_pid());
  }
  if (from.has_adjustment_turn_pid()) {
    _internal_mutable_adjustment_turn_pid()->::sensors::PID::MergeFrom(from._internal_adjustment_turn_pid());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (!(from.scout_center_dist_x() <= 0 && from.scout_center_dist_x() >= 0)) {
    _internal_set_scout_center_dist_x(from._internal_scout_center_dist_x());
  }
  if (!(from.chair_ramp_dist_y() <= 0 && from.chair_ramp_dist_y() >= 0)) {
    _internal_set_chair_ramp_dist_y(from._internal_chair_ramp_dist_y());
  }
  if (from.ramp_trac_js_lr() != 0) {
    _internal_set_ramp_trac_js_lr(from._internal_ramp_trac_js_lr());
  }
  if (from.ramp_trac_js_fb() != 0) {
    _internal_set_ramp_trac_js_fb(from._internal_ramp_trac_js_fb());
  }
  if (from.operating_js_lr() != 0) {
    _internal_set_operating_js_lr(from._internal_operating_js_lr());
  }
  if (from.operating_js_fb() != 0) {
    _internal_set_operating_js_fb(from._internal_operating_js_fb());
  }
  if (!(from.ramp_width() <= 0 && from.ramp_width() >= 0)) {
    _internal_set_ramp_width(from._internal_ramp_width());
  }
}

void RampInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.RampInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RampInfo::CopyFrom(const RampInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.RampInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RampInfo::IsInitialized() const {
  return true;
}

void RampInfo::InternalSwap(RampInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RampInfo, ramp_width_)
      + sizeof(RampInfo::ramp_width_)
      - PROTOBUF_FIELD_OFFSET(RampInfo, approach_forward_pid_)>(
          reinterpret_cast<char*>(&approach_forward_pid_),
          reinterpret_cast<char*>(&other->approach_forward_pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RampInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_getter, &descriptor_table_sensors_5fgrpc_2fsensors_2eproto_once,
      file_level_metadata_sensors_5fgrpc_2fsensors_2eproto[69]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sensors
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensors::AudioPlaybackRequest* Arena::CreateMaybeMessage< ::sensors::AudioPlaybackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::AudioPlaybackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::PressRequest* Arena::CreateMaybeMessage< ::sensors::PressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::PressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ZoneBoundary* Arena::CreateMaybeMessage< ::sensors::ZoneBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ZoneBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ZoneBoundaries* Arena::CreateMaybeMessage< ::sensors::ZoneBoundaries >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ZoneBoundaries >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::BlockedZone* Arena::CreateMaybeMessage< ::sensors::BlockedZone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::BlockedZone >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::BlockedZones* Arena::CreateMaybeMessage< ::sensors::BlockedZones >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::BlockedZones >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::JoystickRange* Arena::CreateMaybeMessage< ::sensors::JoystickRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::JoystickRange >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::JoystickRanges* Arena::CreateMaybeMessage< ::sensors::JoystickRanges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::JoystickRanges >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::StartModeData* Arena::CreateMaybeMessage< ::sensors::StartModeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::StartModeData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Response* Arena::CreateMaybeMessage< ::sensors::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::DFParameters* Arena::CreateMaybeMessage< ::sensors::DFParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::DFParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::DFSeatEvent* Arena::CreateMaybeMessage< ::sensors::DFSeatEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::DFSeatEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::DistanceData* Arena::CreateMaybeMessage< ::sensors::DistanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::DistanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::SeatPressure* Arena::CreateMaybeMessage< ::sensors::SeatPressure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::SeatPressure >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ObstacleValue_Linear* Arena::CreateMaybeMessage< ::sensors::ObstacleValue_Linear >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ObstacleValue_Linear >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ObstacleValue_Angular* Arena::CreateMaybeMessage< ::sensors::ObstacleValue_Angular >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ObstacleValue_Angular >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ObstacleValue_Combo* Arena::CreateMaybeMessage< ::sensors::ObstacleValue_Combo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ObstacleValue_Combo >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ObstacleValue* Arena::CreateMaybeMessage< ::sensors::ObstacleValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ObstacleValue >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ClosestObstacles* Arena::CreateMaybeMessage< ::sensors::ClosestObstacles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ClosestObstacles >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::CameraPoints* Arena::CreateMaybeMessage< ::sensors::CameraPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::CameraPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Point3D* Arena::CreateMaybeMessage< ::sensors::Point3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Point3D >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ObjectDetection2D* Arena::CreateMaybeMessage< ::sensors::ObjectDetection2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ObjectDetection2D >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Object2D* Arena::CreateMaybeMessage< ::sensors::Object2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Object2D >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::CameraPoints2D* Arena::CreateMaybeMessage< ::sensors::CameraPoints2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::CameraPoints2D >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Point2D* Arena::CreateMaybeMessage< ::sensors::Point2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Point2D >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::LoggingData* Arena::CreateMaybeMessage< ::sensors::LoggingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::LoggingData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Led* Arena::CreateMaybeMessage< ::sensors::Led >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Led >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::HmiState* Arena::CreateMaybeMessage< ::sensors::HmiState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::HmiState >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::HmiStreamData* Arena::CreateMaybeMessage< ::sensors::HmiStreamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::HmiStreamData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::PressCountStreamData* Arena::CreateMaybeMessage< ::sensors::PressCountStreamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::PressCountStreamData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::NavigationScaling* Arena::CreateMaybeMessage< ::sensors::NavigationScaling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::NavigationScaling >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::UltrasonicCtrl* Arena::CreateMaybeMessage< ::sensors::UltrasonicCtrl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::UltrasonicCtrl >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::UltrasonicDistance* Arena::CreateMaybeMessage< ::sensors::UltrasonicDistance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::UltrasonicDistance >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::UltrasonicDistances* Arena::CreateMaybeMessage< ::sensors::UltrasonicDistances >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::UltrasonicDistances >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::UltrasonicCurve* Arena::CreateMaybeMessage< ::sensors::UltrasonicCurve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::UltrasonicCurve >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::RadarFilter* Arena::CreateMaybeMessage< ::sensors::RadarFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::RadarFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::RadarCtrl* Arena::CreateMaybeMessage< ::sensors::RadarCtrl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::RadarCtrl >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::RadarPoint* Arena::CreateMaybeMessage< ::sensors::RadarPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::RadarPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::RadarPoints* Arena::CreateMaybeMessage< ::sensors::RadarPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::RadarPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ChairSpeed* Arena::CreateMaybeMessage< ::sensors::ChairSpeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ChairSpeed >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ImuCtrl* Arena::CreateMaybeMessage< ::sensors::ImuCtrl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ImuCtrl >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ImuData* Arena::CreateMaybeMessage< ::sensors::ImuData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ImuData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ChairMode* Arena::CreateMaybeMessage< ::sensors::ChairMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ChairMode >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ChairProfile* Arena::CreateMaybeMessage< ::sensors::ChairProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ChairProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::SpeedSetting* Arena::CreateMaybeMessage< ::sensors::SpeedSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::SpeedSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::JoystickData* Arena::CreateMaybeMessage< ::sensors::JoystickData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::JoystickData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Joystick* Arena::CreateMaybeMessage< ::sensors::Joystick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Joystick >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::BatteryVoltage* Arena::CreateMaybeMessage< ::sensors::BatteryVoltage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::BatteryVoltage >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::BatteryPercent* Arena::CreateMaybeMessage< ::sensors::BatteryPercent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::BatteryPercent >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::GPSData* Arena::CreateMaybeMessage< ::sensors::GPSData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::GPSData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::EncoderData* Arena::CreateMaybeMessage< ::sensors::EncoderData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::EncoderData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Vec3* Arena::CreateMaybeMessage< ::sensors::Vec3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Vec3 >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Vec4* Arena::CreateMaybeMessage< ::sensors::Vec4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Vec4 >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::AhrsData* Arena::CreateMaybeMessage< ::sensors::AhrsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::AhrsData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::MatrixElement* Arena::CreateMaybeMessage< ::sensors::MatrixElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::MatrixElement >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::CalMatrix* Arena::CreateMaybeMessage< ::sensors::CalMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::CalMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::IrIntrinsics* Arena::CreateMaybeMessage< ::sensors::IrIntrinsics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::IrIntrinsics >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::IrFrame* Arena::CreateMaybeMessage< ::sensors::IrFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::IrFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::RemoteJsValues* Arena::CreateMaybeMessage< ::sensors::RemoteJsValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::RemoteJsValues >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ModeCtrl* Arena::CreateMaybeMessage< ::sensors::ModeCtrl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ModeCtrl >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::RampMode* Arena::CreateMaybeMessage< ::sensors::RampMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::RampMode >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::RampAssistStates* Arena::CreateMaybeMessage< ::sensors::RampAssistStates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::RampAssistStates >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::LuciOverride* Arena::CreateMaybeMessage< ::sensors::LuciOverride >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::LuciOverride >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ReactionTestResult* Arena::CreateMaybeMessage< ::sensors::ReactionTestResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ReactionTestResult >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::LandMarkRotation* Arena::CreateMaybeMessage< ::sensors::LandMarkRotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::LandMarkRotation >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::LandMarkTranslation* Arena::CreateMaybeMessage< ::sensors::LandMarkTranslation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::LandMarkTranslation >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Pose* Arena::CreateMaybeMessage< ::sensors::Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::LuciLandmark* Arena::CreateMaybeMessage< ::sensors::LuciLandmark >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::LuciLandmark >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::PID* Arena::CreateMaybeMessage< ::sensors::PID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::PID >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::RampInfo* Arena::CreateMaybeMessage< ::sensors::RampInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::RampInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
