// Copyright 2025 LUCI Mobility, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

// sensors grpc
package sensors;

service Sensors {

  rpc JsOverride(RemoteJsValues) returns (Response); //
  rpc AddInputSource(InputSourceRequest) returns (Response);
  rpc RemoveInputSource(InputSourceRequest) returns (Response);
  rpc UltrasonicStream(google.protobuf.Empty)
      returns (stream UltrasonicDistances); //

  rpc RadarStream(google.protobuf.Empty) returns (stream RadarPoints); //
  rpc ImuStream(ImuCtrl) returns (stream ImuData); // 
  rpc DriveJoystickStream(google.protobuf.Empty) returns (stream JoystickData); //

  rpc UserJoystickStream(google.protobuf.Empty) returns (stream JoystickData); //
  rpc AhrsStream(google.protobuf.Empty) returns (stream AhrsData); //

  rpc ScalingStream(google.protobuf.Empty) returns (stream NavigationScaling); //
  rpc ActiveScalingStream(google.protobuf.Empty) returns (stream ActiveScaling); //

  rpc DecimatedCameraStream(google.protobuf.Empty)
      returns (stream CameraPoints); //
  rpc FlatCameraStream(google.protobuf.Empty) returns (stream CameraPoints2D); //
  rpc DropoffCameraStream(google.protobuf.Empty) returns (stream CameraPoints); //

  rpc IrStream(stream FrameRate) returns (stream IrFrame); //

  rpc DepthImageStream(google.protobuf.Empty) returns (stream DepthFrame); //

  rpc EncoderStream(google.protobuf.Empty) returns (stream EncoderData); //

  rpc ChairProfileStream(google.protobuf.Empty) returns (stream ChairProfile); //
  rpc SpeedSettingStream(google.protobuf.Empty) returns (stream SpeedSetting); //

  rpc HmiStream(google.protobuf.Empty) returns (stream HmiStreamData); //
  rpc PressCountStream(google.protobuf.Empty) returns (stream PressCountStreamData); //

  rpc EnableRadarFilter(RadarFilter) returns (Response) {}; //
  rpc DisableRadarFilter(RadarFilter) returns (Response) {}; //
}

message Response {
  string reply = 1;
  int32 return_code = 2;
}

message CameraPoints2D {
  repeated Point2D points = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message Point2D {
  float x = 1;
  float y = 2;
}

message CameraPoints {
  repeated Point3D points = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message Point3D {
  float x = 1;
  float y = 2;
  float z = 3;
}

message NavigationScaling {
  float front_fb = 1;
  float front_rl = 2;
  float front_right_fb = 3;
  float front_right_rl = 4;
  float front_left_fb = 5;
  float front_left_rl = 6;
  float right_fb = 7;
  float right_rl = 8;
  float left_fb = 9;
  float left_rl = 10;
  float back_right_fb = 11;
  float back_right_rl = 12;
  float back_left_fb = 13;
  float back_left_rl = 14;
  float back_fb = 15;
  float back_rl = 16;
  uint32 max_js_scale_increase = 17;
  uint32 max_js_scale_decrease = 18;
}

message ActiveScaling {
  JoystickData joystick = 1;
  float forward_back_scaling = 2;
  float left_right_scaling = 3;
}

message UltrasonicDistance {
  enum Board {
    UNKNOWN = 0;
    MPU = 1;
    IO_B_LEFT = 2;
    IO_B_RIGHT = 3;
  }
  double distance = 1;
  Board board = 2;
  int32 spi_id = 3;
  int32 address = 4;
  google.protobuf.Timestamp timestamp = 5;
  repeated Point3D arc_points = 6;
}

message UltrasonicDistances {
  repeated UltrasonicDistance distances = 1;
}

message RadarPoint {
  double x = 1;
  double y = 2;
  double z = 3;
  double doppler = 4;
  double cross_section = 5;
}

message RadarPoints {
  enum Radar {
    UNKNOWN = 0;
    LEFT = 1;
    RIGHT = 2;
    FRONT = 3;
  }
  repeated RadarPoint points = 1;
  Radar source = 2;
  google.protobuf.Timestamp timestamp = 3;
}

enum Imu {
  UNKNOWN = 0;
  FOOTPLATE = 1;
  MPU = 2;
  ALL = 3;
}

message ImuCtrl {
  Imu imu = 1;
}

message ImuData {
  double quaternion_x = 1;
  double quaternion_y = 2;
  double quaternion_z = 3;
  double quaternion_w = 4;

  double acceleration_x = 5;
  double acceleration_y = 6;
  double acceleration_z = 7;

  double gyro_x = 8;
  double gyro_y = 9;
  double gyro_z = 10;

  double euler_x = 11;
  double euler_y = 12;
  double euler_z = 13;

  double accelerometer_x = 14;
  double accelerometer_y = 15;
  double accelerometer_z = 16;

  double magnetometer_x = 17;
  double magnetometer_y = 18;
  double magnetometer_z = 19;

  double gravity_x = 20;
  double gravity_y = 21;
  double gravity_z = 22;

  enum CalibrationStatus {
    NOT_CALIBRATED = 0;
    IN_PROGRESS = 1;
    USABLE = 2;
    COMPLETE = 3;
  }
  CalibrationStatus cal_system = 23;
  CalibrationStatus cal_gyroscope = 24;
  CalibrationStatus cal_accelerometer = 25;
  CalibrationStatus cal_magnetometer = 26;
  google.protobuf.Timestamp timestamp = 27;

  Imu source = 28;
}

enum JoystickZone {
  Front = 0;
  FrontLeft = 1;
  FrontRight = 2;
  Left = 3;
  Right = 4;
  BackLeft = 5;
  BackRight = 6;
  Back = 7;
  Origin = 8;
}

message JoystickData {
  int32 forward_back = 1;
  int32 left_right = 2;
  JoystickZone joystick_zone = 3;
  InputSource source = 4;
  google.protobuf.Timestamp timestamp = 5;
}

message EncoderData {
  float left_angle = 1;
  float right_angle = 2;
  float fl_caster_degrees = 3;
  float bl_caster_degrees = 4;
  float fr_caster_degrees = 5;
  float br_caster_degrees = 6;
  uint32 edge_timestamp = 7;
  google.protobuf.Timestamp timestamp = 8;
}

message Vec3 {
  float x = 1;
  float y = 2;
  float z = 3;
}

message Vec4 {
  float w = 1;
  float x = 2;
  float y = 3;
  float z = 4;
}

message AhrsData {
  Vec3 linear_velocity = 1;
  Vec3 linear_acceleration = 2;
  Vec3 angular_velocity = 3;
  Vec3 angular_acceleration = 4;
  Vec3 orientation = 5;
  google.protobuf.Timestamp timestamp = 6;
}

message IrIntrinsics {
  float fx = 1;
  float fy = 2;
  float ppx = 3;
  float ppy = 4;
}

message QuaternionRotation {
  float x = 1;
  float y = 2;
  float z = 3;
  float w = 4;
}

// This is a general rotation message that can be used for Euler or Quaternion
// units. This is not to be used directly but rather in a Pose message.
// Depending on the "Type" set in the Pose message defines how to treat the
// x,y,z elements and if the w element should be ignored.
message Rotation {
  float x = 1;
  float y = 2;
  float z = 3;
  float w = 4;
}

message Translation {
  float x = 1;
  float y = 2;
  float z = 3;
}

message Pose {
  enum Type {
    RADIAN = 0;
    DEGREE = 1;
    QUATERNION = 2;
  }
  Type type = 1;
  Translation translation = 2;
  Rotation rotation = 3;
}


message CameraMetaData {
  IrIntrinsics intrinsics = 2;
  Pose transformation = 3;
}

message IrFrame {
  bytes frame = 1;
  int32 width = 2;
  int32 height = 3;
  string camera = 4;
  CameraMetaData meta_data = 5;
  google.protobuf.Timestamp timestamp = 6;
}

message DepthFrame {
  bytes frame = 1;
  int32 width = 2;
  int32 height = 3;
  string camera = 4;
  google.protobuf.Timestamp timestamp = 6;
}

message RemoteJsValues {
  int32 forward_back = 1;
  int32 left_right = 2;
  InputSource source = 3;
}

message RampMode {
  bool ramp_active = 1;
  bool override_dropoff = 2;
  bool backwards_traversal = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message FrameRate {
  uint32 rate = 1;
}

enum InputSource {
  RampAssist = 0;
  AutonomousRemote = 1;
  WDI = 2;
  ChairVirtual = 3;
  ChairPhysical = 4;
  SharedRemote = 5;
}

message InputSourceRequest {
  InputSource source = 1;
}

message ChairProfile {
  int32 profile = 1;
}

message SpeedSetting {
  uint32 speed_setting = 1;
}

message HmiStreamData {
  enum ButtonState {
    PRESSED = 0;
    RELEASED = 1;
  }
  ButtonState button_state = 2;
}

message PressCountStreamData {
  int32 press_count = 1;
}

message RadarFilter {
  enum Filter {
    RANGE_CHOP = 0;
   }
  Filter filter = 1;
}
